<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>「CTSC2018」暴力写挂</title>
    <url>/2025/07/27/CTSC2018-bao-li-xie-gua/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2553">「CTSC2018」暴力写挂</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$$<br>dep(x) + dep(y) - dep(LCA(x, y)) - dep’(LCA’(x, y))\\<br> &#x3D; \frac{1}{2} (dep(x) + dep(y) - 2dep(LCA(x, y)) + dep(x) + dep(y) - 2dep’(LCA’(x, y)))\\<br> &#x3D; \frac{1}{2}(dis(x, y) + dep(x) + dep(y) - 2dep’(LCA’(x, y)))<br>$$</p>
<p>考虑对第一棵树边分治。设当前分治重心为 $ U, V $ ，选择 $ U $ 侧节点 $ X $ ，选择 $ V $ 侧节点 $ Y $ ，则令 $ X $ 为一类节点，贡献为 $ e1(X) &#x3D; dep(X) + dis(V, X) $ ；令 $ Y $ 为二类节点，贡献为 $ e2(Y) &#x3D; dep(Y) + dis(V, Y) $ 。枚举第二颗树的 $ LCA $ ，设 $ X, Y $ 在第二颗树中的 $ LCA $ 为 $ lca $ ，则对答案的贡献为 $ \frac{1}{2}(e1(X) + e2(Y) - 2dep(lca)) $ 。由于需要正确的时间复杂度，所以需要对第二颗树建虚树进行 $ DP $ 。<br>不优秀的实现会导致时间复杂度为 $ O(n \log^2 n) $ ，由于每次建虚树的时间复杂度应为 $ O(k) $ ，所以需要用 $ RMQ $ 实现 $ O(1) $ 的 $ LCA $ ；另外每次建虚树需要将点排序，将排序放在分治之前，然后按照分治将数列分成两段，每次建虚树直接调用数组（或者先分治下去再归并排序然后建虚树）。更改后时间复杂度为 $ O(n \log n) $ 。<br>注意 $ x $ 可以与 $ y $ 相同，而边分治未考虑这一点，所以还要考虑 $ x &#x3D; y $ 的情况。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, ll&gt; pil;</span><br><span class="line"><span class="type">const</span> ll INF = <span class="number">1e17</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">800010</span>;</span><br><span class="line"><span class="type">int</span> n, m; ll ans = -INF, w[N], fw[N];</span><br><span class="line">vector&lt;pil&gt; e1[N], e2[N]; vector&lt;<span class="type">int</span>&gt; E[N]; <span class="type">int</span> ar[N], len;</span><br><span class="line"><span class="type">int</span> dep[N], dfn[N], idx, a[N], st[<span class="number">20</span>][N], lg[N]; ll Dep[N];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>, to[N + N], nxt[N + N], hed[N]; ll val[N + N]; <span class="type">bool</span> used[N + N];</span><br><span class="line"><span class="type">int</span> size, rte, mn, sz[N], tot;</span><br><span class="line">ll value[N], f1[N], f2[N]; <span class="type">int</span> flag[N], sta[N], top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(), pre = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; pre = c, c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = x * <span class="number">10ll</span> + (c ^ <span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(pre == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, ll z)</span> </span>&#123;</span><br><span class="line">	to[++cnt] = y, nxt[cnt] = hed[x], hed[x] = cnt, val[cnt] = z;</span><br><span class="line">	to[++cnt] = x, nxt[cnt] = hed[y], hed[y] = cnt, val[cnt] = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> dfn[x] &lt; dfn[y]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getdfn</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	dfn[u] = ++idx, a[idx] = u, dep[u] = dep[ff] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e2[u]) <span class="keyword">if</span>(v.fst != ff) Dep[v.fst] = Dep[u] + v.snd, <span class="built_in">getdfn</span>(v.fst, u), a[++idx] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	x = dfn[x], y = dfn[y]; <span class="keyword">if</span>(x &gt; y) <span class="built_in">swap</span>(x, y); <span class="type">int</span> k = y - x + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> dep[st[lg[k]][x]] &lt;= dep[st[lg[k]][y - (<span class="number">1</span> &lt;&lt; lg[k]) + <span class="number">1</span>]] ? st[lg[k]][x] : st[lg[k]][y - (<span class="number">1</span> &lt;&lt; lg[k]) + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ar[l];</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, u = ++m, ls = <span class="built_in">build</span>(l, mid), rs = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">	<span class="keyword">if</span>(ls) <span class="built_in">addedge</span>(u, ls, fw[ls]); <span class="keyword">if</span>(rs) <span class="built_in">addedge</span>(u, rs, fw[rs]); <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rebuild</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	len = <span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">auto</span> v : e1[u]) <span class="keyword">if</span>(v.fst != ff) ar[++len] = v.fst, fw[v.fst] = v.snd;</span><br><span class="line">	<span class="type">int</span> mid = (<span class="number">1</span> + len) &gt;&gt; <span class="number">1</span>, ls = <span class="built_in">build</span>(<span class="number">1</span>, mid), rs = <span class="built_in">build</span>(mid + <span class="number">1</span>, len);</span><br><span class="line">	<span class="keyword">if</span>(ls) <span class="built_in">addedge</span>(u, ls, fw[ls]); <span class="keyword">if</span>(rs) <span class="built_in">addedge</span>(u, rs, fw[rs]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e1[u]) <span class="keyword">if</span>(v.fst != ff) w[v.fst] = w[u] + v.snd, <span class="built_in">rebuild</span>(v.fst, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getrt</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> ed)</span> </span>&#123;</span><br><span class="line">	sz[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] != ff &amp;&amp; !used[i])</span><br><span class="line">		<span class="built_in">getrt</span>(to[i], u, i), sz[u] += sz[to[i]];</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">abs</span>(size - <span class="number">2</span> * sz[u]) &lt; mn) mn = <span class="built_in">abs</span>(size - <span class="number">2</span> * sz[u]), rte = ed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> opt, ll d)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u &lt;= n) value[u] = d + w[u], flag[u] = opt;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] != ff &amp;&amp; !used[i]) <span class="built_in">Find</span>(to[i], u, opt, d + val[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	f1[u] = f2[u] = -INF;</span><br><span class="line">	<span class="keyword">if</span>(flag[u] == <span class="number">1</span>) f1[u] = <span class="built_in">max</span>(f1[u], value[u]);</span><br><span class="line">	<span class="keyword">if</span>(flag[u] == <span class="number">2</span>) f2[u] = <span class="built_in">max</span>(f2[u], value[u]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : E[u]) &#123;</span><br><span class="line">		<span class="built_in">Dfs</span>(v);</span><br><span class="line">		ans = <span class="built_in">max</span>(ans, <span class="built_in">max</span>(f1[u] + f2[v], f2[u] + f1[v]) - Dep[u] - Dep[u]);</span><br><span class="line">		f1[u] = <span class="built_in">max</span>(f1[u], f1[v]), f2[u] = <span class="built_in">max</span>(f2[u], f2[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	E[u].<span class="built_in">clear</span>(), flag[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">(vector&lt;<span class="type">int</span>&gt; p)</span> </span>&#123;</span><br><span class="line">	sta[top = <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : p) &#123;</span><br><span class="line">		<span class="keyword">if</span>(v == <span class="number">1</span>) <span class="keyword">continue</span>; <span class="type">int</span> lca = <span class="built_in">LCA</span>(v, sta[top]);</span><br><span class="line">		<span class="keyword">if</span>(lca == sta[top]) &#123; sta[++top] = v; <span class="keyword">continue</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span>(; top &gt; <span class="number">1</span> &amp;&amp; dep[sta[top - <span class="number">1</span>]] &gt;= dep[lca]; --top) E[sta[top - <span class="number">1</span>]].<span class="built_in">pb</span>(sta[top]);</span><br><span class="line">		<span class="keyword">if</span>(lca != sta[top]) E[lca].<span class="built_in">pb</span>(sta[top]), sta[top] = lca;</span><br><span class="line">		sta[++top] = v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(; top &gt; <span class="number">1</span>; --top) E[sta[top - <span class="number">1</span>]].<span class="built_in">pb</span>(sta[top]); <span class="built_in">Dfs</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u, vector&lt;<span class="type">int</span>&gt; p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u == <span class="number">-1</span> || used[u]) <span class="keyword">return</span> ;</span><br><span class="line">	used[u] = used[u ^ <span class="number">1</span>] = <span class="number">1</span>; <span class="type">int</span> rt1 = to[u], rt2 = to[u ^ <span class="number">1</span>], t1, t2;</span><br><span class="line">	<span class="built_in">Find</span>(rt1, rt2, <span class="number">1</span>, val[u]), <span class="built_in">Find</span>(rt2, rt1, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; ls, rs; <span class="keyword">for</span>(<span class="keyword">auto</span> v : p) flag[v] == <span class="number">1</span> ? ls.<span class="built_in">pb</span>(v) : rs.<span class="built_in">pb</span>(v);</span><br><span class="line">	<span class="built_in">Solve</span>(p);</span><br><span class="line">	size = ls.<span class="built_in">size</span>(), mn = m + <span class="number">1</span>, <span class="built_in">getrt</span>(rt1, rt2, <span class="number">-1</span>), <span class="built_in">solve</span>(rte, ls);</span><br><span class="line">	size = rs.<span class="built_in">size</span>(), mn = m + <span class="number">1</span>, <span class="built_in">getrt</span>(rt2, rt1, <span class="number">-1</span>), <span class="built_in">solve</span>(rte, rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n), m = n;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y; ll z; <span class="built_in">gi</span>(x), <span class="built_in">gi</span>(y), <span class="built_in">gi</span>(z), e1[x].<span class="built_in">pb</span>(<span class="built_in">mp</span>(y, z)), e1[y].<span class="built_in">pb</span>(<span class="built_in">mp</span>(x, z)); &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y; ll z; <span class="built_in">gi</span>(x), <span class="built_in">gi</span>(y), <span class="built_in">gi</span>(z), e2[x].<span class="built_in">pb</span>(<span class="built_in">mp</span>(y, z)), e2[y].<span class="built_in">pb</span>(<span class="built_in">mp</span>(x, z)); &#125;</span><br><span class="line">	<span class="built_in">getdfn</span>(<span class="number">1</span>, <span class="number">0</span>); <span class="built_in">rep</span>(i, <span class="number">1</span>, idx) st[<span class="number">0</span>][i] = a[i];</span><br><span class="line">	lg[<span class="number">0</span>] = <span class="number">-1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, idx) lg[i] = lg[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= idx; j++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= idx - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; i++)</span><br><span class="line">			st[j][i] = dep[st[j - <span class="number">1</span>][i]] &lt;= dep[st[j - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)]] ? st[j - <span class="number">1</span>][i] : st[j - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)];</span><br><span class="line">	<span class="built_in">rebuild</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; p; <span class="built_in">rep</span>(i, <span class="number">1</span>, n) p.<span class="built_in">pb</span>(i); <span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), cmp);</span><br><span class="line">	size = m, mn = m + <span class="number">1</span>, <span class="built_in">getrt</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>), <span class="built_in">solve</span>(rte, p), ans /= <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) ans = <span class="built_in">max</span>(ans, w[i] - Dep[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>虚树</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>【BZOJ3160】万径人踪灭</title>
    <url>/2025/07/27/BZOJ3160-wan-jing-ren-zong-mie/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3160">【BZOJ3160】万径人踪灭</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>不包含连续下标的回文子序列 &#x3D; 所有回文子序列 - 连续下标的回文子序列。<br>对于连续下标的回文子序列，可以用 $ Manacher $ 算法快速计算。<br>对于所有回文子序列，考虑枚举对称中心 $ r $ ， 若有 $ k $ 组 $ (x, y) $ 满足 $ x \not&#x3D; y $ 且 $ x + y &#x3D; 2r $ 且 $ s_x &#x3D; s_y $ ，那么方案数为 $ 2^{k + 1} - 1 $ （$ k $ 组 $ (x, y) $ 加上 $ r $）。若对称中心在 $ r $ 和 $ r + 1 $ 之间，此时 $(x, y)$ 应当满足 $ x + y &#x3D; 2r + 1 $ ， 方案数为 $ 2^k - 1 $ 。<br>发现寻找 $ s_x, s_y $ 可以用卷积来写，就直接 $ NTT $ 了。<br>时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, m, RL[N + N], cnt[N + N], ba[N];</span><br><span class="line"><span class="type">char</span> s[N], t[N + N];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a, b, res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="type">int</span>)((ll) x * y % mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> ss = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">		<span class="keyword">return</span> ss;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		a.<span class="built_in">resize</span>(lmt);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(a[i], a[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; mid; i++) w[i] = <span class="built_in">mul</span>(w[i - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; lmt; j += mid &lt;&lt; <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = a[j + k], y = <span class="built_in">mul</span>(a[j + mid + k], w[k]);</span><br><span class="line">					a[j + k] = <span class="built_in">add</span>(x, y), a[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++)</span><br><span class="line">				a[i] = <span class="built_in">mul</span>(a[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; a = A, b = B; <span class="type">int</span> lmt = <span class="built_in">Get</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(a, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(b, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) a[i] = <span class="built_in">mul</span>(a[i], b[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(a, lmt, <span class="number">-1</span>); <span class="keyword">return</span> a.<span class="built_in">resize</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">1</span>), a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> mx = <span class="number">0</span>, pos = <span class="number">0</span>; RL[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		RL[i] = mx &gt; i ? <span class="built_in">Min</span>(RL[pos * <span class="number">2</span> - i], mx - i) : <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; t[i - RL[i]] == t[i + RL[i]]; ++RL[i]);</span><br><span class="line">		<span class="keyword">if</span>(i + RL[i] &gt; mx) mx = i + RL[i], pos = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) ans = (ans - RL[i] / <span class="number">2</span> + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s), n = <span class="built_in">strlen</span>(s);</span><br><span class="line">	t[m++] = <span class="string">&#x27;*&#x27;</span>; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) t[m++] = <span class="string">&#x27;#&#x27;</span>, t[m++] = s[i];</span><br><span class="line">	t[m++] = <span class="string">&#x27;#&#x27;</span>, <span class="built_in">Manacher</span>();</span><br><span class="line">	ba[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ba[i] = (ba[i - <span class="number">1</span>] + ba[i - <span class="number">1</span>]) % mod;</span><br><span class="line">	<span class="comment">//solve a</span></span><br><span class="line">	a.<span class="built_in">clear</span>(), b.<span class="built_in">clear</span>(), res.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) a.<span class="built_in">pb</span>(s[i] == <span class="string">&#x27;a&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">	b = a, res = Poly::<span class="built_in">Mul</span>(a, b), res.<span class="built_in">resize</span>(n + n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(s[i] == <span class="string">&#x27;a&#x27;</span>) --res[i + i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + n - <span class="number">2</span>; i++) cnt[i] += res[i] / <span class="number">2</span>;</span><br><span class="line">	<span class="comment">//solve b</span></span><br><span class="line">	a.<span class="built_in">clear</span>(), b.<span class="built_in">clear</span>(), res.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) a.<span class="built_in">pb</span>(s[i] == <span class="string">&#x27;b&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">	b = a, res = Poly::<span class="built_in">Mul</span>(a, b), res.<span class="built_in">resize</span>(n + n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(s[i] == <span class="string">&#x27;b&#x27;</span>) --res[i + i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + n - <span class="number">2</span>; i++) cnt[i] += res[i] / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//	for(int i = 0; i &lt;= n + n - 2; i++)</span></span><br><span class="line"><span class="comment">//		printf(&quot;&gt;&gt;&gt; %d -&gt; %d : %d\n&quot;, i / 2, (i + 1) / 2, cnt[i]);</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + n - <span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(i &amp; <span class="number">1</span>) ans = ((ans + ba[cnt[i]]) % mod + mod - <span class="number">1</span>) % mod;</span><br><span class="line">		<span class="keyword">else</span> ans = ((ans + ba[cnt[i] + <span class="number">1</span>]) % mod + mod - <span class="number">1</span>) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>【APIO2019】桥梁</title>
    <url>/2025/07/27/APIO2019-qiao-liang/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P5443">【APIO2019】桥梁</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑对询问分块，选择块大小为 $ S $ ，每次对块内的操作进行处理。因此对于之前的修改可以预处理出来。<br>对于块内询问，将所有没有在这个块内修改的边按权值大到小排序，将询问按权值大到小排序，然后用两个指针维护。若此时指向边权大于询问的权值，则加入一条边；否则询问。<br>考虑加入可能被修改的边。按照时间将边进行修改，然后将边权权不小于询问权值的边加入，在进行询问。这部分可以暴力进行。考虑做完后需要撤销操作，所以需要用按秩合并的并查集。<br>这样询问的复杂度为 $ O(S^3 \log n + m \log n) $ 。<br>考虑对边修改后进行排序。暴力排序时间复杂度 $ O(n \sqrt{n} \log n) $ ，而分类后归并排序时间复杂度 $ O(n \sqrt{n \log n}) $ ，此时 $ S &#x3D; \sqrt{n \log n} $ 最优。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, BLO = <span class="number">700</span>;</span><br><span class="line"><span class="type">int</span> n, m, q, fa[N], sz[N], ans[N], pos[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y, w, id; <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> w &gt; yy.w; &#125;</span><br><span class="line">&#125;; Edge e[N], a1[N], a2[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Q</span> &#123;</span><br><span class="line">	<span class="type">int</span> opt, x, y, id; <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Q &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> y &gt; yy.y; &#125;</span><br><span class="line">&#125;; Q qry[N], qq[N]; <span class="type">int</span> len, pre[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">S</span> &#123;</span><br><span class="line">	<span class="type">int</span> id, fa, sz; <span class="built_in">S</span>(<span class="type">int</span> x = <span class="number">0</span>, <span class="type">int</span> y = <span class="number">0</span>, <span class="type">int</span> z = <span class="number">0</span>) : <span class="built_in">id</span>(x), <span class="built_in">fa</span>(y), <span class="built_in">sz</span>(z) &#123;&#125;</span><br><span class="line">&#125;; S sta[N]; <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> used[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gi</span><span class="params">(<span class="type">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(); <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : <span class="built_in">Find</span>(fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	x = <span class="built_in">Find</span>(x), y = <span class="built_in">Find</span>(y); <span class="keyword">if</span>(x == y) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(sz[x] &gt; sz[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">	sta[++top] = <span class="built_in">S</span>(x, fa[x], sz[x]), fa[x] = y, sz[y] += sz[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	S u = sta[top--]; sz[fa[u.id]] -= u.sz, fa[u.id] = u.fa, sz[u.id] = u.sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n), <span class="built_in">gi</span>(m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i, sz[i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">gi</span>(e[i].x), <span class="built_in">gi</span>(e[i].y), <span class="built_in">gi</span>(e[i].w), e[i].id = i;</span><br><span class="line">	<span class="built_in">gi</span>(q);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">		<span class="built_in">gi</span>(qry[i].opt), <span class="built_in">gi</span>(qry[i].x), <span class="built_in">gi</span>(qry[i].y), qry[i].id = i;</span><br><span class="line">	<span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>); <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) pos[e[i].id] = i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">1</span>, r; l &lt;= q; l += BLO) &#123;</span><br><span class="line">		r = <span class="built_in">min</span>(q, l + BLO - <span class="number">1</span>), len = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) used[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(qry[i].opt == <span class="number">2</span>) qq[++len] = qry[i]; <span class="keyword">else</span> used[qry[i].x] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">stable_sort</span>(qq + <span class="number">1</span>, qq + len + <span class="number">1</span>);</span><br><span class="line">		<span class="type">int</span> p1 = <span class="number">1</span>, p2 = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; p1 &lt;= m || p2 &lt;= len;) &#123;</span><br><span class="line">			<span class="keyword">for</span>(; p1 &lt;= m &amp;&amp; used[e[p1].id]; ++p1);</span><br><span class="line">			<span class="keyword">if</span>(p1 &gt; m &amp;&amp; p2 &gt; len) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(p2 &gt; len || (p1 &lt;= m &amp;&amp; e[p1].w &gt;= qq[p2].y)) <span class="built_in">Union</span>(e[p1].x, e[p1].y), ++p1;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="type">int</span> cur = top, ps = l - <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r &amp;&amp; i &lt;= qq[p2].id; i++) &#123;</span><br><span class="line">					ps = i;</span><br><span class="line">					<span class="keyword">if</span>(qry[i].opt == <span class="number">1</span>)</span><br><span class="line">						pre[qry[i].id] = e[pos[qry[i].x]].w, e[pos[qry[i].x]].w = qry[i].y;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">					<span class="keyword">if</span>(qry[i].opt == <span class="number">1</span> &amp;&amp; e[pos[qry[i].x]].w &gt;= qq[p2].y)</span><br><span class="line">						<span class="built_in">Union</span>(e[pos[qry[i].x]].x, e[pos[qry[i].x]].y);</span><br><span class="line">				ans[qq[p2].id] = sz[<span class="built_in">Find</span>(qq[p2].x)];</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = ps; i &gt;= l; i--)</span><br><span class="line">					<span class="keyword">if</span>(qry[i].opt == <span class="number">1</span>) e[pos[qry[i].x]].w = pre[qry[i].id];</span><br><span class="line">				<span class="keyword">for</span>(; top &gt; cur; <span class="built_in">Undo</span>()); ++p2;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(; top; <span class="built_in">Undo</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i++) <span class="keyword">if</span>(qry[i].opt == <span class="number">1</span>) e[pos[qry[i].x]].w = qry[i].y;</span><br><span class="line">		<span class="type">int</span> len1 = <span class="number">0</span>, len2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(used[e[i].id]) a1[++len1] = e[i]; <span class="keyword">else</span> a2[++len2] = e[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(a1 + <span class="number">1</span>, a1 + len1 + <span class="number">1</span>), p1 = p2 = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(p2 &gt; len2 || (p1 &lt;= len1 &amp;&amp; a1[p1] &lt; a2[p2])) e[i] = a1[p1++];</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(p2 &lt;= len2) e[i] = a2[p2++];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) pos[e[i].id] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) <span class="keyword">if</span>(ans[i]) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title>CSP2019 游记</title>
    <url>/2025/07/27/CSP2019-you-ji/</url>
    <content><![CDATA[<span id="more"></span>  

<p>这是高中倒数第二年的机会，天已入秋，一片片枯黄的叶离开了它的大树，我的时间也不多了。<br>经过一年的磨练，总想着 Day1 AK。。。<br>时间一分一秒地流过，赶 T3 的手不停地抖动。。。<br>来不及了。<br>冷汗直逼颈部，耳中回荡着不停滞的时间滴答声和追求满分的欲望，眼前的屏幕字符变成一团团扭动的蛆虫。<br>我试图上厕所冷静一下，可是小脑发晕，跌倒在路障上，精神如同粉尘一般湮没在空气中。<br>啊啊啊，这便是我的绝望啊！<br>冥冥中仿佛回到了机位前，不知谁的声音在呼唤。<br>“就这样放弃吗？”<br>“不。我还要写题。”<br>“那再给你最后一次机会吧。”<br>待我醒转过来，已经过了 5 分钟。<br>知道比赛结束，我最后一题一分未得，第二题还面临被卡常的风险。<br>真是不长记性啊。。。<br>时至今日，我经常在梦中看到自己FST，猛然惊醒，然而天未亮。<br>能够在黑暗中给予我安慰的，恐怕只有我自己了吧。<br><img src="/2025/07/27/CSP2019-you-ji/%5C1.png" alt="photo">  </p>
]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title>【CodeChef】Count on a Treap</title>
    <url>/2025/07/27/CodeChef-Count-on-a-Treap/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.codechef.com/problems/COT5">【CodeChef】Count on a Treap</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>将元素按权值排序，再按键值建笛卡尔树，得到的树就是原 $ Treap $ 。<br>树上两个点的距离等于两个点的深度之和减去它们 $ LCA $ 深度的两倍。<br>考虑如何计算两个点的 $ LCA $。根据笛卡尔树的性质，任意点对 $ x, y (x \leq y) $ 的 $ LCA $ 为序列 $ [x, y] $ 中的键值最大值所在点的编号。<br>考虑如何计算一个点的深度。一个点的深度等于从他开始的前缀&#x2F;后缀键值最大值个数，可以用线段树维护（update 时间复杂度会因在线段树中二分查找前缀&#x2F;后缀键值最大值个数而多一个 $ \log $ ）。<br>时间复杂度为 $ O(n \log^2 n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">400010</span>;</span><br><span class="line"><span class="type">int</span> n, lca; ll value;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>, rt = <span class="number">0</span>, lf[N * <span class="number">2</span>], rf[N * <span class="number">2</span>], lx[N * <span class="number">2</span>], rx[N * <span class="number">2</span>];</span><br><span class="line">ll mx[N * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Opt</span> &#123; <span class="type">int</span> opt; ll x, y; &#125;; Opt q[N];</span><br><span class="line">ll p[N]; <span class="type">int</span> lp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Max</span><span class="params">(<span class="type">const</span> ll &amp;x, <span class="type">const</span> ll &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	u = ++tot; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">build</span>(lf[u], l, mid), <span class="built_in">build</span>(rf[u], mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">glx</span><span class="params">(<span class="type">int</span> u, ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!lf[u]) <span class="keyword">return</span> x &lt; mx[u];</span><br><span class="line">	<span class="keyword">return</span> x &lt; mx[rf[u]] ? (lx[u] + <span class="built_in">glx</span>(rf[u], x)) : <span class="built_in">glx</span>(lf[u], x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">grx</span><span class="params">(<span class="type">int</span> u, ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!lf[u]) <span class="keyword">return</span> x &lt; mx[u];</span><br><span class="line">	<span class="keyword">return</span> x &lt; mx[lf[u]] ? (rx[u] + <span class="built_in">grx</span>(lf[u], x)) : <span class="built_in">grx</span>(rf[u], x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	mx[u] = <span class="built_in">Max</span>(mx[lf[u]], mx[rf[u]]);</span><br><span class="line">	lx[u] = <span class="built_in">glx</span>(lf[u], mx[rf[u]]), rx[u] = <span class="built_in">grx</span>(rf[u], mx[lf[u]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, ll w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123; mx[u] = w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	x &lt;= mid ? <span class="built_in">mdy</span>(lf[u], l, mid, x, w) : <span class="built_in">mdy</span>(rf[u], mid + <span class="number">1</span>, r, x, w);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gmx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(L == l &amp;&amp; r == R) &#123;</span><br><span class="line">		<span class="keyword">if</span>(mx[u] &lt; value) <span class="keyword">return</span> ;</span><br><span class="line">		value = mx[u]; <span class="keyword">if</span>(l &gt;= r) &#123; lca = l; <span class="keyword">return</span> ; &#125;</span><br><span class="line">		<span class="built_in">gmx</span>(lf[u], l, mid, L, mid), <span class="built_in">gmx</span>(rf[u], mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, R);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(R &lt;= mid) <span class="built_in">gmx</span>(lf[u], l, mid, L, R);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(L &gt; mid) <span class="built_in">gmx</span>(rf[u], mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">gmx</span>(lf[u], l, mid, L, mid), <span class="built_in">gmx</span>(rf[u], mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">asklx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &gt;= r) &#123;</span><br><span class="line">		ss = <span class="built_in">glx</span>(u, value); value = <span class="built_in">Max</span>(value, mx[u]); <span class="keyword">return</span> ss;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(mid &lt; x) ss += <span class="built_in">asklx</span>(rf[u], mid + <span class="number">1</span>, r, x);</span><br><span class="line">	ss += <span class="built_in">asklx</span>(lf[u], l, mid, x); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">askrx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= l) &#123;</span><br><span class="line">		ss = <span class="built_in">grx</span>(u, value); value = <span class="built_in">Max</span>(value, mx[u]); <span class="keyword">return</span> ss;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(mid &gt;= x) ss += <span class="built_in">askrx</span>(lf[u], l, mid, x);</span><br><span class="line">	ss += <span class="built_in">askrx</span>(rf[u], mid + <span class="number">1</span>, r, x); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dep</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">-1</span>;</span><br><span class="line">	value = <span class="number">0</span>, ss += <span class="built_in">asklx</span>(rt, <span class="number">1</span>, lp, x);</span><br><span class="line">	value = <span class="number">0</span>, ss += <span class="built_in">askrx</span>(rt, <span class="number">1</span>, lp, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	value = <span class="number">0</span>; <span class="keyword">if</span>(x &gt; y) <span class="built_in">swap</span>(x, y); <span class="built_in">gmx</span>(rt, <span class="number">1</span>, lp, x, y); <span class="keyword">return</span> lca;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dis</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">dep</span>(x) + <span class="built_in">dep</span>(y) - <span class="number">2</span> * <span class="built_in">dep</span>(<span class="built_in">LCA</span>(x, y)); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;q[i].opt, &amp;q[i].x);</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt ^ <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;q[i].y);</span><br><span class="line">		<span class="keyword">if</span>(!q[i].opt) p[++lp] = q[i].x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>), lp = <span class="built_in">unique</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>) - p - <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(rt, <span class="number">1</span>, lp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		q[i].x = <span class="built_in">lower_bound</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>, q[i].x) - p;</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">0</span>) <span class="built_in">mdy</span>(rt, <span class="number">1</span>, lp, q[i].x, q[i].y);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) <span class="built_in">mdy</span>(rt, <span class="number">1</span>, lp, q[i].x, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			q[i].y = <span class="built_in">lower_bound</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>, q[i].y) - p;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">dis</span>(q[i].x, q[i].y));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>笛卡尔树</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 1109F】 Sasha and Algorithm of Silence&#39;s Sounds</title>
    <url>/2025/07/27/Codeforces-1109F-Sasha-and-Algorithm-of-Silence&#39;s-Sounds/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://codeforces.com/problemset/problem/1109/F">【Codeforces 1109F】 Sasha and Algorithm of Silence’s Sounds</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>当区间 $ [l, r] $ 中不存在环且点数与边数之差为 $ 1 $ 时是一棵树。当 $ r $ 增加时， $ l $ 也会增加，所以只要维护两个端点。<br>对于环的部分，可以用 $ LCT $ 快速维护（ $ findroot $ 后要 $ splay $ 一下，否则会 $ T $）。<br>对于维护点数与边数之差，可以用线段树维护针对当前询问左端点为某个位置时点数与边数之差， $ r $ 增加时直接继承上一个 $ r $ 。若新加的点 $ r $ ，则线段树区间 $ [l, r] $ 的权值加一；若新加的点 $ r $ 对 $ k \in [l, r] $ 有边，则线段树区间 $ [l, k] $ 的权值减一。然后数线段树中权值为 $ 1 $ 的位置的个数即可。<br>复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc ch[0][u]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc ch[1][u]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N= <span class="number">1010</span>, M = <span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> n, m, lb = <span class="number">1</span>, rb = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> a[N][N], idx[M], idy[M];</span><br><span class="line"><span class="type">int</span> fa[M], ch[<span class="number">2</span>][M], sta[M], top; <span class="type">bool</span> rv[M];</span><br><span class="line"><span class="type">int</span> tr[M * <span class="number">4</span>], sum[M * <span class="number">4</span>], lz[M * <span class="number">4</span>], fst, snd;</span><br><span class="line">ll ans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">nroot</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="keyword">return</span> ch[<span class="number">0</span>][fa[u]] == u || ch[<span class="number">1</span>][fa[u]] == u; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Rev</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; rv[u] ^= <span class="number">1</span>, <span class="built_in">swap</span>(lc, rc); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="keyword">if</span>(rv[u]) <span class="built_in">Rev</span>(lc), <span class="built_in">Rev</span>(rc), rv[u] = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> y = fa[u], z = fa[y], k = ch[<span class="number">1</span>][y] == u, w = ch[k ^ <span class="number">1</span>][u];</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) ch[ch[<span class="number">1</span>][z] == y][z] = u; ch[k][y] = w, ch[k ^ <span class="number">1</span>][u] = y;</span><br><span class="line">	<span class="keyword">if</span>(w) fa[w] = y; fa[u] = z, fa[y] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> y = u, z; <span class="keyword">for</span>(sta[top = <span class="number">1</span>] = y; <span class="built_in">nroot</span>(y); sta[++top] = y = fa[y]);</span><br><span class="line">	<span class="keyword">for</span>(; top; <span class="built_in">pd</span>(sta[top--]));</span><br><span class="line">	<span class="keyword">for</span>(; <span class="built_in">nroot</span>(u); <span class="built_in">rotate</span>(u)) &#123;</span><br><span class="line">		y = fa[u], z = fa[y];</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) <span class="built_in">rotate</span>((ch[<span class="number">0</span>][y] == u) ^ (ch[<span class="number">0</span>][z] == y) ? u : y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">0</span>; u; u = fa[y = u]) <span class="built_in">splay</span>(u), rc = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="built_in">access</span>(u), <span class="built_in">splay</span>(u), <span class="built_in">Rev</span>(u); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="built_in">makeroot</span>(x), <span class="built_in">access</span>(y), <span class="built_in">splay</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">findroot</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">access</span>(u), <span class="built_in">splay</span>(u); <span class="keyword">for</span>(; lc; <span class="built_in">pd</span>(u), u = lc); <span class="built_in">splay</span>(u); <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">lnk</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="built_in">makeroot</span>(x), fa[x] = y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="built_in">split</span>(x, y), fa[x] = ch[<span class="number">0</span>][y] = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	sum[u] = <span class="number">0</span>, tr[u] = <span class="built_in">Min</span>(tr[u * <span class="number">2</span>], tr[u * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">if</span>(tr[u] == tr[u * <span class="number">2</span>]) sum[u] += sum[u * <span class="number">2</span>];</span><br><span class="line">	<span class="keyword">if</span>(tr[u] == tr[u * <span class="number">2</span> + <span class="number">1</span>]) sum[u] += sum[u * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!lz[u]) <span class="keyword">return</span> ;</span><br><span class="line">	lz[u * <span class="number">2</span>] += lz[u], lz[u * <span class="number">2</span> + <span class="number">1</span>] += lz[u];</span><br><span class="line">	tr[u * <span class="number">2</span>] += lz[u], tr[u * <span class="number">2</span> + <span class="number">1</span>] += lz[u];</span><br><span class="line">	lz[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	tr[u] = <span class="number">0</span>, sum[u] = r - l + <span class="number">1</span>; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(u * <span class="number">2</span>, l, mid), <span class="built_in">build</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123; tr[u] += w, lz[u] += w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= mid) <span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, L, R, w);</span><br><span class="line">	<span class="keyword">if</span>(R &gt; mid) <span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, w);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">		<span class="keyword">if</span>(fst &gt; tr[u]) fst = tr[u], snd = <span class="number">0</span>; <span class="keyword">if</span>(fst == tr[u]) snd += sum[u];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= mid) <span class="built_in">ask</span>(u * <span class="number">2</span>, l, mid, L, R);</span><br><span class="line">	<span class="keyword">if</span>(R &gt; mid) <span class="built_in">ask</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> tmp[<span class="number">5</span>]; <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x = idx[rb + <span class="number">1</span>] + dir[i][<span class="number">0</span>], y = idy[rb + <span class="number">1</span>] + dir[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span>(!x || !y || x &gt; n || y &gt; m || a[x][y] &lt; lb || a[x][y] &gt; rb)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		tmp[++len] = <span class="built_in">findroot</span>(a[x][y]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(tmp + <span class="number">1</span>, tmp + len + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) <span class="keyword">if</span>(tmp[i] == tmp[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]), idx[a[i][j]] = i, idy[a[i][j]] = j;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n * m), <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, n * m, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(; rb &lt; n * m;) &#123;</span><br><span class="line">		<span class="keyword">for</span>(; lb &lt; rb &amp;&amp; !<span class="built_in">check</span>(); ++lb) <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> x = idx[lb] + dir[i][<span class="number">0</span>], y = idy[lb] + dir[i][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span>(!x || !y || x &gt; n || y &gt; m || a[x][y] &lt; lb || a[x][y] &gt; rb)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">cut</span>(lb, a[x][y]);</span><br><span class="line">		&#125;</span><br><span class="line">		++rb, <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, n * m, lb, rb, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> x = idx[rb] + dir[i][<span class="number">0</span>], y = idy[rb] + dir[i][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span>(!x || !y || x &gt; n || y &gt; m || a[x][y] &lt; lb || a[x][y] &gt; rb)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">lnk</span>(rb, a[x][y]), <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, n * m, lb, a[x][y], <span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		fst = M, snd = <span class="number">0</span>, <span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n * m, lb, rb); <span class="keyword">if</span>(fst == <span class="number">1</span>) ans += snd;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%I64d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 908H】 New year and Boolean Bridges</title>
    <url>/2025/07/27/Codeforces-908H-New-year-and-Boolean-Bridges/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://codeforces.com/problemset/problem/908/H">【Codeforces 908H】 New year and Boolean Bridges</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>发现 $ f(u, v)<del>OR</del>f(v, u) $ 满足当且仅当 $ f(u, v)<del>AND</del>f(v, u) $ 和  $ f(u, v)<del>XOR</del>f(v, u) $ 满足，故 $ f(u, v)<del>OR</del>f(v, u) $ 不予考虑。<br>若 $ f(u, v)<del>AND</del>f(v, u) $ 满足，则 $ u, v $ 在同一联通块；若 $ f(u, v)<del>XOR</del>f(v, u) $ 满足，则 $ u, v $ 不在同一联通块，所以可能产生矛盾，需要判无解。<br>最后的图一定是个弱连通块，即至少有 $ n - 1 $ 条边，由于一个大小为 $ 1 $ 的独立点对答案贡献为 $ 1 $ ，所以我们要最小化大小 $ \geq 2 $ 的连通块数目，而这样的连通块数目最多有 $ m &#x3D; \lfloor \frac{ n }{ 2 } \rfloor &#x3D; 23 $ 个。<br>考虑状压。令 $ fb[i] $ 表示 $ i $ 号点不能与那些点作为一个强连通块， $ le[i] $ 表示选择状态为 $ i $ 的点作为一个强联通块的合法性，可以通过 $ lowbit $ 从 $ fb[i] $ 推出 $ le[i] $ 。<br>每新加入一条边，弱连通块合法性满足 $ F[i] &#x3D; \sum_{ j | k &#x3D; i }{ F’[j] \times le[k] } $ ， $ F’[j] $ 表示上一次操作的 $ F[j] $ 。<br>这样可以 $ FWT $ 优化，最多进行 $ m $ 次，时间复杂度 $ O(m^2 2^{m}) $ ，并不能过去。<br>考虑我们 $ FWT $ 后不需要 $ IFWT $ 回去，每次求单点系数。 $ FWT $ 的过程可以理解为一个行向量右乘一个矩阵得到新的行向量，这个矩阵就是我们想要的系数，可以证明：  </p>
<blockquote>
<p>mu[x][y] &#x3D; (x &amp; y) !&#x3D; x ? 0 : ksm(-1, popcount(ksm(x, y));  </p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50</span>, M = <span class="number">10000000</span>;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">int</span> n, f[N], ans;</span><br><span class="line"><span class="type">int</span> sz[N], id[N], lg[M], len, cnt = <span class="number">0</span>, fb[N], le[M];</span><br><span class="line"><span class="type">int</span> nw[M], mu[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span>(<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">find</span>(f[x]); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fwt</span><span class="params">(<span class="type">int</span> *A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; lmt; j += mid &lt;&lt; <span class="number">1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(opt == <span class="number">1</span>) A[j + mid + k] = <span class="built_in">add</span>(A[j + mid + k], A[j + k]);</span><br><span class="line">				<span class="keyword">else</span> A[j + mid + k] = <span class="built_in">sub</span>(A[j + mid + k], A[j + k]);</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i] + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;A&#x27;</span>) f[<span class="built_in">find</span>(i)] = <span class="built_in">find</span>(j);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">			<span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;X&#x27;</span> &amp;&amp; <span class="built_in">find</span>(i) == <span class="built_in">find</span>(j)) &#123; <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	ans = n - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ++sz[<span class="built_in">find</span>(i)];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">find</span>(i) == i &amp;&amp; sz[i] &gt; <span class="number">1</span>) id[i] = cnt, lg[<span class="number">1</span> &lt;&lt; cnt] = cnt, ++cnt;</span><br><span class="line">	<span class="keyword">if</span>(!cnt) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	len = (<span class="number">1</span> &lt;&lt; cnt);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(g[i][j] != <span class="string">&#x27;X&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(sz[<span class="built_in">find</span>(i)] &gt; <span class="number">1</span> &amp;&amp; sz[<span class="built_in">find</span>(j)] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">				fb[id[<span class="built_in">find</span>(i)]] |= (<span class="number">1</span> &lt;&lt; id[<span class="built_in">find</span>(j)]);</span><br><span class="line">				fb[id[<span class="built_in">find</span>(j)]] |= (<span class="number">1</span> &lt;&lt; id[<span class="built_in">find</span>(i)]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	le[<span class="number">0</span>] = <span class="number">1</span>; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) le[<span class="number">1</span> &lt;&lt; i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(le[i]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="type">int</span> x = lg[i &amp; -i], y = i - (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">		<span class="keyword">if</span>(le[y] &amp;&amp; (fb[x] &amp; y) == <span class="number">0</span>) le[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fwt</span>(le, len, <span class="number">1</span>);</span><br><span class="line">	mu[<span class="number">0</span>] = (cnt &amp; <span class="number">1</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) mu[i] = <span class="built_in">sub</span>(<span class="number">0</span>, mu[i ^ (i &amp; -i)]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) nw[i] = le[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;; i++) &#123;</span><br><span class="line">		<span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) z = <span class="built_in">add</span>(z, <span class="built_in">mul</span>(mu[j], nw[j]));</span><br><span class="line">		<span class="keyword">if</span>(z) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans + i); <span class="keyword">break</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) nw[j] = <span class="built_in">mul</span>(nw[j], le[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FWT</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>【APIO2018】新家</title>
    <url>/2025/07/27/APIO2018-xin-jia/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2585">【APIO2018】新家</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>对于这种区间修改、单点询问的题目，可以将询问离线再扫描线。<br>考虑对于一个答案 $ ans_i $ 合法，当且仅当 $ (l_i + ans_i, INF) $ 中每种店上一次出现的位置不小于 $ l_i + ans_i $ 。对于每种店都开一个 multiset 即可维护前驱。<br>这样每一次加入&#x2F;删除会需要区间修改前驱，代码难度大，考虑 $ (l_i + ans_i, INF) $ 中每种店上一次出现的位置不小于 $ l_i + ans_i $ 的另一种解释，即 $ (l_i + ans_i, INF) $ 每个位置中每种店每个位置上一次出现的位置最小值不小于 $ l_i + ans_i $ ，然后就可以单点修改了。用线段树维护前驱最小值。<br>询问可以二分答案，更优秀的做法是在线段树上二分。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> multiset&lt;<span class="type">int</span>&gt;::iterator IT;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">600010</span>, LG = <span class="number">20</span>, INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="type">int</span> n, k, m, ans[N], clr;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Q</span> &#123;</span><br><span class="line">	<span class="type">int</span> opt, pos, type, pri;</span><br><span class="line">	<span class="built_in">Q</span>(<span class="type">int</span> Opt = <span class="number">0</span>, <span class="type">int</span> Pos = <span class="number">0</span>, <span class="type">int</span> Type = <span class="number">0</span>, <span class="type">int</span> Pri = <span class="number">0</span>) :</span><br><span class="line">		<span class="built_in">opt</span>(Opt), <span class="built_in">pos</span>(Pos), <span class="built_in">type</span>(Type), <span class="built_in">pri</span>(Pri) &#123;&#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Q &amp;yy)<span class="type">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> pri == yy.pri ? opt &lt; yy.opt : pri &lt; yy.pri;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; Q q[N + N]; <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; pp[N], st[N * LG];</span><br><span class="line"><span class="type">int</span> rt, tot, cnt, lf[N * LG], rf[N * LG], mn[N * LG], id[N * LG];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> ad, <span class="type">int</span> dl)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) u = ++tot;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!id[u]) id[u] = ++cnt;</span><br><span class="line">		multiset&lt;<span class="type">int</span>&gt; &amp;s = st[id[u]];</span><br><span class="line">		<span class="keyword">if</span>(ad) s.<span class="built_in">insert</span>(ad);</span><br><span class="line">		<span class="keyword">if</span>(dl) s.<span class="built_in">erase</span>(s.<span class="built_in">find</span>(dl));</span><br><span class="line">		mn[u] = s.<span class="built_in">size</span>() ? *s.<span class="built_in">begin</span>() : INF; <span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= mid) <span class="built_in">mdy</span>(lf[u], l, mid, x, ad, dl);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">mdy</span>(rf[u], mid + <span class="number">1</span>, r, x, ad, dl);</span><br><span class="line">	mn[u] = <span class="built_in">Min</span>(mn[lf[u]], mn[rf[u]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Q x)</span> </span>&#123;</span><br><span class="line">	multiset&lt;<span class="type">int</span>&gt; &amp;s = pp[x.type];</span><br><span class="line">	IT itr = s.<span class="built_in">upper_bound</span>(x.pos), itl = itr; --itl;</span><br><span class="line">	<span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, *itr, x.pos, *itl), <span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, x.pos, *itl, <span class="number">0</span>);</span><br><span class="line">	s.<span class="built_in">insert</span>(x.pos); <span class="keyword">if</span>(s.<span class="built_in">size</span>() == <span class="number">3</span>) ++clr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(Q x)</span> </span>&#123;</span><br><span class="line">	multiset&lt;<span class="type">int</span>&gt; &amp;s = pp[x.type]; s.<span class="built_in">erase</span>(s.<span class="built_in">find</span>(x.pos));</span><br><span class="line">	IT itr = s.<span class="built_in">upper_bound</span>(x.pos), itl = itr; --itl;</span><br><span class="line">	<span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, *itr, *itl, x.pos), <span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, x.pos, <span class="number">0</span>, *itl);</span><br><span class="line">	<span class="keyword">if</span>(s.<span class="built_in">size</span>() == <span class="number">2</span>) --clr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(Q x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(clr &lt; k) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>, r = INF, mid, t, tt = INF, u = rt;</span><br><span class="line">	<span class="keyword">for</span>(; l &lt; r;) &#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>, t = <span class="built_in">Min</span>(tt, mn[rf[u]]);</span><br><span class="line">		<span class="keyword">if</span>(x.pos &lt;= mid &amp;&amp; t + mid &gt;= x.pos * <span class="number">2</span>)</span><br><span class="line">			tt = t, r = mid, u = lf[u];</span><br><span class="line">		<span class="keyword">else</span> u = rf[u], l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l - x.pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;m), mn[<span class="number">0</span>] = INF;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">		pp[i].<span class="built_in">insert</span>(-INF), pp[i].<span class="built_in">insert</span>(INF), <span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, INF, -INF, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, t, a, b; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x, &amp;t, &amp;a, &amp;b);</span><br><span class="line">		q[++len] = <span class="built_in">Q</span>(<span class="number">1</span>, x, t, a), q[++len] = <span class="built_in">Q</span>(<span class="number">2</span>, x, t, b + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= m; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), q[++len] = <span class="built_in">Q</span>(<span class="number">3</span>, x, i, y);</span><br><span class="line">	<span class="built_in">sort</span>(q + <span class="number">1</span>, q + len + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) <span class="built_in">add</span>(q[i]);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(q[i].opt == <span class="number">2</span>) <span class="built_in">del</span>(q[i]);</span><br><span class="line">		<span class="keyword">else</span> ans[q[i].type] = <span class="built_in">ask</span>(q[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>CS188人工智能课程翻译</title>
    <url>/2025/07/27/CS188/</url>
    <content><![CDATA[<p><a href="https://www.zhihu.com/column/c_1099720701925302272">前文内容</a>  </p>
<p><a href="https://www.bilibili.com/video/BV1M24y1x7mM?p=56&vd_source=ae5e67f6772cc15652faf9cbf1b41d59">英文实在看不下去了</a></p>
<p>[TOC]</p>
<h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note09.pdf">RL I notes</a>  </p>
<p>在前面的笔记中，我们讨论了马尔可夫决策过程(Markov decision processes, MDP)，即通过值迭代(value iteration)和决策迭代(policy iteration)的方式去计算状态的最优价值(optimal value of states)并得到最优策略(optimal policy)。解决马尔可夫决策过程是 <strong>离线规划(offline planning)</strong> 的一个例子，此时 agent 知道每一处的转换函数(transition function)和奖励函数(reward function)，所有用来预处理最有价值的信息都不需要任何操作(action)来获取。在这节中，我们将讨论 <strong>在线规划(online planning)</strong> ，此时 agent 对任何一处的转换函数和奖励函数都一无所知。在在线规划中，agent 必须尝试 <strong>探索(exploration)</strong> ，在探索中它进行操作(actions)并在后继状态(successor states)得到反馈(feedbacks)并得到相应的奖励(rewards)。agent用反馈的信息去估计(estimate)最优策略，这个过程被称作 <strong>强化学习(reinforcement learning)</strong> ，再用估计过的最优策略去探索或者说使奖励最大化(reward maximization)。</p>
<p>先从基本的术语开始。在在线规划的每一步，agent 从状态 $ s $ 出发，然后通过操作 $ a $ 最后到达后继状态 $ s’ $ ，获得奖励 $ r $ 。每一个多元组 $ (s, a, s’, r) $ 被称作 <strong>样本(sample)</strong> 。 agent 持续地进行操作并在后继状态收集样本直到到达结束状态(terminal state)。像这样的一组样本(a collection of sample)称作一个周期(episode)。agents会进行多个周期以得到足够的数据进行学习。</p>
<p>有两种强化学习的类型——基于模型的学习(model-based learning)和不基于模型的学习(model-free learning)。基于模型的学习尝试用样本去估计转换和奖励函数，再用这些估计进行MDP（值迭代、策略迭代）。不基于模型的学习尝试去直接估计状态的 Q 值(Q-values of states)，而不用空间去构造MDP中转换函数和奖励函数的模型。</p>
<h3 id="基于模型的学习"><a href="#基于模型的学习" class="headerlink" title="基于模型的学习"></a>基于模型的学习</h3><p>用某个策略 $ \pi_{explore} $ 探索。</p>
<p>agent 生成转换函数的近似值 $ \hat{T}(s, a, s’) $ ，通过记录从 Q 状态 $ (s, a) $ 转换到状态 $ s’ $ 的次数，并规范化（即古典概率， $ \hat{T}(s, a, s’) &#x3D; \frac{count((s, a) \rightarrow s’)}{count((s, a))} $ ）。根据大数定律，收集的样本越多， $ \hat{T} $ 越接近真实值。</p>
<p>agent 生成奖励函数 $ \hat{R} $ ，通过不断探索未知的多元组 $ (s, a, s’) $ 。</p>
<p>当我们觉得合适的时候，我们结束 agent 的训练(training)，通过值迭代或者策略迭代在当前的模型（包含 $ \hat{T}, \hat{R} $ ）生成开发策略 $ \pi_{exploit} $ ，目标是使奖励最大化。我们将要讨论如何有效地在探索(exloration)和开发(exploitation)之间分配时间的方法。</p>
<p>基于模型的学习简单易懂且高效，但是维护所有收集的多元组 $ (s, a, s’) $ 的成本昂贵（空间、时间），所以在下一节——不基于模型的学习，我们将开发一种方法，免于多元组 $ (s, a, s’) $ 的维护，避免基于模型学习的内存开销。</p>
<h3 id="不基于模型的学习"><a href="#不基于模型的学习" class="headerlink" title="不基于模型的学习"></a>不基于模型的学习</h3><p>有很多不基于模型的学习算法，我们将讲以下三种：直接估值(direct evaluation)，时间差异学习(temporal difference learning)和 Q-learning 。直接估值和时间差异学习属于 <strong>被动强化学习(passive reinforcement learning)</strong> 的一类算法。在被动强化学习中，agent 遵循已知的策略操作并在过程中得到状态的值，这正是在 $ T $ 和 $ R $ 已知时 MDP 的策略评估所做的。 Q-learning 属于另一类不基于模型的学习—— <strong>主动强化学习(active reinforcement learning)</strong>，即agent在学习过程中可以通过反馈多次更新策略并最后经历足够多的探索后决定最优策略。</p>
<h4 id="直接估值"><a href="#直接估值" class="headerlink" title="直接估值"></a>直接估值</h4><p>先确定一个策略 $ \pi $ ，然后让 agent 遵循策略 $ \pi $ 进行多个周期。在 agent 收集样本的同时也维护每个状态下得到的价值和(counts of the total utility)以及 agent 访问到每个状态的次数(the number of times it visited the state)。任何时候，我们可以计算任意状态 $ s $ 的价值（即期望收益）：状态 $ s $ 的价值和除以状态 $ s $ 的访问次数。</p>
<p>例子：</p>
<p>策略 $ \pi $ 如下，衰减系数 $ \gamma &#x3D; 1 $ ，每条边奖励函数为 $ -1 $ 。</p>
<p><img src="/2025/07/27/CS188/fig1.png" alt="fig1.png"></p>
<p>状态 C 有概率走向状态 A 和状态 D，在探索次数较少时，从状态 B 出发和从状态 E 出发可能导致计算出的期望收益不同。在探索次数增多后会收敛成同一个值，但是这将会花费大量的时间。这个问题可以通过另一个被动强化学习——时间差异学习(temporal difference learning)来减轻。</p>
<h4 id="时间差异学习"><a href="#时间差异学习" class="headerlink" title="时间差异学习"></a>时间差异学习</h4><p>时间差异学习(temporal difference learning， TD learning)用了<code>从每一次经历中学习</code>的想法，而不是像直接估值那样先对状态价值和以及访问次数统计再做学习。在策略评估中，我们用固定的策略生成的方程组和 Bellman 方程组决定状态的值（或者迭代更新，像值迭代一样）。</p>
<p>$$<br>V^{\pi}(s) &#x3D; \sum_{s’}T(s, \pi(s), s’)[R(s, \pi(s), s’) + \gamma V^{\pi}(s’)]<br>$$</p>
<p>TD learning 尝试去解决如何在没有权重的情况下计算加权平均值的问题，用 <strong>指数滑动平均(exponential moving average)</strong> 的方式。</p>
<p>步骤：</p>
<ol>
<li>初始化：</li>
</ol>
<p>$$<br>\forall s, V^{\pi}(s) &#x3D; 0<br>$$</p>
<ol start="2">
<li>对于每一步，agent 进行操作 $ \pi(s) $ ，从状态 $ s $ 转移到状态 $ s’ $ ，获得奖励 $ R(s, \pi(s), s’) $ 。我们可以得到样本值(sample value)：</li>
</ol>
<p>$$<br>sample &#x3D; R(s, \pi(s), s’) + \gamma V^{\pi}(s’)<br>$$</p>
<p>$ \space \space \space \space \space \space $ 这是对 $ V^{\pi}(s) $ 的新的估计。</p>
<ol start="3">
<li>将样本值用指数滑动平均的方式纳入对 $ V^{\pi}(s) $ 的估计，对 $ V^{\pi}(s) $ 进行更新 ：</li>
</ol>
<p>$$<br>V^{\pi}(s) \leftarrow (1 - \alpha)V^{\pi}(s) + \alpha \cdot sample<br>$$</p>
<p>$ \space \space \space \space \space \space $ 其中 $ \alpha (0 \leq \alpha \leq 1) $ 被称为 <strong>学习速率(learning rate)</strong> 。</p>
<p>由这个更新规则可知，越旧的样本的权重指数级减小，这正是我们更新 $ V^{\pi}(s) $ 所需要的（因为越旧的样本往往意味着较劣的策略，也意味着错误）！这就是 TD learning 的美妙之处——用一个简单直接的更新规则，我们能够：</p>
<ul>
<li>在每一步学习，因此没得到状态的值的信息可以直接使用。</li>
<li>给较旧的、不太准确的样本给予指数级减小的权重。</li>
<li>相比于直接估值，可以在更少的周期内更快地向正确的状态的值收敛。</li>
</ul>
<h4 id="Q-learning"><a href="#Q-learning" class="headerlink" title="Q-learning"></a>Q-learning</h4><p>无论是直接估值还是 TD learning ，它们都会在所遵循的策略下得到真实的状态的值。但是，它们都有一个固有的问题——我们想要找一个最优的策略，这需要知道每个状态的 Q 值。为了计算 Q 值，我们需要转换函数和奖励函数并用 Bellman 方程表示。</p>
<p>$$<br>Q^{<em>}(s, a) &#x3D; \sum_{s’}T(s, a, s’)[R(s, a, s’) + \gamma V^{</em>}(s’)]<br>$$</p>
<p>因此，为了高效地更新 agent 的策略，TD learning 和直接估值通常与一些基于模型的学习一起使用，以获得 $ T $ 和 $ R $ 的估计。这种情况可以通过 Q-learning 的思想避免，即绕过对转换函数、奖励函数的需要，直接对 Q 值进行学习。因此，Q-learning 是完全不基于模型的。Q-learning 用了 Q 值迭代进行更新：</p>
<p>$$<br>Q_{k + 1}(s, a) \leftarrow \sum_{s’}T(s, a, s’)[R(s, a, s’) + \gamma \max_{a’} Q(s’, a’)]<br>$$</p>
<p>有了这个新的更新规则，和 TD learning 一样，用指数滑动平均：</p>
<p>$$<br>sample &#x3D; R(s, a, s’) + \gamma \max_{a’} Q(s’, a’)\<br>Q(s, a) \leftarrow (1 - \alpha) Q(s, a) + \alpha \cdot sample<br>$$</p>
<p>只要我们花足够多的时间去探索，并且用恰当的速率去减小 $ \alpha $ ，Q-learning 会对每个 Q 状态得到最优的 Q 值。这使得 Q-learning 具有革命性的意义——当 TD learning 和直接估值在某个策略下得到状态的值再用其他技巧决定最优策略时，Q-learning 可以直接得到最优策略，即使做出的次优或者随机的操作。这就是所谓的 <strong>离线策略学习(off-policy learning)</strong> （相较于直接估值和 TD learning 作为 <strong>在线策略学习(on-policy learning)</strong> 的例子）。</p>
<h4 id="Approximate-Q-learning"><a href="#Approximate-Q-learning" class="headerlink" title="Approximate Q-learning"></a>Approximate Q-learning</h4><p>Q-learning 还有进步的空间。Q-learning 将所有的状态以表格的形式存储，当状态数很多时，Q-learning 的效率并不高。这意味着我们不能访问所有状态并且不能存储所有的 Q 值，因为空间不够。</p>
<p>假如一个局势下 Q-learning 判断出是不利的，那么对于类似的情况 Q-learning 无法判断也是不利的。Approximate Q-learning 尝试去学习一些一般的情况并外推到许多类似的情况来解释这一点。生成学习经验的关键是对状态的 <strong>基于特征的表示(feature-based representation)</strong> ，即用一个 <strong>特征向量(feature vector)</strong> 来表示状态。例如，吃豆人的特征向量可以编码为：</p>
<ul>
<li>距离最近的幽灵的距离</li>
<li>距离最近的食物的距离</li>
<li>幽灵的个数</li>
<li>吃豆人是否被困(True&#x2F;False)</li>
</ul>
<p>使用特征向量，我们可以将状态的值和 Q 值视为线性函数：</p>
<p>$$<br>\begin{aligned}<br>    V(s) &amp;&#x3D; \sum_{k &#x3D; 1}^{n} w_{k} \cdot f_{k}(s) &#x3D; \vec{w} \cdot \vec{f}(s)\<br>    Q(s, a) &amp;&#x3D; \vec{w} \cdot \vec{f}(s, a)<br>\end{aligned}<br>$$</p>
<p>其中 $ \vec{f}(s) $ 表示状态的特征向量，$ \vec{f}(s, a) $ 表示 Q-状态 $ (s, a) $ 的特征向量，$ \vec{w} $ 表示权重向量。定义偏差(difference)为：</p>
<p>$$<br>difference &#x3D; [R(s, a, s’) + \gamma \max_{a’} Q(s’, a’)] - Q(s, a)<br>$$</p>
<p>Approximate Q-learning 的更新规则和 Q-learning 完全一致（实际上是最小二乘，不知道为什么笔记里写的是和 Q-learning 更新方式一致的）：</p>
<p>$$<br>w_{k} \leftarrow w_{k} + \alpha \cdot difference \cdot f_{k}(s, a)<br>$$</p>
<p>放弃对每个状态的 Q 值存储，使用 Approximate Q-learning 我们只需要存储一个权重向量就可以计算需要的 Q 值。因此，这不仅给了我们一个更泛用的 Q-learning 版本，并且显著提升了存储效率。</p>
<p>用偏差来重写 Q-learning 的更新规则：</p>
<p>$$<br>Q(s, a) \leftarrow Q(s, a) + \alpha \cdot difference<br>$$</p>
<p>这个更新规则和 $ w_{k} \leftarrow w_{k} + \alpha \cdot difference \cdot f_{k}(s, a) $ 略有不同但同样具有价值：它计算估计值和当前值的偏差，然后往估计值方向趋近，幅度和偏差值成正比。</p>
<h4 id="策略搜索-policy-search"><a href="#策略搜索-policy-search" class="headerlink" title="策略搜索(policy search)"></a>策略搜索(policy search)</h4><p>（note 里没写，PPT 里讲地不清楚，视频里一笔带过，以下内容疑似 PPT 内容的机翻）</p>
<p>问题：通常，运行良好的基于特征的策略（能赢，最大化得分）不是去选 V 值或者 Q 值最好的策略。</p>
<p>解决方案：学习奖励最大化的策略，而不是预测的值。</p>
<p>策略搜索：从一个不错的策略开始（例如：Q-learning 生成的策略），然后（在特征权重(feature weights)上）用爬山微调。</p>
<p>最简单的策略搜索：</p>
<ul>
<li>从线性的初始状态值或者 Q 值开始。</li>
<li>稍稍增加或者减小每个特征的权重，然后观察策略是否更优。</li>
</ul>
<p>问题：</p>
<ul>
<li>我们怎样认为这个策略更好？</li>
<li>这需要运行很多次样例的周期！</li>
<li>当特征很多时，这种方法就显得不实用。</li>
</ul>
<p>更好的方法利用前瞻性结构(lookahead structure)，聪明地取样，改变多个参数等等。</p>
<p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note10.pdf">RL II notes</a></p>
<p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/lectures/cs188-fa22-lec10.pdf">RL II slides</a></p>
<h3 id="探索和开发-exploration-and-exploitation"><a href="#探索和开发-exploration-and-exploitation" class="headerlink" title="探索和开发(exploration and exploitation)"></a>探索和开发(exploration and exploitation)</h3><h4 id="如何去探索？"><a href="#如何去探索？" class="headerlink" title="如何去探索？"></a>如何去探索？</h4><p>最简单的方式：随机操作( $ \varepsilon $ - greedy)</p>
<ul>
<li>每一步，进行两种选择。</li>
<li>一个较小的概率 $ \varepsilon $ ，随机操作。</li>
<li>一个较大的概率 $ 1 - \varepsilon $ ，按当前策略操作。</li>
</ul>
<p>随机操作的问题：</p>
<ul>
<li>最终会探索整个空间，但一旦完成了学习，就会到处乱走。</li>
<li>一个解决方法： $ \varepsilon $ 随时间减小。</li>
<li>另一个解决办法：用探索函数(exploration functions)。</li>
</ul>
<h4 id="探索函数-exploration-functions"><a href="#探索函数-exploration-functions" class="headerlink" title="探索函数(exploration functions)"></a>探索函数(exploration functions)</h4><p>对于随机操作，可以探索一定次数后结束。</p>
<p>更好的想法是，去探索访问次数少的点，最后停止探索(explore areas whose badness is not (yet) established, eventually stop exlporing)。</p>
<p>用估计的值 $ u $ 和访问次数 $ n $ 来定义探索函数，返回一个乐观的估计，例如 $ f(u, n) &#x3D; u + k &#x2F; n $ 。</p>
<p>对 Q 值更新规则进行修改：</p>
<p>$$<br>\begin{aligned}<br>    sample &amp;&#x3D; R(s, a, s’) + \gamma \max_{a’}f(Q(s’, a’), N(s’, a’))\<br>    Q(s, a) &amp;\leftarrow (1 - \alpha) Q(s, a) + \alpha \cdot sample<br>\end{aligned}<br>$$</p>
<h4 id="反悔-regret"><a href="#反悔-regret" class="headerlink" title="反悔(regret)"></a>反悔(regret)</h4><p>即使你能找到最优策略，在过程中你依旧可能会犯错误。</p>
<p>反悔值是你衡量错误成本的指标：最优（期望）的奖励和你（期望）的奖励（包括早期的次优选）的差。</p>
<p>最大限度地减少反悔不仅仅是为了得到最优策略，它还需要最优化学习以达到最优策略。</p>
<p>例如：随机探索和用探索函数探索都能得到最优策略，但是随机探索有更高的反悔值。</p>
<h2 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/lectures/cs188-fa22-lec11.pdf">Probability slides</a></p>
<p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note11.pdf">Probability notes</a></p>
<p>条件独立：事件A，B关于事件C条件独立（只要C事件发生，A、B相互独立），当且仅当：</p>
<p>$$<br>P(A | BC) &#x3D; P(A | C)\<br>or \<br>P(AB | C) &#x3D; P(A | C)P(B | C)<br>$$</p>
<p>记作：</p>
<p>$$<br>A \perp B \vert {C}<br>$$</p>
<p>推导：</p>
<p>$$<br>\begin{aligned}<br>    P(A | BC) &amp;&#x3D; \frac{P(ABC)}{P(BC)} \<br>    &amp;&#x3D; \frac{P(ABC)}{P(C)} \frac{P(C)}{P(BC)} \<br>    &amp;&#x3D; \underline{P(AB | C)} \frac{P(C)}{P(BC)} \<br>    &amp;&#x3D; \underline{P(A | C) P(B | C)} \frac{P(C)}{P(BC)} \<br>    &amp;&#x3D; P(A | C) \frac{P(BC)}{P(C)} \frac{P(C)}{P(BC)} \<br>    &amp;&#x3D; P(A | C)<br>\end{aligned}<br>$$</p>
<h2 id="贝叶斯网络"><a href="#贝叶斯网络" class="headerlink" title="贝叶斯网络"></a>贝叶斯网络</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/lectures/cs188-fa22-lec12.pdf">BN: Representation slides</a></p>
<p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note12.pdf">BN: Representation notes</a></p>
<h3 id="贝叶斯网络表达-Bayesian-Network-Representation"><a href="#贝叶斯网络表达-Bayesian-Network-Representation" class="headerlink" title="贝叶斯网络表达(Bayesian Network Representation)"></a>贝叶斯网络表达(Bayesian Network Representation)</h3><p>虽然枚举可以计算我们所有想要知道的概率，在计算机中用内存存储所有的联合分布(joint distribution)对于实际问题是不切实际的——假如有 n 个变量，每个变量有 d 个取值，那联合分布表会有 d^n^ 个条目，呈指数级。</p>
<p>贝叶斯网络通过条件概率(conditional probility)避免了这个问题。概率被存储在一些小的条件概率表并用有向无环图(directed acyclic graph, DAG)描述变量之间的关系。本地的概率表和DAG一起将信息存储，并足以计算任何条件概率分布。</p>
<p>我们定义贝叶斯网络包含：</p>
<ul>
<li>一个DAG，一个节点表示一个变量 $ X $ 。</li>
<li>对于每个节点有一个条件概率分布 $ P(X | A_1 \dots A_n) $ ，其中 $ A_i $ 表示 $ X $ 的第 $ i $ 个父亲，用条件概率表(conditional probability table, CPT)存储。每个CPT含有 $ n + 2 $ 列：$ n $ 个父亲，一个 $ X $ ，还有一个条件概率。</li>
</ul>
<p>贝叶斯网络的结构对不同节点间条件独立关系进行编码。这些条件独立性使我们可以存储多个小表，而非一个大表。</p>
<p>很重要的一点是贝叶斯网络节点之间的边并非表示两者之间存在相关性，不是因果关系。</p>
<p>例如，假设有一个模型，包含5个二进制随机变量：</p>
<ul>
<li>B：发生盗窃</li>
<li>A：警报响起</li>
<li>E：发生地震</li>
<li>J：John报警</li>
<li>M：Mary报警</li>
</ul>
<p>它们的关系可以用下图表示。</p>
<p><img src="/2025/07/27/CS188/fig2.png" alt="fig2.png"></p>
<p>在贝叶斯网络里，我们存储概率表 $ P(B), P(E), P(A | BE), P(J | A), P(M | A) $ 。</p>
<p>我们可以计算概率：</p>
<p>$$<br>P(X_1 X_1 \dots X_n) &#x3D; \prod_{i &#x3D; 1}^{n} P(X_i | parents(X_i))<br>$$</p>
<p>例如：</p>
<p>$$<br>P(-b, -e, +a, +j, -m) &#x3D; P(-b) \cdot P(-e) \cdot P(+a | -b, -e) \cdot P(+j | +a) \cdot P(-m | +a)<br>$$</p>
<h3 id="贝叶斯网络结构-Structure-of-Bayes-Nets"><a href="#贝叶斯网络结构-Structure-of-Bayes-Nets" class="headerlink" title="贝叶斯网络结构(Structure of Bayes Nets)"></a>贝叶斯网络结构(Structure of Bayes Nets)</h3><p>$$<br>P(x_i | x_1 x_2 \dots x_{i - 1}) &#x3D; P(x_i | parents(x_i))\<br>\Rightarrow P(x_1 x_2 \dots x_{i - 1}) &#x3D; \prod_{i &#x3D; 1}^{n} P(x_i | parents(x_i))<br>$$</p>
<p>即 $ x_i $ 与 $ x_1, x_2, \dots x_{i - 1} &#x2F; parents(x_i) $ 在 $ parents(x_i) $ 下条件独立。</p>
<p>例如：</p>
<p><img src="/2025/07/27/CS188/fig2.png" alt="fig2.png"></p>
<p>$$<br>\begin{aligned}<br>    P(BEAJM) &amp;&#x3D; P(B) P(B | E)P(A | BE) P(J | BEA) P(M | BEAJ) \<br>    &amp;&#x3D; P(B) P(E) P(A | BE) P(J | A) P(M | A)<br>\end{aligned}<br>$$</p>
<p>一一对应可得条件独立关系。</p>
<p>每个节点与其马尔可夫覆盖(Markov blanket)之外的点条件独立。</p>
<p>一个变量的马尔可夫覆盖包含它的父亲、儿子和儿子的其他父亲（因为是DAG）。</p>
<h3 id="D分离-D-Seperation"><a href="#D分离-D-Seperation" class="headerlink" title="D分离(D-Seperation)"></a>D分离(D-Seperation)</h3><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note13.pdf">Slides</a></p>
<p>D分离（D-Separation）又被称作有向分离，是一种用来判断变量是否条件独立的图形化方法。相比于非图形化方法，D-Separation更加直观且计算简单。对于一个DAG（有向无环图），D-Separation方法可以快速的判断出两个节点之间是否是条件独立的。</p>
<p>查询：$ x_i \perp x_j \vert {x_{k_1}, x_{k_2}, \dots x_{k_n}} $</p>
<p>检查所有连接 $ x_i $ 和 $ x_j $ 的路径。如果一条或者多条路径是 <strong>激活</strong> 的，那么，条件独立性不成立。</p>
<p>否则，条件独立性成立： $ x_i \perp x_j \vert {x_{k_1}, x_{k_2}, \dots x_{k_n}} $ 。</p>
<p>如果路径中所有的三元组都是 <strong>激活</strong> 的，则该路径是 <strong>激活</strong> 的。</p>
<p>三元组的三种形式（又或者没有证据变量）：</p>
<ul>
<li>因果链条</li>
</ul>
<blockquote>
<p>A(0) -&gt; B(1) -&gt; C(0)</p>
</blockquote>
<p>$$<br>P(ABC) &#x3D; P(A)P(B | A)P(C | B) \<br>A \perp C ? \space (P(AC) &#x3D; P(A)P(C) ?) \<br>No. \<br>A \perp C | B ? \space (P(AC | B) &#x3D; P(A | B)P(C | B) ? )\<br>Yes. \<br>P(AC | B) &#x3D; \frac{P(ABC)}{P(B)}\<br>&#x3D; \frac{P(A)P(B|A)P(C|B)}{P(B)}<br>\&#x3D; \frac{P(AB)}{P(A)} \times P(C|B)\<br>&#x3D; P(A|B)P(C|B)<br>$$</p>
<p>链上的中间变量可以阻隔影响传播。</p>
<ul>
<li>共同原因<blockquote>
<p>A(0) &lt;- B(1) -&gt; C(0)</p>
</blockquote>
</li>
</ul>
<p>$$<br>P(ABC) &#x3D; P(B)P(A|B)P(C|B) \<br>A \perp C ? \space (P(AC) &#x3D; P(A)P(C) ?) \<br>No. \<br>A \perp C | B ? \space (P(AC | B) &#x3D; P(A | B)P(C | B) ? )\<br>Yes. \<br>P(AC|B) &#x3D; \frac{P(ABC)}{P(B)}\<br>&#x3D; \frac{P(B)P(A|B)P(C|B)}{P(B)}\<br>&#x3D; P(A|B)P(C|B)<br>$$</p>
<ul>
<li>共同结果<blockquote>
<p>A(0) -&gt; B(1) &lt;- C(0)</p>
</blockquote>
</li>
</ul>
<p>$$<br>P(ABC) &#x3D; P(A)P(C)P(B|AC)\<br>P(A)P(C) &#x3D; P(AC)\<br>A \perp C | B ? \space (P(AC | B) &#x3D; P(A | B)P(C | B) ? )\<br>No. \<br>P(A) &#x3D; P(C) &#x3D; \frac{1}{2}\<br>P(B) &#x3D; A \space or \space C\<br>P(AC|B) &#x3D; \frac{1}{3}\<br>P(A|B) &#x3D; P(C|B) &#x3D; \frac{2}{3}<br>$$</p>
<p>如果路径中某三元组是非激活的，那么这条路径就是非激活的。</p>
<h4 id="贝叶斯网络独立性问题的形式化定义"><a href="#贝叶斯网络独立性问题的形式化定义" class="headerlink" title="贝叶斯网络独立性问题的形式化定义"></a>贝叶斯网络独立性问题的形式化定义</h4><ul>
<li><p>问题：给定证据变量(evidence variables) $ {Z} $ ， $ X $ 是否条件独立于 $ Y $ ?</p>
</li>
<li><p>D-分离：在贝叶斯网络中寻找关联路径，并基于路径作独立性判断。</p>
</li>
</ul>
<ol>
<li>列出所有连接 $ X $ 和 $ Y $ 的路径。</li>
<li>没有激活路径 &#x3D; 独立性，有激活路径 &#x3D; 独立性不成立。</li>
</ol>
<ul>
<li>路径的独立性判断：将路径拆解为多个三元组，检查三元组的独立性。</li>
</ul>
<h4 id="激活-非激活路径"><a href="#激活-非激活路径" class="headerlink" title="激活 &#x2F; 非激活路径"></a>激活 &#x2F; 非激活路径</h4><p>如果每个三元组都是激活的，那这条路径就是激活的。</p>
<ul>
<li>因果链条：若 $ B $ 未被观察， $ A $ 和 $ C $ 不相互独立；否则相互独立。</li>
<li>共同原因：若 $ B $ 未被观察， $ A $ 和 $ C $ 不相互独立；否则相互独立。</li>
<li>共同结果：若 $ B $ 或者其子孙节点未被观察， $ A $ 和 $ C $ 相互独立；否则不相互独立。</li>
</ul>
<p>出现不独立的情况，这个三元组就被激活。</p>
<p>如果任一三元组不激活，这条路径就不激活。</p>
<h4 id="贝叶斯网络中的条件独立性"><a href="#贝叶斯网络中的条件独立性" class="headerlink" title="贝叶斯网络中的条件独立性"></a>贝叶斯网络中的条件独立性</h4><p>给定贝叶斯网络，运用 D-分离 方法，可以得到所有形式的条件独立性。</p>
<p>$$<br>x_i \perp x_j | {x_{k_1}, \dots, x_{k_n}}<br>$$</p>
<p>基于得到的条件独立列表，可以确定贝叶斯网络能够表达的所有概率分布。</p>
<h3 id="贝叶斯网络的独立性隐含关系"><a href="#贝叶斯网络的独立性隐含关系" class="headerlink" title="贝叶斯网络的独立性隐含关系"></a>贝叶斯网络的独立性隐含关系</h3><p>给定贝叶斯网络，只有特定的联合分布能够被表达。</p>
<p>贝叶斯网络中的某些（条件）独立性，确立了能被表达的联合分布。</p>
<p>表达扩充：在贝叶斯网络中增加边，可以扩充能表达的分布范围。</p>
<p>极端情况：节点不存在独立性，能表达任意分布。</p>
<h3 id="概率推断"><a href="#概率推断" class="headerlink" title="概率推断"></a>概率推断</h3><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/lectures/cs188-fa22-lec14.pdf">Slides</a></p>
<p>询问</p>
<p>$$<br>P(Q | e_1 e_2 \dots e_k)<br>$$</p>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>通常情况：</p>
<ul>
<li>证据变量： $ e_1, e_2, \dots , e_k $</li>
<li>询问变量： $ Q $</li>
<li>隐藏变量： $ H_1, \dots , H_r $</li>
</ul>
<p>步骤：</p>
<ol>
<li>选出包含证据变量的条件概率表的条目。</li>
<li>将 $ H $ 相加：</li>
</ol>
<p>$$<br>P(Q \space e_1 \dots e_k) &#x3D; \sum_{h_1, h_2, \dots , h_r} P(Q \space h_1 \dots h_r \space e_1 \dots e_k)<br>$$</p>
<ol start="3">
<li>规范化</li>
</ol>
<p>$$<br>Z &#x3D; \sum_{q} P(Q \space e_1 \dots e_k) \<br>P(Q | e_1 \dots e_k) &#x3D; \frac{P(Q \space e_1 \dots e_k)}{Z}<br>$$</p>
<p>时间复杂度是指数级的，能够得到准确的答案。</p>
<h4 id="消元法"><a href="#消元法" class="headerlink" title="消元法"></a>消元法</h4><p>联合分布 $ P(x y) $ 的和为 $ 1 $ 。</p>
<p>选定几个节点固定： $ P(x Y) $ 。这是联合分布的一部分，其和为 $ P(x) $ 。</p>
<p>大写字母（未确定变量）的个数即概率表的维数。</p>
<p>单个条件概率： $ P(Y | x) $ 。</p>
<ul>
<li>包含所有 $ P(y | x) $ 的固定 $ x $ 的条目。</li>
<li>和为 $ 1 $ 。</li>
</ul>
<p>条件概率组： $ P(Y | X) $ ：</p>
<ul>
<li>包含所有 $ P(y | x) $ 的所有条目。</li>
<li>和为 $ X $ 的集合大小 $ |X| $ 。</li>
</ul>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>一个一个消除隐藏变量。要消除隐藏变量 $ X $ ，我们要：</p>
<ol>
<li>将包含 $ X $ 的因子(factor)乘起来。</li>
<li>加起来消除 $ X $ 。</li>
</ol>
<p>一个因子定义为未被规范化的概率。在变量消除期间的所有时候，每个因子都将与其对应的概率成正比，但每个因子的基础分布不一定像概率分布那样总和 $ 1 $ 。伪代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">elimination</span>(<span class="params">X, e, bn</span>): <span class="comment"># returns a distribution of X</span></span><br><span class="line">    <span class="comment"># X : query variable.</span></span><br><span class="line">    <span class="comment"># e : observed values for variables E(evidence variables).</span></span><br><span class="line">    <span class="comment"># bn : a Bayesian network specifying joint distribution</span></span><br><span class="line">    <span class="comment"># P(x1, ..., xn).</span></span><br><span class="line">    factors = []</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> ORDER(var, e):</span><br><span class="line">        factors = [MAKE_FACTOR(var, e) | factors]</span><br><span class="line">        <span class="keyword">if</span> var <span class="keyword">is</span> hidden variable:</span><br><span class="line">            factors = SUM_OUT(var, factors)</span><br><span class="line">    <span class="keyword">return</span> NORMALIZE(POINTWISE_PRODUCT(factors))</span><br></pre></td></tr></table></figure>

<p>（CS188 Notes 里写得和天书一样）</p>
<p>举个例子：</p>
<p><img src="/2025/07/27/CS188/fig3.png" alt="fig3.png"></p>
<p>这个贝叶斯网络给定了 $ P(C), P(C | T), P(S | T), P(E | CS) $ 的联合分布。</p>
<p>假设我们要求 $ P(T | +e) $ 。假如用枚举的方法我们需要 16 行的概率分布函数 $ P(T, C, S, E) $ ，选择包含 $ +e $ 的行，对 $ C, S $ 求和最后规范化。</p>
<p>用消元法就先将 $ C $ 消掉，再把 $ S $ 消掉。</p>
<ol>
<li>将包含 $ C $ 的因子乘起来， $  f_1(C, +e, T, S) &#x3D; P(C | T) \cdot P(+e | C, S)  $ ，也写作 $ P(C, +e | T, S) $ 。</li>
<li>在这个新的因子里将 $ C $ 求和，得到新的因子 $ f_2(+e, T, S) $ ，也写作 $ P(+e | T, S) $ 。</li>
<li>将包含 $ S $ 的因子乘起来， $  f_3(+e, T, S) &#x3D; P(S | T) \cdot f_2(+e, T, S) $ ，也写作 $ P(+e, S | T) $ 。</li>
<li>将 $ S $ 求和，得到新的因子 $ f_4(+e, T) $ ，也写作 $ P(+e | T) $ 。</li>
<li>将剩下的因子乘起来，$ f_5(+e, T) &#x3D; f_4(+e, T) \cdot P(T) $ 。</li>
</ol>
<p>消元的顺序也会影响复杂度。如图：</p>
<p><img src="/2025/07/27/CS188/fig4.png" alt="fig4.png"></p>
<p>我们在进行变量消除的过程中，会进行多次乘法，这就可能会产生各种尺寸的因子，如果最大的因子中有 $ w $ 个变量，那么，单次消元的代码复杂度为 $ O(2^w) $ 。我们把 $ w $ 这个数字称为消除顺序 (Elimination Order) 的宽度 (Width)，这是衡量一个消除顺序的重要指标，我们希望能找到一个具备最小宽度的消除顺序，也就是希望最大因子的尺寸尽可能小。</p>
<h3 id="概率推断是-NPC-问题"><a href="#概率推断是-NPC-问题" class="headerlink" title="概率推断是 NPC 问题"></a>概率推断是 NPC 问题</h3><p>Slides 提到了一种用贝爷斯网络构造 3-sat 问题的方法。众所周知 3-sat 是无法在多项式时间复杂度内解决的问题，所以概率推断是 np-hard 的。</p>
<h3 id="取样-sampling"><a href="#取样-sampling" class="headerlink" title="取样(sampling)"></a>取样(sampling)</h3><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><ul>
<li>从分布 S 中取 N 个样本。</li>
<li>计算后验概率。</li>
<li>体现这个概率收敛于真实概率 P 。</li>
</ul>
<h4 id="先验采样-Prior-Sampling"><a href="#先验采样-Prior-Sampling" class="headerlink" title="先验采样(Prior Sampling)"></a>先验采样(Prior Sampling)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">For i = 1, 2, ..., n</span><br><span class="line">    Sample x_i from P(X_i | Parents(X_i))</span><br><span class="line">return (x_1, x_2, ..., x_n)</span><br></pre></td></tr></table></figure>

<ul>
<li>这个过程生成样本，其中有 $ P(x_1, \dots, x_n) $ 的概率生成样本 $ (x_1, \dots, x_n) $ 。</li>
<li>令一个事件的样本数量为 $ N_{PS}(x_1, \dots, x_n) $ 。</li>
<li></li>
</ul>
<p>$$<br>\begin{aligned}<br>    \lim_{N \rightarrow \infin} \hat{P}(x_1, \dots, x_n) &amp;&#x3D; \lim_{N \rightarrow \infin} N_{PS}(x_1, \dots, x_n) &#x2F; N \<br>    &amp;&#x3D; P(x_1, \dots, x_n)<br>\end{aligned}<br>$$</p>
<h4 id="拒绝采样-Rejection-Sampling"><a href="#拒绝采样-Rejection-Sampling" class="headerlink" title="拒绝采样(Rejection Sampling)"></a>拒绝采样(Rejection Sampling)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: evidence instantiation</span><br><span class="line">For i = 1, 2, ..., n</span><br><span class="line">    Sample x_i from P(X_i | Parents(X_i))</span><br><span class="line">    if x_i not consistent with evidence</span><br><span class="line">        return: reject this sample</span><br><span class="line">return (x_1, x_2, ..., x_n)</span><br></pre></td></tr></table></figure>

<p>在 Prior Sampling 的基础上把不符合条件（不满足证据变量条件）的样本直接在采样的时候删去。</p>
<h4 id="Likelihood-Weighting"><a href="#Likelihood-Weighting" class="headerlink" title="Likelihood Weighting"></a>Likelihood Weighting</h4><ul>
<li>rejection sampling 的问题：当证据变量的概率很小时，会拒绝很多样本。</li>
<li>Idea：直接固定证据变量(要赋予一定的权重，大小为得到证据变量的条件概率)。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: evidence instantiation</span><br><span class="line">w = 1.0</span><br><span class="line">For i = 1, 2, ..., n</span><br><span class="line">    if x_i is an evidence variable</span><br><span class="line">        X_i = observation x_i for X_i</span><br><span class="line">        set w = w * P(x_i | Parents(X_i))</span><br><span class="line">    else</span><br><span class="line">        sample x_i from P(x_i | Parents(X_i))</span><br><span class="line">return (x_1, x_2, ..., x_n), w</span><br></pre></td></tr></table></figure>

<ul>
<li>Likelihood Weighting 的问题：Evidence influences the choice of downstream variables, but not upstream ones (C isn’t more<br>likely to get a value matching the evidence) （没看懂，大概是拓扑序前面的节点会影响后面的节点，但是后面的节点不会对前面的节点有影响，但这怎么成了问题）（哦，大概是条件概率表不构成拓扑关系，这时候就不能用之前的方式）</li>
</ul>
<h4 id="吉布斯采样-Gibbs-Sampling"><a href="#吉布斯采样-Gibbs-Sampling" class="headerlink" title="吉布斯采样(Gibbs Sampling)"></a>吉布斯采样(Gibbs Sampling)</h4><p>假设有一随机向量 $ (x_1,x_2,\dots,x_n) $ ，每一维是一随机变量。</p>
<p>显然想要从多元分布的联合概率分布中直接抽样是相当困难的。</p>
<p>先从任意一个初始状态 $ (x_1^{(0)}, \dots, x_n^{(0)}) $ 开始，每一维度单独采样，迭代多次。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for t = 1, 2, ..., T</span><br><span class="line">    for i = 1, 2, ..., n</span><br><span class="line">        if x_i is not an evident variable</span><br><span class="line">            sample x_i^&#123;(t)&#125; from P(x_i | (x_1^&#123;(t - 1)&#125;, ..., x_n^&#123;(t - 1)&#125;) \ x_i^&#123;(t - 1)&#125;)</span><br><span class="line">        else</span><br><span class="line">            x_i^&#123;(t)&#125; = x_i^&#123;(t - 1)&#125; (remain the evident value)</span><br><span class="line">    cnt[(x_1^&#123;(T)&#125;, ..., x_n^&#123;(T)&#125;)] += 1</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces809E】Surprise me</title>
    <url>/2025/07/27/Codeforces-809E-Surprise-me/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://codeforces.com/problemset/problem/809/E">【Codeforces809E】Surprise me</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>已知 $ \phi(xy) &#x3D; \frac{ \phi(x) \phi(y) \gcd(x, y) }{ \phi(gcd(x, y)) } $<br>代入并莫比乌斯反演得：<br>$$ n(n - 1) Ans &#x3D; \sum_{ T &#x3D; 1 }^{ n } \sum_{ d | T } \frac{ d \mu(\frac{ T }{ d }) }{ \phi(d) } \sum_{ d | a_i } \sum_{ d | a_j } \phi(a_i) \phi(a_j) dist(i, j) $$<br>发现 $ \sum_{ T &#x3D; 1 }^{ n } \sum_{ d | T } \frac{ d \mu(\frac{ T }{ d }) }{ \phi(d) } $ 可以调和级数， $ \sum_{ d | a_i } \sum_{ d | a_j } \phi(a_i) \phi(a_j) dist(i, j) $ 建的虚树点数总数也是调和级数。<br>可以用 RMQ_LCA 实现复杂度 $ O(n \log n) $ 。<br><del>作为一个懒汉我写树剖LCA。</del>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], id[N], inv[N], ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> p[N], mu[N], phi[N], lp; <span class="type">bool</span> pri[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], E[N];</span><br><span class="line"><span class="type">int</span> fa[N], sz[N], son[N], dep[N], top[N], dfn[N], idx = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> s[N], f[N], g[N], ss[N];</span><br><span class="line"><span class="type">int</span> pp[N], len, sta[N], Top = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> flag[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> dfn[x] &lt; dfn[y]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>, phi[<span class="number">1</span>] = mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) inv[i] = <span class="built_in">mul</span>(mod - mod / i, inv[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!pri[i]) p[++lp] = i, mu[i] = mod - <span class="number">1</span>, phi[i] = i - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; p[j] * i &lt;= n; j++) &#123;</span><br><span class="line">			pri[p[j] * i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i % p[j] == <span class="number">0</span>) &#123; phi[p[j] * i] = phi[i] * p[j]; <span class="keyword">break</span>; &#125;</span><br><span class="line">			mu[p[j] * i] = <span class="built_in">sub</span>(<span class="number">0</span>, mu[i]);</span><br><span class="line">			phi[p[j] * i] = phi[i] * (p[j] - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt;= n; j += i)</span><br><span class="line">		s[j] = <span class="built_in">add</span>(s[j], <span class="built_in">mul</span>(<span class="built_in">mul</span>(i, mu[j / i]), inv[phi[i]]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	fa[u] = ff, dep[u] = dep[ff] + <span class="number">1</span>, sz[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v ^ ff) &#123;</span><br><span class="line">		<span class="built_in">dfs1</span>(v, u), sz[u] += sz[v]; <span class="keyword">if</span>(sz[son[u]] &lt; sz[v]) son[u] = v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> tp)</span> </span>&#123;</span><br><span class="line">	top[u] = tp, dfn[u] = ++idx; <span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u], tp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(!top[v]) <span class="built_in">dfs2</span>(v, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(; top[x] != top[y]; x = fa[top[x]])</span><br><span class="line">		<span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">	<span class="keyword">return</span> dep[x] &lt; dep[y] ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> lca = <span class="built_in">LCA</span>(x, sta[Top]);</span><br><span class="line">	<span class="keyword">if</span>(Top == <span class="number">1</span> || lca == sta[Top]) &#123; sta[++Top] = x; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="keyword">for</span>(; Top &gt; <span class="number">1</span> &amp;&amp; dfn[sta[Top - <span class="number">1</span>]] &gt;= dfn[lca]; --Top)</span><br><span class="line">		E[sta[Top - <span class="number">1</span>]].<span class="built_in">pb</span>(sta[Top]);</span><br><span class="line">	<span class="keyword">if</span>(lca != sta[Top]) E[lca].<span class="built_in">pb</span>(sta[Top]), sta[Top] = lca;</span><br><span class="line">	sta[++Top] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	ss[u] = flag[u] * phi[a[u]], f[u] = g[u] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : E[u]) &#123;</span><br><span class="line">		<span class="built_in">dp</span>(v); <span class="type">int</span> w = dep[v] - dep[u];</span><br><span class="line">		g[u] = <span class="built_in">add</span>(g[v], <span class="built_in">add</span>(<span class="built_in">add</span>(g[u], <span class="built_in">mul</span>(ss[v], <span class="built_in">add</span>(<span class="built_in">mul</span>(w, ss[u]), f[u]))), <span class="built_in">mul</span>(ss[u], f[v])));</span><br><span class="line">		ss[u] = <span class="built_in">add</span>(ss[u], ss[v]), f[u] = <span class="built_in">add</span>(f[u], <span class="built_in">add</span>(f[v], <span class="built_in">mul</span>(ss[v], w)));</span><br><span class="line">	&#125;</span><br><span class="line">	E[u].<span class="built_in">clear</span>(), flag[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	len = <span class="number">0</span>; <span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= n; i += x) pp[++len] = id[i];</span><br><span class="line">	<span class="built_in">sort</span>(pp + <span class="number">1</span>, pp + len + <span class="number">1</span>, cmp), sta[Top = <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">		flag[pp[i]] = <span class="number">1</span>; <span class="keyword">if</span>(pp[i] != <span class="number">1</span>) <span class="built_in">insert</span>(pp[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(; Top &gt; <span class="number">1</span>; --Top) E[sta[Top - <span class="number">1</span>]].<span class="built_in">pb</span>(sta[Top]);</span><br><span class="line">	<span class="built_in">dp</span>(<span class="number">1</span>); <span class="keyword">return</span> g[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), <span class="built_in">Sieve</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), id[a[i]] = i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(<span class="built_in">calc</span>(i), s[i]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">mul</span>(<span class="built_in">add</span>(ans, ans), <span class="built_in">mul</span>(inv[n], inv[n - <span class="number">1</span>])));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>虚树</tag>
        <tag>DP</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 923E】Perpetual Subtraction</title>
    <url>/2025/07/27/Codeforces-923E-Perpetual-Subtraction/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://codeforces.com/problemset/problem/923/E">【Codeforces 923E】Perpetual Subtraction</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>设当前取到 $ i \in [0, n] $ 的概率生成函数为 $ f(x) $ ， 下一步后为 $ F(x) $ ，则：<br>$$ F(x) &#x3D; \sum_{ i &#x3D; 0 }^{ n }{ x^i \sum_{ j &#x3D; 0 }^{ n }{ \frac{ [x^j] f(x) }{ j + 1 } } } $$<br>$$ &#x3D; \sum_{ j &#x3D; 0 }^{ n }{ \frac{ [x^j] f(x) }{ j + 1 } \frac{ x^{ j + 1 } - 1 }{ x - 1 } } $$<br>$$ &#x3D; \frac{ 1 }{ x-1 } { \sum_{ j &#x3D; 0 }^{ n } [x^j] f(x) \int_{ 1 }^{ x } t^j { \rm d } t } $$<br>$$ &#x3D; \frac{ \int_{ 1 }^{ x } f(t) { \rm d } t }{ x - 1 } $$<br>令 $ g(x) &#x3D; f(x + 1) $ ，则：<br>$$ G(x) &#x3D; F(x + 1) &#x3D; \frac{ \int_{ 0 }^{ x } g(t) { \rm d } t }{ x } $$<br>$$ [x^i] G(x) &#x3D; \frac{ [x^i] g(x) }{ i + 1 } $$<br>$ m $ 次操作后 $ [x^i] G(x) &#x3D; \frac{ [x^i] g(x) }{ (i + 1)^m } $<br>已知 $ [x^i] f(x) $ 求 $ [x^i] g(x) $ ：<br>$$ \sum_{ i &#x3D; 0 }^{ n }{ g_i x^i } &#x3D; \sum_{ i &#x3D; 0 }^{ n }{ f_j (x + 1)^j } &#x3D; \sum_{ j &#x3D; 0 }^{ n }{ f_j \sum_{ i &#x3D; 0 }{ j }{ C(j, i) x^i } } $$<br>$$ g_i &#x3D; \sum_{ j &#x3D; i }^{ n }{ C(j, i)f_j } $$<br>$$ i! g_i &#x3D; \sum_{ j &#x3D; i }^{ n }{ \frac{ j! f_j }{ (j - i)! } } $$<br>已知 $ [x^i] g(x) $ 求 $ [x^i] f(x) $ ：<br>$$ i! f_i &#x3D; \sum_{ j&#x3D;1 }^{ n }{ \frac{ j! f_j }{ (-1)^{ j - i }( j - i )! } } $$<br>$ NTT $ 卷积即可。时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>, N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span>(<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, ll y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y /= <span class="number">2</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y % <span class="number">2</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; lmt; j += mid &lt;&lt; <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> inv = <span class="built_in">ksm</span>(lmt), i = <span class="number">0</span>; i &lt; lmt; i++)</span><br><span class="line">				A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n; ll m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f, g;</span><br><span class="line"><span class="type">int</span> fa[N], fb[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%I64d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	fa[<span class="number">0</span>] = fa[<span class="number">1</span>] = fb[<span class="number">0</span>] = fb[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fa[i] = <span class="built_in">mul</span>(fa[i - <span class="number">1</span>], i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fb[i] = <span class="built_in">mul</span>(mod - mod / i, fb[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fb[i] = <span class="built_in">mul</span>(fb[i - <span class="number">1</span>], fb[i]);</span><br><span class="line">	f.<span class="built_in">resize</span>(n + <span class="number">1</span>), g.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;f[n - i]), f[n - i] = <span class="built_in">mul</span>(f[n - i], fa[i]), g[i] = fb[i];</span><br><span class="line">	g = Poly::<span class="built_in">Mul</span>(f, g), g.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) g[n - i] = <span class="built_in">mul</span>(g[n - i], <span class="built_in">ksm</span>(<span class="built_in">ksm</span>(i + <span class="number">1</span>, m)));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) f[i] = (i &amp; <span class="number">1</span>) ? (mod - fb[i]) : fb[i];</span><br><span class="line">	f = Poly::<span class="built_in">Mul</span>(f, g);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">mul</span>(f[n - i], fb[i]));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
        <tag>积分</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOISC 2016 Day 3」电报</title>
    <url>/2025/07/27/JOISC-2016-Day-3-dian-bao/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2737">「JOISC 2016 Day 3」电报</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑形成环的条件是将若干环和基环內向树拆成若干条链，然后依次拼接成环（特判给出的图已经是完整一个环的情况）。<br>枚举每一个连通块。若该联通块是一个环，则断开代价最小的边；否则进行拓扑排序。<br>先考虑不在环上的部分。假如一个点他有若干入度，显然只有其中一个入度能够保留，贪心地保留代价最大的入度。如此化简后得到一个环（环上每个点可能有一条不在环上的链）。<br>然后在环上DP。由于环一定要断开，令 $ f[i][0&#x2F;1][0&#x2F;1] $ 表示环上第 $ i $ 个点，环有&#x2F;没有被断开过，这个点选择的是断开环上的边还是链上的边。<br>时间复杂度 $ O(n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, to[N], c[N], In[N], tmp[N], val[N]; ll ans, f[<span class="number">2</span>][<span class="number">2</span>][N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], a, cir, hv[N];</span><br><span class="line"><span class="type">bool</span> vis[N], used[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> u = <span class="number">1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123; <span class="keyword">if</span>(vis[u]) <span class="keyword">return</span> <span class="number">0</span>; vis[u] = <span class="number">1</span>, u = to[u]; &#125;</span><br><span class="line">	<span class="keyword">if</span>(u == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	vis[x] = <span class="number">1</span>, a.<span class="built_in">pb</span>(x); <span class="keyword">if</span>(!vis[to[x]]) <span class="built_in">Find</span>(to[x]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[x]) <span class="keyword">if</span>(!vis[v]) <span class="built_in">Find</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	a.<span class="built_in">clear</span>(), cir.<span class="built_in">clear</span>(), <span class="built_in">Find</span>(x); <span class="type">int</span> lst = a[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : a) tmp[v] = In[v];</span><br><span class="line">	<span class="keyword">for</span>(; !q.<span class="built_in">empty</span>(); q.<span class="built_in">pop</span>()); <span class="keyword">for</span>(<span class="keyword">auto</span> v : a) <span class="keyword">if</span>(!In[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">	<span class="keyword">if</span>(q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> mn = <span class="number">2e9</span>; <span class="keyword">for</span>(<span class="keyword">auto</span> v : a) mn = <span class="built_in">min</span>(mn, c[v]); ans += mn; <span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> u; !q.<span class="built_in">empty</span>();) &#123;</span><br><span class="line">		u = q.<span class="built_in">front</span>(), q.<span class="built_in">pop</span>(), used[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(hv[u].<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">sort</span>(hv[u].<span class="built_in">begin</span>(), hv[u].<span class="built_in">end</span>());</span><br><span class="line">			<span class="built_in">rep</span>(i, <span class="number">0</span>, (<span class="type">int</span>)hv[u].<span class="built_in">size</span>() - <span class="number">2</span>) ans += hv[u][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(In[to[u]] &gt; <span class="number">1</span>) hv[to[u]].<span class="built_in">pb</span>(c[u]);</span><br><span class="line">		lst = to[u], --tmp[to[u]]; <span class="keyword">if</span>(!tmp[to[u]]) q.<span class="built_in">push</span>(to[u]);</span><br><span class="line">	&#125;</span><br><span class="line">	cir.<span class="built_in">pb</span>(lst); <span class="keyword">for</span>(<span class="type">int</span> u = to[lst]; u != lst; u = to[u]) cir.<span class="built_in">pb</span>(u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : cir) &#123;</span><br><span class="line">		<span class="built_in">sort</span>(hv[v].<span class="built_in">begin</span>(), hv[v].<span class="built_in">end</span>());</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">0</span>, (<span class="type">int</span>)(hv[v].<span class="built_in">size</span>() - <span class="number">2</span>)) ans += hv[v][i];</span><br><span class="line">		<span class="keyword">if</span>(hv[v].<span class="built_in">size</span>()) val[v] = hv[v].<span class="built_in">back</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = c[cir.<span class="built_in">back</span>()], f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = val[cir[<span class="number">0</span>]];</span><br><span class="line">	f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>] = (ll)<span class="number">1e14</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, (<span class="type">int</span>)(cir.<span class="built_in">size</span>() - <span class="number">1</span>)) &#123;</span><br><span class="line">		f[<span class="number">0</span>][<span class="number">0</span>][i] = <span class="built_in">min</span>(f[<span class="number">1</span>][<span class="number">1</span>][i - <span class="number">1</span>], <span class="built_in">min</span>(f[<span class="number">0</span>][<span class="number">1</span>][i - <span class="number">1</span>], f[<span class="number">0</span>][<span class="number">0</span>][i - <span class="number">1</span>])) + c[cir[i - <span class="number">1</span>]];</span><br><span class="line">		f[<span class="number">0</span>][<span class="number">1</span>][i] = <span class="built_in">min</span>(f[<span class="number">0</span>][<span class="number">1</span>][i - <span class="number">1</span>], f[<span class="number">0</span>][<span class="number">0</span>][i - <span class="number">1</span>]) + val[cir[i]];</span><br><span class="line">		f[<span class="number">1</span>][<span class="number">0</span>][i] = (ll)<span class="number">1e14</span>;</span><br><span class="line">		f[<span class="number">1</span>][<span class="number">1</span>][i] = f[<span class="number">1</span>][<span class="number">1</span>][i - <span class="number">1</span>] + val[cir[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	ans += <span class="built_in">min</span>(f[<span class="number">0</span>][<span class="number">0</span>][(<span class="type">int</span>)(cir.<span class="built_in">size</span>() - <span class="number">1</span>)], f[<span class="number">0</span>][<span class="number">1</span>][(<span class="type">int</span>)(cir.<span class="built_in">size</span>() - <span class="number">1</span>)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;to[i], &amp;c[i]), e[to[i]].<span class="built_in">pb</span>(i), ++In[to[i]];</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">check</span>()) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(!vis[i]) <span class="built_in">solve</span>(i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>「JLOI2015」有意义的字符串</title>
    <url>/2025/07/27/JLOI2015-you-yi-yi-de-zi-fu-chuan/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2106">「JLOI2015」有意义的字符串</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$ \frac{b + \sqrt{d}}{2} $ 和 $ \frac{b - \sqrt{d}}{2} $ 是二元一次方程 $ x^2 - bx + \frac{b^2 - d}{4} &#x3D; 0 $ 的解。<br>则 $ x^2 &#x3D; bx + \frac{d - b^2}{4} $ 。<br>两边同时乘 $ x^{n - 2} $ 得： $ x^n &#x3D; bx^{n - 1} + \frac{d - b^2}{4}x^{n - 2} $ 。<br>设 $ f[i] &#x3D; (\frac{b + \sqrt{d}}{2})^{i} + (\frac{b - \sqrt{d}}{2})^{i} $ ，则存在递推式 $ f[i] &#x3D; bf[i - 1] + \frac{d - b^2}{4}f[i - 2] $ 。其中 $ f[0] &#x3D; 2, f[1] &#x3D; b $ 。<br>这样就矩阵乘法得到 $ f[n] $ 。题目中有 $ b^2 \leq d &lt; (b + 1)^2 $ ，所以 $ \frac{b - \sqrt{d}}{2} \leq 0 $ 。特判 $ b^2 \neq d $ 且 $ n \mod 2 &#x3D; 0 $ 来判断是否减一。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">7528443412579576937ll</span>;</span><br><span class="line">ll b, d, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">add</span><span class="params">(<span class="type">const</span> ll &amp;x, <span class="type">const</span> ll &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (ull)x + (ull)y &lt; (ull)mod ? (ull)x + (ull)y : (ull)x + (ull)y - (ull)mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sub</span><span class="params">(<span class="type">const</span> ll &amp;x, <span class="type">const</span> ll &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (ull)x - (ull)y &lt; (ull)<span class="number">0</span> ? (ull)x - (ull)y + (ull)mod : (ull)x - (ull)y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">	ll ss = <span class="number">0</span>; <span class="keyword">for</span>(; y; y /= <span class="number">2</span>, x = <span class="built_in">add</span>(x, x)) <span class="keyword">if</span>(y % <span class="number">2</span>) ss = <span class="built_in">add</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mtrx</span> &#123;</span><br><span class="line">	ll a[<span class="number">2</span>][<span class="number">2</span>]; <span class="built_in">mtrx</span>() &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)); &#125;</span><br><span class="line">	<span class="keyword">inline</span> mtrx <span class="keyword">operator</span>*(<span class="type">const</span> mtrx &amp;yy)<span class="type">const</span> &#123;</span><br><span class="line">		mtrx res;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">					res.a[i][j] = <span class="built_in">add</span>(res.a[i][j], <span class="built_in">mul</span>(a[i][k], yy.a[k][j]));</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; mtrx sum, ba;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	ll ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y /= <span class="number">2</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y % <span class="number">2</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;b, &amp;d, &amp;n); ll flag = (n % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; b * b != d);</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">0</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, b + (ll)<span class="built_in">sqrt</span>(d)); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	sum.a[<span class="number">0</span>][<span class="number">0</span>] = b, sum.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">	ba.a[<span class="number">0</span>][<span class="number">0</span>] = b, ba.a[<span class="number">0</span>][<span class="number">1</span>] = (d - b * b) / <span class="number">4</span>, ba.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	n -= <span class="number">1</span>; <span class="keyword">if</span>(n &lt; <span class="number">0</span>) n = <span class="number">0</span>; mtrx tmp; tmp.a[<span class="number">0</span>][<span class="number">0</span>] = tmp.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(; n; n /= <span class="number">2</span>, ba = ba * ba) <span class="keyword">if</span>(n % <span class="number">2</span>) tmp = tmp * ba;</span><br><span class="line">	sum = tmp * sum;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">sub</span>(sum.a[<span class="number">0</span>][<span class="number">0</span>], flag));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>「HNOI2017」单旋</title>
    <url>/2025/07/27/HNOI2017-dan-xuan/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2018">「HNOI2017」单旋</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>对于 $ splay $ 操作，模拟发现整棵树的形态不变且深度加一（除了 $ splay $ 的节点的子树深度不变）， $ splay $ 的点深度变为 $ 1 $ 。<br>用线段树维护每个权值深度。<br>对于操作 $ 1 $ ，用 $ set $ 维护已经存在的节点，新插入的节点父亲一定为它前驱、后继中的一个。<br>对于操作 $ 2, 3, 4, 5 $ ，模拟 $ splay $ 第一次和最后一次旋转子树操作，用线段树维护深度即可。<br>时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> m, p[N], lp;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Q</span> &#123; <span class="type">int</span> opt, x; &#125;; Q q[N];</span><br><span class="line"><span class="type">int</span> tr[N * <span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> rt, fa[N], ch[<span class="number">2</span>][N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(), pre = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; pre = c, c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = x * <span class="number">10ll</span> + (c ^ <span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(pre == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u]) tr[u * <span class="number">2</span>] += tr[u], tr[u * <span class="number">2</span> + <span class="number">1</span>] += tr[u], tr[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123; tr[u] = w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	x &lt;= mid ? <span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, x, w) : <span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, x, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123; tr[u] += w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= mid) <span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, L, R, w);</span><br><span class="line">	<span class="keyword">if</span>(R &gt; mid) <span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> tr[u];</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">return</span> x &lt;= mid ? <span class="built_in">qry</span>(u * <span class="number">2</span>, l, mid, x) : <span class="built_in">qry</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt;::iterator it = s.<span class="built_in">insert</span>(x).fst;</span><br><span class="line">	<span class="keyword">if</span>(!rt) &#123; rt = x, <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x, <span class="number">1</span>); <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="keyword">if</span>(it != s.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">		--it; <span class="keyword">if</span>(!ch[<span class="number">1</span>][*it]) ch[<span class="number">1</span>][*it] = x, fa[x] = *it; ++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!fa[x]) ++it, ch[<span class="number">0</span>][*it] = x, fa[x] = *it;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, lp, fa[x]) + <span class="number">1</span>; <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x, dep); <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">splaymin</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x); <span class="keyword">if</span>(x == rt) <span class="keyword">return</span> dep;</span><br><span class="line">	<span class="keyword">if</span>(x + <span class="number">1</span> &lt;= fa[x] - <span class="number">1</span>) <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x + <span class="number">1</span>, fa[x] - <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">	++tr[<span class="number">1</span>], <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x, <span class="number">1</span>);</span><br><span class="line">	ch[<span class="number">0</span>][fa[x]] = ch[<span class="number">1</span>][x], fa[ch[<span class="number">1</span>][x]] = fa[x];</span><br><span class="line">	fa[rt] = x, fa[x] = <span class="number">0</span>, ch[<span class="number">1</span>][x] = rt, rt = x; <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">splaymax</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x); <span class="keyword">if</span>(x == rt) <span class="keyword">return</span> dep;</span><br><span class="line">	<span class="keyword">if</span>(x - <span class="number">1</span> &gt;= fa[x] + <span class="number">1</span>) <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, fa[x] + <span class="number">1</span>, x - <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">	++tr[<span class="number">1</span>], <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x, <span class="number">1</span>);</span><br><span class="line">	ch[<span class="number">1</span>][fa[x]] = ch[<span class="number">0</span>][x], fa[ch[<span class="number">0</span>][x]] = fa[x];</span><br><span class="line">	fa[rt] = x, fa[x] = <span class="number">0</span>, ch[<span class="number">0</span>][x] = rt, rt = x; <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erasemin</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">splaymin</span>(x); --tr[<span class="number">1</span>];</span><br><span class="line">	rt = ch[<span class="number">1</span>][x], fa[rt] = <span class="number">0</span>, ch[<span class="number">1</span>][x] = <span class="number">0</span>, s.<span class="built_in">erase</span>(x); <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erasemax</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">splaymax</span>(x); --tr[<span class="number">1</span>];</span><br><span class="line">	rt = ch[<span class="number">0</span>][x], fa[rt] = <span class="number">0</span>, ch[<span class="number">0</span>][x] = <span class="number">0</span>, s.<span class="built_in">erase</span>(x); <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(m);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123; <span class="built_in">gi</span>(q[i].opt); <span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) <span class="built_in">gi</span>(q[i].x), p[++lp] = q[i].x; &#125;</span><br><span class="line">	<span class="built_in">sort</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>), lp = <span class="built_in">unique</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>) - p - <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m)</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) q[i].x = <span class="built_in">lower_bound</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>, q[i].x) - p;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">insert</span>(q[i].x));</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">splaymin</span>(*s.<span class="built_in">begin</span>()));</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">splaymax</span>(*(--s.<span class="built_in">end</span>())));</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">erasemin</span>(*s.<span class="built_in">begin</span>()));</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">erasemax</span>(*(--s.<span class="built_in">end</span>())));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces1187F】Expected Square Beauty</title>
    <url>/2025/07/27/Codeforces1187F-Expected-Square-Beauty/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h3><p><a href="https://codeforces.com/contest/1187/problem/F">【Codeforces1187F】Expected Square Beauty</a>  </p>
<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>有一个长度为 $ n $ 的数列，第 $ i $ 个数的取值范围为 $ [l_i, r_i] $ ，定义一个数列的价值为这个数列极长连续相同段的个数，求一个数列价值的平方期望，对 $ 10^9 + 7 $ 取模 。<br>$ n \leq 200000 $ 。  </p>
<h3 id="做法："><a href="#做法：" class="headerlink" title="做法："></a>做法：</h3><p>定义 $ F(x) $ 为数列的价值， $ I_i(x) $ 为数列中第 $ i $ 项与第 $ i - 1 $ 项是否不同 $ (I_i(x) &#x3D; [x_i \neq x_{i - 1}]) $ ，则有 $ F(x) &#x3D; \sum_{i &#x3D; 1}^{n} I_i(x) $ 。<br>$$ E(B(x)^2) &#x3D; E(\sum_{i &#x3D; 1}^{n}I_i(x)\sum_{j &#x3D; 1}^{n}I_j(x))\ &#x3D; E(\sum_{i &#x3D; 1}^{n}\sum_{j &#x3D; 1}^{n}I_i(x)I_j(x))\ &#x3D; \sum_{i &#x3D; 1}^{n}\sum_{j &#x3D; 1}^{n}E(I_i(x)I_j(x)) $$<br>考虑计算 $ E(I_i(x)I_j(x)) $ ，分三种情况考虑。<br>当 $ i &#x3D; j $ 时， $ E(I_i(x)I_j(x)) &#x3D; E(I_i(x)) $ 。<br>当 $ | i - j | &gt; 1 $ 时， $ I_i(x), I_j(x) $ 互不影响， $ E(I_i(x)I_j(x)) &#x3D; E(I_i(x))E(I_j(x)) $ 。<br>当 $ | i - j | &#x3D; 1 $ 时，仅考虑 $ j &#x3D; i + 1 $ 的贡献（ $ i &#x3D; j + 1 $ 同理）。$ E(I_i(x)I_j(x)) &#x3D; P(x_{i - 1} \neq x_i &amp;&amp; x_i \neq x_{i + 1}) $ 。考虑容斥， $ E(I_i(x)I_j(x)) &#x3D; 1 - p_i - p_{i + 1} + P(x_{i - 1} &#x3D; x_i &amp;&amp; x_i &#x3D; x_{i + 1}) $ ，就可以计算了。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, l[N], r[N], inv[N], ans;</span><br><span class="line"><span class="type">int</span> e[N], pre[N], suf[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> w = <span class="built_in">min</span>(<span class="built_in">min</span>(r[y], r[x]), r[z]) - <span class="built_in">max</span>(<span class="built_in">max</span>(l[y], l[x]), l[z]) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(w &lt; <span class="number">0</span>) w = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> val = <span class="built_in">mul</span>(<span class="built_in">mul</span>(inv[x], inv[y]), inv[z]); <span class="keyword">return</span> <span class="built_in">mul</span>(w, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;l[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;r[i]);</span><br><span class="line">	e[<span class="number">1</span>] = <span class="number">1</span>, inv[<span class="number">1</span>] = <span class="built_in">ksm</span>(r[<span class="number">1</span>] - l[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		inv[i] = <span class="built_in">ksm</span>(r[i] - l[i] + <span class="number">1</span>);</span><br><span class="line">		e[i] = <span class="built_in">min</span>(r[i], r[i - <span class="number">1</span>]) - <span class="built_in">max</span>(l[i], l[i - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(e[i] &lt; <span class="number">0</span>) e[i] = <span class="number">0</span>;</span><br><span class="line">		e[i] = <span class="built_in">mul</span>(e[i], <span class="built_in">mul</span>(inv[i - <span class="number">1</span>], inv[i])), e[i] = <span class="built_in">sub</span>(<span class="number">1</span>, e[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pre[i] = <span class="built_in">add</span>(pre[i - <span class="number">1</span>], e[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) suf[i] = <span class="built_in">add</span>(suf[i + <span class="number">1</span>], e[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(i &lt; n) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(e[i], suf[i + <span class="number">2</span>]));</span><br><span class="line">		<span class="keyword">if</span>(i &gt; <span class="number">1</span>) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(e[i], pre[i - <span class="number">2</span>]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = <span class="built_in">add</span>(ans, e[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> sum = <span class="built_in">sub</span>(<span class="number">1</span>, <span class="built_in">add</span>(<span class="built_in">sub</span>(<span class="number">1</span>, e[i + <span class="number">1</span>]), <span class="built_in">sub</span>(<span class="number">1</span>, e[i])));</span><br><span class="line">		sum = <span class="built_in">add</span>(sum, <span class="built_in">calc</span>(i - <span class="number">1</span>, i, i + <span class="number">1</span>));</span><br><span class="line">		ans = <span class="built_in">add</span>(ans, <span class="built_in">add</span>(sum, sum));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces水题选做</title>
    <url>/2025/07/27/Codeforces-shui-ti-xuan-zuo/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />
    <label for="pass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>CF</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOISC 2017 Day 1」港口设施</title>
    <url>/2025/07/27/JOISC-2017-Day-1-gang-kou-she-shi/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2391">「JOISC 2017 Day 1」港口设施</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑两个箱子如果进出栈时间呈<strong>嵌套关系</strong>，则这两个箱子就<strong>不能</strong>在同一个栈中。<br>考虑对于这种嵌套关系的两个箱子连一条边，最后的图中的二分图的方案数即总方案数。<br>如果暴力连边，那么边数可达 $ n^2 $ 个，显然过不去。<br>观察我们目前的连边方案：对于一个物品 $ u $ ，它会和之前物品序列中一段连续的物品 $ v1, v2, \dots, vk $ 连边。此时 $ v1, v2, \dots, vk $ 都是<strong>连通且同色</strong>的。<br>那么如果下一轮的连边的范围和 $ v1, v2, \dots, vk $ 有交，那么由连通性，这些边其实只连一条就够了。<br>具体地，对于每个左端点，我们对其维护一个 $ nxt $ ，表示如果现在再对它进行连边，应该跳到哪里。这样连边的数量就会减少很多，且不改变二分性和连通性。<br>最后 $ dfs $ 染色即可。时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2000010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], b[N], ar[N], ans = <span class="number">1</span>, fa1[N], fa2[N], nxt[N];</span><br><span class="line"><span class="type">int</span> clr[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> *fa, <span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> fa[x] == x ? x : fa[x] = <span class="built_in">find</span>(fa, fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(clr[v] == <span class="number">-1</span>) clr[v] = clr[u] ^ <span class="number">1</span>, <span class="built_in">dfs</span>(v);</span><br><span class="line">		<span class="keyword">if</span>(clr[v] == clr[u]) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), ans = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + n + <span class="number">1</span>) fa1[i] = fa2[i] = i;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i], &amp;b[i]), clr[i] = <span class="number">-1</span>;</span><br><span class="line">		ar[a[i]] = ar[b[i]] = i, fa1[b[i]] = b[i] + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + n) <span class="keyword">if</span>(b[ar[i]] == i) &#123;</span><br><span class="line">		<span class="type">int</span> lst = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="built_in">find</span>(fa1, a[ar[i]] + <span class="number">1</span>); j &lt;= i; j = <span class="built_in">find</span>(fa1, j + <span class="number">1</span>)) &#123;</span><br><span class="line">			j = <span class="built_in">find</span>(fa2, j), e[ar[i]].<span class="built_in">pb</span>(ar[j]), e[ar[j]].<span class="built_in">pb</span>(ar[i]);</span><br><span class="line">			<span class="keyword">if</span>(lst) fa2[lst] = j; lst = j;</span><br><span class="line">		&#125;</span><br><span class="line">		fa1[a[ar[i]]] = a[ar[i]] + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(clr[i] == <span class="number">-1</span>) clr[i] = <span class="number">0</span>, <span class="built_in">dfs</span>(i), ans = ans * <span class="number">2</span> % mod;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOISC 2017 Day 3」自然公园</title>
    <url>/2025/07/27/JOISC-2017-Day-3-zi-ran-gong-yuan/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2398">「JOISC 2017 Day 3」自然公园</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑链的情况，我们维护一条链 $ l \dots r $ ，每加入一个点 $ x $ ，可以直接判断是 $ x \dots l \dots r $ 或 $ l \dots r \dots x $ ，然后判断 $ x $ 和端点有没有直接的连边，如果有，连上，返回；否则二分出路径上编号最小的点，继续做下去。<br>对于树的情况，要把整个集合和连进来的点判断。<br>对于图的情况，每次发现当前点相邻的时候要二分出每条与集合相连的边，由于点的度数不超过 $ 7 $ ，所以能过。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;park.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MXN = <span class="number">4010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Answer</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ask</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B, <span class="type">int</span> Place[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Sub3 &#123;</span><br><span class="line">	<span class="type">int</span> g[MXN], vis[MXN], used[MXN]; vector&lt;<span class="type">int</span>&gt; hv, e[MXN];</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> S, vector&lt;<span class="type">int</span>&gt; G)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">0</span>, n - <span class="number">1</span>) g[i] = <span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">auto</span> v : G) g[v] = <span class="number">1</span>;</span><br><span class="line">		g[S] = <span class="number">1</span>; <span class="keyword">return</span> <span class="built_in">Ask</span>(<span class="built_in">min</span>(G[<span class="number">0</span>], S), <span class="built_in">max</span>(G[<span class="number">0</span>], S), g);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> l = <span class="number">1</span>, r = n - <span class="number">2</span>, res = n - <span class="number">1</span>, mid;</span><br><span class="line">		<span class="keyword">for</span>(; l &lt;= r;) &#123;</span><br><span class="line">			mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">rep</span>(i, <span class="number">0</span>, mid) g[i] = (vis[i] != <span class="number">2</span>); <span class="built_in">rep</span>(i, mid + <span class="number">1</span>, n - <span class="number">1</span>) g[i] = (vis[i] == <span class="number">1</span>);</span><br><span class="line">			g[x] = <span class="number">1</span>; <span class="keyword">if</span>(<span class="built_in">Ask</span>(<span class="number">0</span>, x, g)) res = mid, r = mid - <span class="number">1</span>; <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, vector&lt;<span class="type">int</span>&gt; &amp;G)</span> </span>&#123; G.<span class="built_in">pb</span>(u), used[u] = <span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(used[v]) <span class="built_in">dfs</span>(v, G); &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Finde</span><span class="params">(<span class="type">int</span> x, vector&lt;<span class="type">int</span>&gt; G)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">check</span>(x, G)) &#123; <span class="keyword">for</span>(<span class="keyword">auto</span> v : G) used[v] = <span class="number">0</span>; <span class="keyword">return</span> ; &#125;</span><br><span class="line">		<span class="type">int</span> l = <span class="number">0</span>, r = G.<span class="built_in">size</span>() - <span class="number">2</span>, res = G.<span class="built_in">size</span>() - <span class="number">1</span>, mid;</span><br><span class="line">		<span class="keyword">for</span>(; l &lt;= r;) &#123;</span><br><span class="line">			mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">rep</span>(i, <span class="number">0</span>, n - <span class="number">1</span>) g[i] = <span class="number">0</span>; <span class="built_in">rep</span>(i, <span class="number">0</span>, mid) g[G[i]] = <span class="number">1</span>;</span><br><span class="line">			g[x] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">Ask</span>(<span class="built_in">min</span>(G[<span class="number">0</span>], x), <span class="built_in">max</span>(G[<span class="number">0</span>], x), g)) res = mid, r = mid - <span class="number">1</span>; <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> u = G[res]; <span class="keyword">for</span>(<span class="keyword">auto</span> i : G) used[i] = <span class="number">1</span>; used[u] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(used[v]) &#123; vector&lt;<span class="type">int</span>&gt; tmp;  <span class="built_in">dfs</span>(v, tmp), <span class="built_in">Finde</span>(x, tmp); &#125;</span><br><span class="line">		<span class="built_in">Answer</span>(<span class="built_in">min</span>(u, x), <span class="built_in">max</span>(u, x)), e[u].<span class="built_in">pb</span>(x), e[x].<span class="built_in">pb</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		vis[x] = <span class="number">2</span>; <span class="keyword">for</span>(; !<span class="built_in">check</span>(x, hv); <span class="built_in">solve</span>(<span class="built_in">Find</span>(x)));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : hv) used[v] = <span class="number">1</span>;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; tmp; <span class="built_in">dfs</span>(<span class="number">0</span>, tmp), <span class="built_in">Finde</span>(x, tmp), vis[x] = <span class="number">1</span>, hv.<span class="built_in">pb</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">MAIN</span><span class="params">()</span> </span>&#123; hv.<span class="built_in">pb</span>(<span class="number">0</span>), vis[<span class="number">0</span>] = <span class="number">1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, n - <span class="number">1</span>) <span class="keyword">if</span>(!vis[i]) <span class="built_in">solve</span>(i); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Detect</span><span class="params">(<span class="type">int</span> T, <span class="type">int</span> NN)</span> </span>&#123;</span><br><span class="line">	n = NN;</span><br><span class="line">	Sub3::<span class="built_in">MAIN</span>(); <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>交互</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>Image Quality Assessment</title>
    <url>/2025/07/27/IQA/</url>
    <content><![CDATA[<p>参考资料：</p>
<p><a href="https://zhuanlan.zhihu.com/p/210887209">图像质量评价（一）：IQA介绍</a></p>
<p><a href="https://github.com/chaofengc/Awesome-Image-Quality-Assessment">Awesome Image Quality Assessment (IQA)</a></p>
<p>DeepSeek</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>Image Quality Assessment (IQA)</strong>，即<strong>图像质量评估</strong>，是计算机视觉和图像处理领域的一个重要研究方向，旨在通过算法自动评估图像的质量，模拟人类视觉系统（HVS）对图像的主观感知。其核心任务是量化图像的失真程度或感知质量，广泛应用于图像压缩、传输、增强、修复等场景。</p>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="全参考-Full-Reference-FR-IQA"><a href="#全参考-Full-Reference-FR-IQA" class="headerlink" title="全参考 (Full-Reference, FR-IQA)"></a><strong>全参考 (Full-Reference, FR-IQA)</strong></h2><p>需要完整的原始无失真图像作为参考，通过对比失真图像与参考图像的差异来量化质量。</p>
<h3 id="典型方法"><a href="#典型方法" class="headerlink" title="典型方法"></a>典型方法</h3><h4 id="PSNR（峰值信噪比）"><a href="#PSNR（峰值信噪比）" class="headerlink" title="PSNR（峰值信噪比）"></a><strong>PSNR（峰值信噪比）</strong></h4><p>PSNR 基于<strong>均方误差（MSE, Mean Squared Error）<strong>计算，单位为</strong>分贝（dB）</strong>，值越大表示图像质量越好。<br>$$<br>PSNR &#x3D; 10 \cdot \log_{10} \left( \frac{MAX_I^2}{MSE} \right)<br>$$<br>$MAX_I$：图像像素的最大可能值（如8位图像为255）。</p>
<p>$MSE$：均方误差，计算两图像像素差的平方均值：<br>$$<br>MSE &#x3D; \frac{1}{MN} \sum_{i&#x3D;0}^{M - 1} \sum_{j&#x3D;0}^{N - 1} [I(i, j) - K(i, j)]^2<br>$$<br>$I$：原始图像。$K$：失真图像。</p>
<ul>
<li>优点：计算简单、物理意义明确、通用性强</li>
<li>局限性：对局部失真不敏感、依赖参考图像、对图像内容不敏感</li>
</ul>
<h4 id="SSIM（结构相似性）"><a href="#SSIM（结构相似性）" class="headerlink" title="SSIM（结构相似性）"></a><strong>SSIM（结构相似性）</strong></h4><p>SSIM 认为，人眼对图像的<strong>亮度（Luminance）</strong>、<strong>对比度（Contrast）</strong> 和 <strong>结构（Structure）</strong> 三个维度最为敏感，因此分别计算这三者的相似度，再综合得到最终评分：<br>$$<br>SSIM(x, y) &#x3D; [l(x, y)]^{\alpha}[c(x, y)]^{\beta}[s(x, y)]^{\gamma}<br>$$<br>$x$为参考图像，$y$为失真图像。</p>
<p>$l(x, y), c(x, y), s(x, y)$分别为亮度相似度、对比度相似度、结构相似度。</p>
<p>$\alpha, \beta, \gamma$通常设为1 。<br>$$<br>SSIM(x, y) &#x3D; \frac{(2 \mu_x \mu_y + C_1)(2 \sigma_{xy} + C_2)}{(\mu_x^2 + \mu_y^2 + C_1)(\sigma_x^2 + \sigma_y^2 + C_2)}<br>$$<br>$\mu_x, \mu_y$：图像的均值（亮度）。</p>
<p>$\sigma_x, \sigma_y$：图像标准差（对比度）。</p>
<p>$\sigma_{xy}$：协方差（结构相似性）。</p>
<p>$C_1, C_2$：防止分母为0的小常数。</p>
<ul>
<li>优点：更符合人眼感知、多维度评估、鲁棒性强</li>
<li>缺点：计算复杂度高、不适用于极端失真、依赖参考图像</li>
</ul>
<h4 id="MS-SSIM（多尺度SSIM）"><a href="#MS-SSIM（多尺度SSIM）" class="headerlink" title="MS-SSIM（多尺度SSIM）"></a><strong>MS-SSIM（多尺度SSIM）</strong></h4><p>在多分辨率下计算SSIM，更适合复杂失真。</p>
<h4 id="VIF（视觉信息保真度）"><a href="#VIF（视觉信息保真度）" class="headerlink" title="VIF（视觉信息保真度）"></a><strong>VIF（视觉信息保真度）</strong></h4><p>VIF 将图像视为信息源，将人类视觉系统视为通信信道，通过计算参考图像和失真图像通过HVS（人类视觉系统）信道后的**互信息（Mutual Information）**来评估质量。</p>
<ul>
<li>优点：符合人类感知、多尺度分析、信息论基础、对复杂失真敏感</li>
<li>缺点：计算复杂度高、依赖参数调优、对某些失真不敏感</li>
</ul>
<h2 id="部分参考-Reduced-Reference-RR-IQA"><a href="#部分参考-Reduced-Reference-RR-IQA" class="headerlink" title="部分参考 (Reduced-Reference, RR-IQA)"></a><strong>部分参考 (Reduced-Reference, RR-IQA)</strong></h2><p>仅需原始图像的部分特征（如统计特征、频域信息），而非完整图像。</p>
<h3 id="典型方法-1"><a href="#典型方法-1" class="headerlink" title="典型方法"></a><strong>典型方法</strong></h3><ul>
<li><strong>基于频域特征</strong>：如DCT系数、小波变换能量分布。</li>
<li><strong>基于自然场景统计 (NSS)</strong>：如提取原始图像的梯度分布、熵特征。</li>
</ul>
<h2 id="无参考-No-Reference-NR-IQA"><a href="#无参考-No-Reference-NR-IQA" class="headerlink" title="无参考 (No-Reference, NR-IQA)"></a><strong>无参考 (No-Reference, NR-IQA)</strong></h2><p>无需任何参考图像，直接评估失真图像的质量。</p>
<h3 id="典型方法-2"><a href="#典型方法-2" class="headerlink" title="典型方法"></a><strong>典型方法</strong></h3><ul>
<li><strong>传统方法</strong>：<ul>
<li><strong>BRISQUE</strong>：基于空间域自然场景统计。</li>
<li><strong>NIQE</strong>：利用多元高斯模型拟合图像特征。</li>
</ul>
</li>
<li><strong>深度学习方法</strong>：<ul>
<li><strong>CNN-based</strong>：如WaDIQaM、HyperIQA。</li>
<li><strong>Transformer-based</strong>：如TranSLA、ViTQA。</li>
</ul>
</li>
</ul>
<h1 id="Paper-reading"><a href="#Paper-reading" class="headerlink" title="Paper reading"></a>Paper reading</h1><div class="pdf-container">
  <iframe src="/pdfjs/web/viewer.html?file=/assets/IQA/papers.pdf" width="100%" height="800px"></iframe>
</div>]]></content>
  </entry>
  <entry>
    <title>【LOJ3042】【ZJOI2019】麻将</title>
    <url>/2025/07/27/LOJ3042-ZJOI2019-ma-jiang/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/3042">【LOJ3042】【ZJOI2019】麻将</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>我们可以用 $ dp[i][j][k] $ 表示枚举到第 $ i $ 种牌，没有组成面子的 $ i - 1 $ 种牌有 $ j $ 个， $ i $ 种牌有 $ k $ 个。<br>然后再开一维表示是否有雀头，七对子再开一维特判即可。<br>然后暴力搜索所有 $ dp $ 状态，发现状态数只有 $ S &#x3D; 3956 $ 种。<br>考虑摸 $ i $ 牌，计算所有大小为 $ 13+i $ 的牌集中不能胡牌的集合数 $ X $ 和总集合数 $ Y $ ，那么 $ \frac{X}{Y} $ 就是权值大于 $ i $ 的概率， $ \sum{\frac{X}{Y}} $ 即为权值的期望。<br>设 $ f[i][j][t] $ 表示处理前 $ i $ 种牌，选了 $ j $ 张牌， $ dp $ 状态编号为 $ t $ ，转移就枚举下一种牌张数即可。<br>时间复杂度 $ O(n^2 S) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, S = <span class="number">4010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">state</span> &#123; <span class="type">int</span> f[<span class="number">3</span>][<span class="number">3</span>]; &#125;; <span class="type">int</span> Count = <span class="number">0</span>; map&lt;state, <span class="type">int</span>&gt; ma;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> state &amp;x, <span class="type">const</span> state &amp;y) &#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		<span class="keyword">if</span>(x.f[i][j] ^ y.f[i][j]) <span class="keyword">return</span> x.f[i][j] &lt; y.f[i][j];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">state <span class="title">cipher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	state res;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) res.f[i][j] = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">state <span class="title">starter</span><span class="params">()</span> </span>&#123; state res = <span class="built_in">cipher</span>(); res.f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> res; &#125;</span><br><span class="line">state <span class="keyword">operator</span>+(<span class="type">const</span> state &amp;x, <span class="type">const</span> state &amp;y) &#123;</span><br><span class="line">	state res;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		res.f[i][j] = <span class="built_in">Max</span>(x.f[i][j], y.f[i][j]);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">state <span class="keyword">operator</span>+(<span class="type">const</span> state &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	state res = <span class="built_in">cipher</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span> &amp;&amp; i &lt;= y; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span> &amp;&amp; i + j &lt;= y; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(x.f[i][j] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="type">int</span> tt = x.f[i][j];</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span> &amp;&amp; i + j + k &lt;= y; k++)</span><br><span class="line">				res.f[j][k] = <span class="built_in">Max</span>(res.f[j][k], <span class="built_in">Min</span>(tt + i + (y - i - j - k) / <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(state u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ma.<span class="built_in">count</span>(u)) <span class="keyword">return</span> ;</span><br><span class="line">	ma[u] = ++Count; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++) <span class="built_in">dfs</span>(u + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;pair&lt;state, state&gt;, <span class="type">int</span>&gt; mahjong;</span><br><span class="line"><span class="type">bool</span> ed[S]; mahjong states[S]; map&lt;mahjong, <span class="type">int</span>&gt; id;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>, nxt[<span class="number">5</span>][S];</span><br><span class="line"></span><br><span class="line">pair&lt;state, state&gt; <span class="keyword">operator</span>+(<span class="type">const</span> pair&lt;state, state&gt; &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	<span class="keyword">if</span>(y &gt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">mp</span>(x.fst + y, (x.snd + y) + (x.fst + (y - <span class="number">2</span>)));</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mp</span>(x.fst + y, x.snd + y);</span><br><span class="line">&#125;</span><br><span class="line">mahjong <span class="keyword">operator</span>+(<span class="type">const</span> mahjong &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mp</span>(x.fst + y, <span class="built_in">Min</span>(x.snd + (y &gt; <span class="number">1</span>), <span class="number">7</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mahjong <span class="title">inception</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">mp</span>(<span class="built_in">mp</span>(<span class="built_in">starter</span>(), <span class="built_in">cipher</span>()), <span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getstate</span><span class="params">(mahjong u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(id.<span class="built_in">count</span>(u)) <span class="keyword">return</span> ; id[u] = ++tot, states[tot] = u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++) <span class="built_in">getstate</span>(u + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(mahjong u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u.snd &gt;= <span class="number">7</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		<span class="keyword">if</span>(u.fst.snd.f[i][j] &gt;= <span class="number">4</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="built_in">starter</span>()), <span class="built_in">getstate</span>(<span class="built_in">inception</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span><br><span class="line">		ed[i] = <span class="built_in">check</span>(states[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) nxt[j][i] = id[states[i] + j];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, used[N], ans = <span class="number">0</span>, C[<span class="number">5</span>][<span class="number">5</span>], f[N][<span class="number">4</span> * N][S];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">init</span>(), <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= <span class="number">13</span>; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), ++used[x];</span><br><span class="line">	C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++) C[i][j] = C[i - <span class="number">1</span>][j] + C[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">4</span> * i; j++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= tot; k++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(!f[i][j][k]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> t = used[i + <span class="number">1</span>]; t &lt; <span class="number">5</span>; t++)</span><br><span class="line">				f[i + <span class="number">1</span>][j + t][nxt[t][k]] = <span class="built_in">add</span>(f[i + <span class="number">1</span>][j + t][nxt[t][k]],</span><br><span class="line">				<span class="built_in">mul</span>(f[i][j][k], C[<span class="number">4</span> - used[i + <span class="number">1</span>]][t - used[i + <span class="number">1</span>]]));</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">13</span>; i &lt;= <span class="number">4</span> * n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> sum = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= tot; j++) &#123;</span><br><span class="line">			sum = <span class="built_in">add</span>(sum, f[n][i][j]); <span class="keyword">if</span>(!ed[j]) cnt = <span class="built_in">add</span>(cnt, f[n][i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(<span class="built_in">ksm</span>(sum), cnt));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>【LOJ2330】「清华集训 2017」榕树之心</title>
    <url>/2025/07/27/LOJ2330-qing-hua-ji-xun-2017-rong-shu-zhi-xin/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2330">「清华集训 2017」榕树之心</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑只询问 $ 1 $ 号节点怎么做。假如我们选择一个子树然后再选择另一个子树，那么这次操作就抵消了。<br>对于每一个节点，将它每一个子树的大小计为 $ a_i $ ，然后每次选择 $ a_x, a_y ( a_x &gt; 0, a_y &gt; 0 ) $ ，使 $ –a_x, –a_y $ ，使 $ \sum{a_i} $ 最小。最后有两种情况：  </p>
<ol>
<li>当 $ Max ( a_i ) \times 2 &gt;&#x3D; \sum{a_i} $ ，则该节点子树贡献为 $ Max ( a_i ) \times 2 - \sum{a_i} $ 。  </li>
<li>否则每次去两个最大值消耗，该节点子树贡献为 $ ( \sum{a_i} ) \mod 2 $ 。</li>
</ol>
<p>然后就可以在节点不同的儿子中内部抵消，就可以进行树形 DP ，记录一个节点儿子子树消耗后最大值、次大值以及该点子树消耗后的权值。<br>询问所有点则可以用用类似换根 DP 的方法。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> W, T;</span><br><span class="line"><span class="type">int</span> n, ans[N], dep[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line">pii f[<span class="number">2</span>][N], a[N];</span><br><span class="line"><span class="comment">// f[0][x] &gt; f[1][x]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Max</span><span class="params">(<span class="type">const</span> T &amp;x, <span class="type">const</span> T &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> pii &amp;x, <span class="type">const</span> pii &amp;y) &#123;</span><br><span class="line">	<span class="keyword">return</span> x.fst == y.fst ? x.snd &gt; y.snd : x.fst &lt; y.fst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	a[u].fst = <span class="number">1</span>, dep[u] = dep[ff] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v ^ ff) &#123;</span><br><span class="line">		<span class="built_in">dfs1</span>(v, u), a[u].fst += a[v].fst;</span><br><span class="line">		<span class="keyword">if</span>(f[<span class="number">1</span>][u] &lt; a[v]) f[<span class="number">1</span>][u] = a[v];</span><br><span class="line">		<span class="keyword">if</span>(f[<span class="number">1</span>][u] &gt; f[<span class="number">0</span>][u]) <span class="built_in">swap</span>(f[<span class="number">1</span>][u], f[<span class="number">0</span>][u]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(f[<span class="number">0</span>][u].fst) &#123;</span><br><span class="line">		<span class="keyword">if</span>(a[u].fst - f[<span class="number">0</span>][u].fst - <span class="number">1</span> &gt;= f[<span class="number">0</span>][u].snd + <span class="number">1</span>)</span><br><span class="line">			a[u].snd = (a[u].fst - <span class="number">1</span>) &amp; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> a[u].snd = f[<span class="number">0</span>][u].snd + <span class="number">1</span> - (a[u].fst - f[<span class="number">0</span>][u].fst - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> a[u].snd = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, pii x)</span> </span>&#123;</span><br><span class="line">	pii U = <span class="built_in">Max</span>(x, f[<span class="number">0</span>][u]); <span class="type">int</span> sz = n - dep[u] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(U.fst) &#123;</span><br><span class="line">		<span class="keyword">if</span>(sz - U.fst - <span class="number">1</span> &gt;= U.snd + <span class="number">1</span>) ans[u] = (sz - <span class="number">1</span>) &amp; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> ans[u] = U.snd + <span class="number">1</span> - (sz - U.fst - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v ^ ff) &#123;</span><br><span class="line">		<span class="keyword">if</span>(f[<span class="number">0</span>][u] == a[v]) <span class="built_in">dfs2</span>(v, u, <span class="built_in">Max</span>(x, f[<span class="number">1</span>][u]));</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">dfs2</span>(v, u, <span class="built_in">Max</span>(x, f[<span class="number">0</span>][u]));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;W, &amp;T);</span><br><span class="line">	<span class="keyword">for</span>(; T; --T) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			e[i].<span class="built_in">clear</span>(), f[<span class="number">0</span>][i] = f[<span class="number">1</span>][i] = a[i] = <span class="built_in">mp</span>(<span class="number">0</span>, INF);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x);</span><br><span class="line">		<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="built_in">mp</span>(<span class="number">0</span>, INF));</span><br><span class="line">		<span class="keyword">if</span>(W == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[<span class="number">1</span>] == <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i] == <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOISC 2017 Day 1」开荒者</title>
    <url>/2025/07/27/JOISC-2017-Day-1-kai-huang-zhe/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2390">「JOISC 2017 Day 1」开荒者</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>单独一个点，假如固定每个操作的数目，则得到的草呈矩形，且形状不会应操作顺序变化而变化。所以最后的结果与操作顺序无关。同时发现当向上、下次数总和一定时，若无上下边界，则草地形状一样。<br>考虑枚举向上、向下次数，可以通过差分扫描线的方式维护出草地的形状（由于一个点只会被加入一次，删除一次，所以扫描线点数 $ O(n) $ 级别）。<br>考虑对于每一行对答案的贡献，设第 $ i $ 每一株草的位置时 $ a_1 \dots a_m $ ，则向左向右对答案的贡献为 $ f_i &#x3D; \max(a_1 - 1, c - a_n, \max_{i &#x3D; 1}^{m - 1}(a_{i + 1} - a_{i}) $ ，现在考虑上下的边界，答案为 $ \min_{i}(\max_{i \leq j \leq i + r - 1} f_j) $ ，可以用单调队列维护。<br>时间复杂度 $ O(n^3) $ ，常数略大。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">910</span>;</span><br><span class="line"><span class="type">int</span> r, c, n, smn, wmn, swmn; ll ans;</span><br><span class="line">pii a[N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s, w, All;</span><br><span class="line">pii b[N]; <span class="type">int</span> tot, len[N], ex[N][N], lmt[N][<span class="number">3</span>]; ll sum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(); <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &gt; <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; x = x * <span class="number">10ll</span> + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> pii &amp;x, <span class="type">const</span> pii &amp;y)</span> </span>&#123; <span class="keyword">return</span> x.snd &lt; y.snd; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> lst = <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(ex[x][i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!lst) lmt[x][<span class="number">0</span>] = a[i].snd - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> mx = <span class="built_in">max</span>(mx, a[i].snd - a[lst].snd - <span class="number">1</span>);</span><br><span class="line">		lst = i;</span><br><span class="line">	&#125;</span><br><span class="line">	lmt[x][<span class="number">1</span>] = c - a[lst].snd, lmt[x][<span class="number">2</span>] = mx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) b[++tot] = <span class="built_in">mp</span>(a[i].fst - x, -i), b[++tot] = <span class="built_in">mp</span>(a[i].fst + <span class="number">1</span>, i);</span><br><span class="line">	<span class="built_in">sort</span>(b + <span class="number">1</span>, b + tot + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, tot - <span class="number">1</span>) &#123;</span><br><span class="line">		len[i] = b[i + <span class="number">1</span>].fst - b[i].fst; <span class="built_in">rep</span>(j, <span class="number">1</span>, n) ex[i][j] = ex[i - <span class="number">1</span>][j];</span><br><span class="line">		b[i].snd &lt; <span class="number">0</span> ? (ex[i][-b[i].snd] = <span class="number">1</span>) : (ex[i][b[i].snd] = <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">calc</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">swap</span>(b[x], b[y]);</span><br><span class="line">	<span class="built_in">rep</span>(i, x, y) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n) ex[i][j] = ex[i - <span class="number">1</span>][j];</span><br><span class="line">		b[i].snd &lt; <span class="number">0</span> ? (ex[i][-b[i].snd] = <span class="number">1</span>) : (ex[i][b[i].snd] = <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">calc</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, tot) <span class="keyword">if</span>(b[i].snd &lt; <span class="number">0</span>) b[i].fst -= x;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(; flag;) &#123; flag = <span class="number">0</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, tot - <span class="number">1</span>) <span class="keyword">if</span>(b[i + <span class="number">1</span>] &lt; b[i]) <span class="built_in">Swap</span>(i, i + <span class="number">1</span>), flag = <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, tot - <span class="number">1</span>) len[i] = b[i + <span class="number">1</span>].fst - b[i].fst;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, tot) sum[i] = sum[i - <span class="number">1</span>] + len[i - <span class="number">1</span>];</span><br><span class="line">	deque&lt;<span class="type">int</span>&gt; q[<span class="number">3</span>]; <span class="type">int</span> res = c + c - <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; j &lt;= tot; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(; j &lt; tot &amp;&amp; sum[j] - sum[i] &lt; r; ++j)</span><br><span class="line">			<span class="keyword">if</span>(len[j]) &#123;</span><br><span class="line">				<span class="built_in">rep</span>(k, <span class="number">0</span>, <span class="number">2</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span>(; !q[k].<span class="built_in">empty</span>() &amp;&amp; lmt[q[k].<span class="built_in">back</span>()][k] &lt;= lmt[j][k]; q[k].<span class="built_in">pop_back</span>());</span><br><span class="line">					q[k].<span class="built_in">push_back</span>(j);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">if</span>(sum[j] - sum[i] &lt; r) <span class="keyword">break</span>;</span><br><span class="line">		<span class="type">int</span> x = lmt[q[<span class="number">0</span>].<span class="built_in">front</span>()][<span class="number">0</span>], y = lmt[q[<span class="number">1</span>].<span class="built_in">front</span>()][<span class="number">1</span>], z = lmt[q[<span class="number">2</span>].<span class="built_in">front</span>()][<span class="number">2</span>];</span><br><span class="line">		res = <span class="built_in">min</span>(res, <span class="built_in">max</span>(x + y, z));</span><br><span class="line">		<span class="built_in">rep</span>(k, <span class="number">0</span>, <span class="number">2</span>) <span class="keyword">if</span>(q[k].<span class="built_in">front</span>() == i) q[k].<span class="built_in">pop_front</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(r), <span class="built_in">gi</span>(c), <span class="built_in">gi</span>(n), ans = r + c - <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">gi</span>(a[i].fst), <span class="built_in">gi</span>(a[i].snd); <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">	smn = a[<span class="number">1</span>].fst - <span class="number">1</span>, wmn = r - a[n].fst, swmn = smn + wmn;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n - <span class="number">1</span>) swmn = <span class="built_in">max</span>(swmn, a[i + <span class="number">1</span>].fst - a[i].fst - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">		s.<span class="built_in">insert</span>(a[i].fst - <span class="number">1</span>), w.<span class="built_in">insert</span>(r - a[i].fst);</span><br><span class="line">		<span class="built_in">rep</span>(j, i, n) <span class="keyword">if</span>(a[j].fst - a[i].fst - <span class="number">1</span> &gt;= swmn) All.<span class="built_in">insert</span>(a[j].fst - a[i].fst - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i : s) <span class="keyword">for</span>(<span class="keyword">auto</span> j : w) <span class="keyword">if</span>(i + j &gt;= swmn) All.<span class="built_in">insert</span>(i + j);</span><br><span class="line">	<span class="built_in">init</span>(*All.<span class="built_in">begin</span>()); <span class="type">int</span> lst = *All.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i : All) ans = <span class="built_in">min</span>(ans, i + <span class="built_in">solve</span>(i - lst)), lst = i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>PKUWC2019游记</title>
    <url>/2025/07/27/PKUWC2019-you-ji/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />
    <label for="pass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title>LVLM-paper reading</title>
    <url>/2025/07/27/LVLM-learning/</url>
    <content><![CDATA[<h1 id="paper-reading1"><a href="#paper-reading1" class="headerlink" title="paper reading1"></a>paper reading1</h1><div class="pdf-container">
  <iframe src="/pdfjs/web/viewer.html?file=/assets/LVLM/readpapers1.pdf" width="100%" height="800px"></iframe>
</div>]]></content>
      <tags>
        <tag>LVLM</tag>
      </tags>
  </entry>
  <entry>
    <title>【LOJ3044】【ZJOI2019】Minimax 搜索</title>
    <url>/2025/07/27/LOJ3044-ZJOI2019-Minimax-sou-suo/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/3044">【LOJ3044】【ZJOI2019】Minimax 搜索</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>计算 $ W(S) &lt;&#x3D; i $ 比 $ W(S) &#x3D; i $ 容易得多，设最后结果为 $ sum[i] - sum[i - 1] $ ，其中 $ sum[n] &#x3D; 2^{count~leaf} - 1 $ 。<br>先做一次 $ dfs $ 找到决策路径。对于每一个 $ i \in [l, r] $ ，令 $ dp[i] $ 表示 $ i $ 的子树有多少种方案是无法改变根节点的值的，用总集合数减去就得到可以改变的方案数。<br>然后得到一个 $ O(n \times (r - l + 1)) $ 的算法。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, L, R;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>, hed[N], to[N + N], nxt[N + N];</span><br><span class="line"><span class="type">int</span> f[N], dep[N], sz[N];</span><br><span class="line"><span class="type">int</span> ans[N], value, ba[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	to[++cnt] = y, nxt[cnt] = hed[x], hed[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	dep[u] = dep[ff] + <span class="number">1</span>; <span class="type">bool</span> Leaf = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) f[u] = <span class="number">1</span>; <span class="keyword">else</span> f[u] = N;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] ^ ff) &#123;</span><br><span class="line">		<span class="built_in">init</span>(to[i], u), sz[u] += sz[to[i]], Leaf = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) f[u] = <span class="built_in">Max</span>(f[u], f[to[i]]);</span><br><span class="line">		<span class="keyword">else</span> f[u] = <span class="built_in">Min</span>(f[u], f[to[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Leaf) sz[u] = <span class="number">1</span>, f[u] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gmx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="type">bool</span> Leaf = <span class="number">1</span>; <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] ^ ff) &#123;</span><br><span class="line">		Leaf = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, <span class="built_in">gmx</span>(to[i], u, w));</span><br><span class="line">		<span class="keyword">else</span> res = <span class="built_in">mul</span>(res, <span class="built_in">sub</span>(ba[sz[to[i]]], <span class="built_in">gmx</span>(to[i], u, w)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Leaf) &#123;</span><br><span class="line">		<span class="keyword">if</span>(f[u] &lt;= value) ++res; <span class="keyword">if</span>(f[u] + w &lt;= value) ++res; <span class="keyword">return</span> res - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) <span class="keyword">return</span> res; <span class="keyword">return</span> <span class="built_in">sub</span>(ba[sz[u]], res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gmn</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="type">bool</span> Leaf = <span class="number">1</span>; <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] ^ ff) &#123;</span><br><span class="line">		Leaf = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, <span class="built_in">sub</span>(ba[sz[to[i]]], <span class="built_in">gmn</span>(to[i], u, w)));</span><br><span class="line">		<span class="keyword">else</span> res = <span class="built_in">mul</span>(res, <span class="built_in">gmn</span>(to[i], u, w));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Leaf) &#123;</span><br><span class="line">		<span class="keyword">if</span>(f[u] &gt;= value) ++res; <span class="keyword">if</span>(f[u] - w &gt;= value) ++res; <span class="keyword">return</span> res - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">sub</span>(ba[sz[u]], res); <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] ^ ff) &#123;</span><br><span class="line">		<span class="keyword">if</span>(f[u] == f[to[i]]) res = <span class="built_in">mul</span>(res, <span class="built_in">dfs</span>(to[i], u, w));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, <span class="built_in">gmx</span>(to[i], u, w));</span><br><span class="line">		<span class="keyword">else</span> res = <span class="built_in">mul</span>(res, <span class="built_in">gmn</span>(to[i], u, w));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">if</span>(x == n) <span class="keyword">return</span> <span class="built_in">sub</span>(ba[sz[<span class="number">1</span>]], <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sub</span>(ba[sz[<span class="number">1</span>]], <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;L, &amp;R);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), <span class="built_in">addedge</span>(x, y), <span class="built_in">addedge</span>(y, x);</span><br><span class="line">	<span class="keyword">if</span>(R - L &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">		ba[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ba[i] = <span class="built_in">add</span>(ba[i - <span class="number">1</span>], ba[i - <span class="number">1</span>]);</span><br><span class="line">		<span class="built_in">init</span>(<span class="number">1</span>, <span class="number">0</span>), value = f[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = L - <span class="number">1</span>; i &lt;= R; i++) ans[i] = <span class="built_in">calc</span>(i);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = R; i &gt;= L; i--) ans[i] = <span class="built_in">sub</span>(ans[i], ans[i - <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = L; i &lt;= R; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现每个叶子节点只会被改变一次，然后这个问题可以变成一个动态DP。<br>考虑决策路径上的节点是无用的，将树进行重链剖分，以每一个决策路径的点作为根进行动态DP。<br>卡常数可以用向量代替矩阵。<br>时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pair</span> &#123; <span class="type">int</span> k, b; <span class="built_in">Pair</span>(<span class="type">int</span> K = <span class="number">0</span>, <span class="type">int</span> B = <span class="number">0</span>) : <span class="built_in">k</span>(K), <span class="built_in">b</span>(B) &#123;&#125; &#125;;</span><br><span class="line"><span class="keyword">inline</span> Pair <span class="keyword">operator</span>+(<span class="type">const</span> Pair &amp;x, <span class="type">const</span> Pair &amp;y) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Pair</span>(<span class="built_in">mul</span>(x.k, y.k), <span class="built_in">add</span>(<span class="built_in">mul</span>(x.k, y.b), x.b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> pii <span class="keyword">operator</span>+(pii x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	<span class="keyword">if</span>(y) x.fst = <span class="built_in">mul</span>(x.fst, y); <span class="keyword">else</span> ++x.snd; <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> pii <span class="keyword">operator</span>-(pii x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	<span class="keyword">if</span>(y) x.fst = <span class="built_in">mul</span>(x.fst, <span class="built_in">ksm</span>(y)); <span class="keyword">else</span> --x.snd; <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gval</span><span class="params">(pii x)</span> </span>&#123; <span class="keyword">return</span> x.snd ? <span class="number">0</span> : x.fst; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, lb, rb, sum = <span class="number">1</span>, ans[N];</span><br><span class="line"><span class="type">bool</span> leaf[N]; <span class="type">int</span> sz[N], a[N], w[N], dep[N], son[N], key[N];</span><br><span class="line"><span class="type">int</span> fa[N], dfn[N], idx = <span class="number">0</span>, dp[N];</span><br><span class="line"><span class="type">bool</span> type[N]; pii pr[N]; <span class="type">int</span> top[N], ed[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], chs[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TR</span> &#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">		<span class="type">int</span> lf, rf; Pair w;</span><br><span class="line">		<span class="built_in">P</span>(<span class="type">int</span> Lf = <span class="number">0</span>, <span class="type">int</span> Rf = <span class="number">0</span>, Pair W = <span class="built_in">Pair</span>(<span class="number">1</span>, <span class="number">0</span>)) :</span><br><span class="line">			<span class="built_in">lf</span>(Lf), <span class="built_in">rf</span>(Rf), <span class="built_in">w</span>(W) &#123;&#125;</span><br><span class="line">	&#125;; P t[N * <span class="number">4</span>];</span><br><span class="line">	<span class="type">int</span> tot, n, rt;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; t[u].w = t[t[u].lf].w + t[t[u].rf].w; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">		u = ++tot, t[u].w = <span class="built_in">Pair</span>(<span class="number">1</span>, <span class="number">0</span>); <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(t[u].lf, l, mid), <span class="built_in">build</span>(t[u].rf, mid + <span class="number">1</span>, r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> size)</span> </span>&#123; rt = tot = <span class="number">0</span>, n = size, <span class="built_in">build</span>(rt, <span class="number">1</span>, n); &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, Pair w)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l &gt;= r) &#123; t[u].w = w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(x &lt;= mid) <span class="built_in">mdy</span>(t[u].lf, l, mid, x, w);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">mdy</span>(t[u].rf, mid + <span class="number">1</span>, r, x, w);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Mdy</span><span class="params">(<span class="type">int</span> x, Pair w)</span> </span>&#123; <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, w); &#125;</span><br><span class="line">	<span class="function">Pair <span class="title">qry</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l == L &amp;&amp; r == R) <span class="keyword">return</span> t[u].w;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(R &lt;= mid) <span class="keyword">return</span> <span class="built_in">qry</span>(t[u].lf, l, mid, L, R);</span><br><span class="line">		<span class="keyword">if</span>(L &gt; mid) <span class="keyword">return</span> <span class="built_in">qry</span>(t[u].rf, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">qry</span>(t[u].lf, l, mid, L, mid) +</span><br><span class="line">			   <span class="built_in">qry</span>(t[u].rf, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, R);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Qry</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r).b; &#125;</span><br><span class="line">&#125;; TR tr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	leaf[u] = <span class="number">1</span>, dep[u] = dep[ff] + <span class="number">1</span>; w[u] = (dep[u] &amp; <span class="number">1</span>) ? <span class="number">0</span> : N;</span><br><span class="line">	sz[u] = a[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v ^ ff) &#123;</span><br><span class="line">		leaf[u] = <span class="number">0</span>, <span class="built_in">init</span>(v, u), sz[u] += sz[v], a[u] = <span class="built_in">mul</span>(a[u], a[v]);</span><br><span class="line">		<span class="keyword">if</span>(sz[son[u]] &lt; sz[v]) son[u] = v;</span><br><span class="line">		<span class="keyword">if</span>((dep[u] &amp; <span class="number">1</span>) &amp;&amp; w[v] &gt; w[u]) w[u] = w[v], key[u] = v;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(!(dep[u] &amp; <span class="number">1</span>) &amp;&amp; w[v] &lt; w[u]) w[u] = w[v], key[u] = v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(leaf[u]) a[u] = <span class="number">2</span>, w[u] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> tp, <span class="type">bool</span> flag, <span class="type">bool</span> opt)</span> </span>&#123;</span><br><span class="line">	fa[u] = ff, dfn[u] = ++idx;</span><br><span class="line">	type[u] = flag, pr[u] = <span class="built_in">mp</span>(<span class="number">1</span>, <span class="number">0</span>), top[u] = tp;</span><br><span class="line">	<span class="keyword">if</span>(leaf[u]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(opt) &#123;</span><br><span class="line">			dp[u] = <span class="number">2</span> * (w[u] &lt;= w[<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(w[u] &lt;= w[<span class="number">1</span>]) chs[w[<span class="number">1</span>] - w[u] + <span class="number">1</span>].<span class="built_in">pb</span>(u);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			dp[u] = <span class="number">2</span> * (w[u] &gt;= w[<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(w[u] &gt;= w[<span class="number">1</span>]) chs[w[u] - w[<span class="number">1</span>] + <span class="number">1</span>].<span class="built_in">pb</span>(u);</span><br><span class="line">		&#125;</span><br><span class="line">		tr.<span class="built_in">Mdy</span>(dfn[u], <span class="built_in">Pair</span>(<span class="number">0</span>, dp[u]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u], u, tp, flag ^ <span class="number">1</span>, opt), ed[u] = ed[son[u]];</span><br><span class="line">	<span class="keyword">else</span> ed[u] = u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff &amp;&amp; v != son[u]) &#123;</span><br><span class="line">		<span class="built_in">dfs2</span>(v, u, v, flag ^ <span class="number">1</span>, opt);</span><br><span class="line">		<span class="keyword">if</span>(flag) pr[u] = pr[u] + dp[v];</span><br><span class="line">		<span class="keyword">else</span> pr[u] = pr[u] + <span class="built_in">sub</span>(a[v], dp[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(son[u]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(flag) &#123;</span><br><span class="line">			dp[u] = <span class="built_in">mul</span>(<span class="built_in">gval</span>(pr[u]), dp[son[u]]);</span><br><span class="line">			tr.<span class="built_in">Mdy</span>(dfn[u], <span class="built_in">Pair</span>(<span class="built_in">gval</span>(pr[u]), <span class="number">0</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			dp[u] = <span class="built_in">mul</span>(<span class="built_in">gval</span>(pr[u]), <span class="built_in">sub</span>(a[son[u]], dp[son[u]]));</span><br><span class="line">			dp[u] = <span class="built_in">sub</span>(a[u], dp[u]);</span><br><span class="line">			tr.<span class="built_in">Mdy</span>(dfn[u], <span class="built_in">Pair</span>(<span class="built_in">gval</span>(pr[u]), <span class="built_in">sub</span>(a[u], <span class="built_in">mul</span>(<span class="built_in">gval</span>(pr[u]), a[son[u]]))));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!key[u]) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="built_in">dfs1</span>(key[u], u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff &amp;&amp; v != key[u])</span><br><span class="line">		<span class="built_in">dfs2</span>(v, u, v, <span class="number">0</span>, dep[u] &amp; <span class="number">1</span>), sum = <span class="built_in">mul</span>(sum, dp[v]), fa[v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	tr.<span class="built_in">Mdy</span>(dfn[x], <span class="built_in">Pair</span>(<span class="number">0</span>, <span class="built_in">sub</span>(dp[x], <span class="number">1</span>)));</span><br><span class="line">	<span class="type">int</span> tmp = tr.<span class="built_in">Qry</span>(dfn[top[x]], dfn[ed[x]]);</span><br><span class="line">	x = top[x];</span><br><span class="line">	<span class="keyword">for</span>(; fa[x];) &#123;</span><br><span class="line">		<span class="type">int</span> f = fa[x];</span><br><span class="line">		<span class="keyword">if</span>(type[f]) pr[f] = (pr[f] + tmp) - dp[x];</span><br><span class="line">		<span class="keyword">else</span> pr[f] = (pr[f] + <span class="built_in">sub</span>(a[x], tmp)) - <span class="built_in">sub</span>(a[x], dp[x]);</span><br><span class="line">		dp[x] = tmp, x = f;</span><br><span class="line">		<span class="keyword">if</span>(type[x]) tr.<span class="built_in">Mdy</span>(dfn[x], <span class="built_in">Pair</span>(<span class="built_in">gval</span>(pr[x]), <span class="number">0</span>));</span><br><span class="line">		<span class="keyword">else</span> tr.<span class="built_in">Mdy</span>(dfn[x], <span class="built_in">Pair</span>(<span class="built_in">gval</span>(pr[x]), <span class="built_in">sub</span>(a[x], <span class="built_in">mul</span>(<span class="built_in">gval</span>(pr[x]), a[son[x]]))));</span><br><span class="line">		tmp = tr.<span class="built_in">Qry</span>(dfn[top[x]], dfn[ed[x]]), x = top[x];</span><br><span class="line">	&#125;</span><br><span class="line">	sum = <span class="built_in">mul</span>(<span class="built_in">mul</span>(sum, tmp), <span class="built_in">ksm</span>(dp[x])), dp[x] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;lb, &amp;rb);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	<span class="built_in">init</span>(<span class="number">1</span>, <span class="number">0</span>), tr.<span class="built_in">init</span>(n), <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> x : chs[i]) <span class="built_in">modify</span>(x);</span><br><span class="line">		ans[i] = <span class="built_in">sub</span>(a[<span class="number">1</span>], sum);</span><br><span class="line">	&#125;</span><br><span class="line">	ans[n] = a[<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--) ans[i] = <span class="built_in">sub</span>(ans[i], ans[i - <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = lb; i &lt;= rb; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
        <tag>动态DP</tag>
      </tags>
  </entry>
  <entry>
    <title>「NOI2016」循环之美</title>
    <url>/2025/07/27/NOI2016-xun-huan-zhi-mei/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2085">「NOI2016」循环之美</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>设 $ k $ 进制下循环位数为 $ a $ ，则 $ xk^a \equiv x (\mod y) $ ，即 $ k^a \equiv 1 (\mod y) $ ，则 $ \gcd(k, y) &#x3D; 1 $ 。<br>$$<br>Ans &#x3D; \sum_{i &#x3D; 1}^{n}\sum_{j &#x3D; 1}^{m}[(i, j) &#x3D; 1][(j, k) &#x3D; 1]\\<br> &#x3D; \sum_{j &#x3D; 1}^{m}[(j, k) &#x3D; 1]\sum_{i &#x3D; 1}^{n}[(i, j) &#x3D; 1]\\<br> &#x3D; \sum_{j &#x3D; 1}^{m}[(j, k) &#x3D; 1]\sum_{i &#x3D; 1}^{n}\sum_{d | (i, j)}\mu(d)\\<br> &#x3D; \sum_{j &#x3D; 1}^{m}[(j, k) &#x3D; 1]\sum_{d | j}\mu(d)\lfloor \frac{n}{d} \rfloor\\<br> &#x3D; \sum_{d &#x3D; 1}^{\min(n, m)}\mu(d)\lfloor\frac{n}{d}\rfloor[(d, k) &#x3D; 1]\sum_{j &#x3D; 1}^{\lfloor \frac{m}{d} \rfloor} [(j, k) &#x3D; 1]\\<br> &#x3D; \sum_{d &#x3D; 1}^{\min(n, m)}\mu(d)\lfloor\frac{n}{d}\rfloor[(d, k) &#x3D; 1]\sum_{j &#x3D; 1}^{\lfloor \frac{m}{d} \rfloor} \sum_{i | (j, k)} \mu(i)\\<br> &#x3D; \sum_{d &#x3D; 1}^{\min(n, m)}\mu(d)\lfloor\frac{n}{d}\rfloor[(d, k) &#x3D; 1]\sum_{i| k} \lfloor \frac{m}{id} \rfloor .\\<br>f(n) &#x3D; \sum_{i| k} \lfloor \frac{m}{i} \rfloor ,\\<br>Ans &#x3D; \sum_{d &#x3D; 1}^{\min(n, m)}\mu(d)\lfloor\frac{n}{d}\rfloor[(d, k) &#x3D; 1] f(\lfloor \frac{m}{d} \rfloor)<br>$$<br>$ f(n) $ 可以枚举 $ k $ 的因数（$ k $ 很小）。<br>其中 $ \lfloor\frac{m}{d}\rfloor $ 和 $ \lfloor\frac{n}{d}\rfloor $ 可以整除分块。<br>$$<br>g(n, k) &#x3D; \sum_{i &#x3D; 1}^{n}\mu(i)[(i, k) &#x3D; 1]\\<br> &#x3D; \sum_{i &#x3D; 1}^{n}\mu(i)\sum_{j | (i, k)}\mu(j)\\<br> &#x3D; \sum_{i &#x3D; 1}^{n}\sum_{j | (i, k)}\mu(i)\mu(j)\\<br> &#x3D; \sum_{j | k}\mu(j)\sum_{i &#x3D; 1}^{\lfloor\frac{n}{j}\rfloor}\mu(ij)\\<br> &#x3D; \sum_{j | k}\mu(j)\sum_{i &#x3D; 1}^{\lfloor\frac{n}{j}\rfloor}\mu(ij)[(i, j) &#x3D; 1]\\<br> &#x3D; \sum_{j | k}\mu^2(j)\sum_{i &#x3D; 1}^{\lfloor\frac{n}{j}\rfloor}\mu(i)[(i, j) &#x3D; 1]\\<br> &#x3D; \sum_{j | k}\mu^2(j)g(\lfloor\frac{n}{j}\rfloor, j) .<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5000010</span>;</span><br><span class="line">ll n, m, k, d[N], ans = <span class="number">0</span>; <span class="type">int</span> ld = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; fac[<span class="number">2010</span>];</span><br><span class="line">ll mu[N], smu[N]; <span class="type">int</span> p[N], lp = <span class="number">0</span>; <span class="type">bool</span> pri[N];</span><br><span class="line">map&lt;ll, ll&gt; Smu, F[<span class="number">2010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(), pre = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; pre = c, c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = x * <span class="number">10ll</span> + (c ^ <span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(pre == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll x, ll y)</span> </span>&#123; <span class="keyword">return</span> y ? <span class="built_in">gcd</span>(y, x % y) : x; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, N - <span class="number">10</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!pri[i]) p[++lp] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; p[j] * i &lt;= N - <span class="number">10</span>; ++j) &#123;</span><br><span class="line">			pri[p[j] * i] = <span class="number">1</span>; <span class="keyword">if</span>(i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">			mu[p[j] * i] = -mu[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, N - <span class="number">10</span>) smu[i] = smu[i - <span class="number">1</span>] + mu[i];</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, k) <span class="keyword">if</span>(k % i == <span class="number">0</span>) d[++ld] = i;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">2000</span>) <span class="built_in">rep</span>(j, <span class="number">1</span>, i) <span class="keyword">if</span>(i % j == <span class="number">0</span>) fac[i].<span class="built_in">pb</span>(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= N - <span class="number">10</span>) <span class="keyword">return</span> smu[x]; <span class="keyword">if</span>(Smu.<span class="built_in">count</span>(x)) <span class="keyword">return</span> Smu[x];</span><br><span class="line">	ll sum = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll l = <span class="number">2</span>, r; l &lt;= x; l = r + <span class="number">1</span>) r = x / (x / l), sum -= (r - l + <span class="number">1</span>) * <span class="built_in">calc</span>(x / l);</span><br><span class="line">	<span class="keyword">return</span> Smu[x] = sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; <span class="number">2</span>) <span class="keyword">return</span> x; <span class="keyword">if</span>(y == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">calc</span>(x);</span><br><span class="line">	<span class="keyword">if</span>(F[y].<span class="built_in">count</span>(x)) <span class="keyword">return</span> F[y][x];</span><br><span class="line">	ll sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : fac[y]) <span class="keyword">if</span>(mu[v]) sum += <span class="built_in">f</span>(x / v, v);</span><br><span class="line">	<span class="keyword">return</span> F[y][x] = sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n), <span class="built_in">gi</span>(m), <span class="built_in">gi</span>(k), <span class="built_in">Sieve</span>();</span><br><span class="line">	<span class="keyword">for</span>(ll l = <span class="number">1</span>, r, sum; l &lt;= <span class="built_in">min</span>(n, m); l = r + <span class="number">1</span>) &#123;</span><br><span class="line">		r = <span class="built_in">min</span>(n / (n / l), m / (m / l)), sum = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, ld) sum += mu[d[j]] * (m / l / d[j]); sum *= (n / l);</span><br><span class="line">		ans += sum * (<span class="built_in">f</span>(r, k) - <span class="built_in">f</span>(l - <span class="number">1</span>, k));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>SAM练习题</title>
    <url>/2025/07/27/SAM-lian-xi-ti/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="常用结论："><a href="#常用结论：" class="headerlink" title="常用结论："></a>常用结论：</h3><ol>
<li>字符串border排序后可以分成O(log|s|)段，每段是一个等差数列。  </li>
<li>后缀树的 $ parent $ 树是原串反串的后缀树。</li>
</ol>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SAM</span> &#123;</span><br><span class="line">	<span class="type">int</span> ch[<span class="number">26</span>][N + N], fa[N + N], len[N + N], lst, sz, f[N + N];</span><br><span class="line">	<span class="type">int</span> sa[N + N], tex[N + N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) &#123;</span><br><span class="line">			fa[i] = len[i] = <span class="number">0</span>; <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; <span class="number">26</span>; j++) ch[j][i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		lst = sz = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> p = lst, np = ++sz; lst = np, len[np] = len[p] + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; !ch[c][p]; p = fa[p]) ch[c][p] = np;</span><br><span class="line">		<span class="keyword">if</span>(!p) fa[np] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> q = ch[c][p]; <span class="keyword">if</span>(len[q] == len[p] + <span class="number">1</span>) fa[np] = q;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="type">int</span> nq = ++sz;</span><br><span class="line">				len[nq] = len[p] + <span class="number">1</span>, fa[nq] = fa[q], fa[q] = fa[np] = nq;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) ch[i][nq] = ch[i][q];</span><br><span class="line">				<span class="keyword">for</span>(; ch[c][p] == q; p = fa[p]) ch[c][p] = nq;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) ++tex[len[i]];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) tex[i] += tex[i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) sa[tex[len[i]]--] = i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = sz, u; i; i--) u = sa[i], rt[fa[u]] = <span class="built_in">merge</span>(rt[fa[u]], rt[u]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><h4 id="模板-后缀自动机"><a href="#模板-后缀自动机" class="headerlink" title="模板 后缀自动机"></a>模板 后缀自动机</h4><p><a href="https://www.luogu.org/problemnew/show/P3804"> 模板 后缀自动机</a><br>题意：给定一个只包含小写字母的字符串 $ S $ , 请你求出 $ S $ 的所有出现次数不为 $ 1 $ 的子串的出现次数乘上该子串长度的最大值。<br>做法：建后缀自动机，定义每个节点 $ sz[i] &#x3D; 1 $，将所有串的拓扑序得到，从后往前枚举，每次 $ sz[fa[u]] +&#x3D; sz[u], ans &#x3D; Max(ans, len[u] * sz[u]) $。  </p>
<hr>
<h4 id="TJOI2015-弦论"><a href="#TJOI2015-弦论" class="headerlink" title="TJOI2015 弦论"></a>TJOI2015 弦论</h4><p><a href="https://www.luogu.org/problemnew/show/P3975">TJOI2015 弦论</a><br>题意：对于一个给定的长度为 $ n $ 的字符串,求出它的第k小子串是什么。<br>做法：建后缀自动机，定义每个节点 $ sz[i] &#x3D; 1 $，将所有串的拓扑序得到，从后往前枚举，每次 $ sz[fa[u]] +&#x3D; sz[u] (t &#x3D; 1), sz[u] &#x3D; 1 (t &#x3D; 0) $，再从前往后，每次 $ for (j; 0; 26) sum[u] +&#x3D; sum[ch[u][j]] $ ，从根节点按字典序 $ dfs $ ，得到答案。  </p>
<hr>
<h4 id="AHOI2013-差异"><a href="#AHOI2013-差异" class="headerlink" title="AHOI2013 差异"></a>AHOI2013 差异</h4><p><a href="https://www.luogu.org/problemnew/show/P4248">AHOI2013 差异</a><br>题意请看链接。<br>做法：求两个后缀的最长公共前缀，显然就是两个后缀的节点在 $ Parent $ 树上的 $ LCA $ 。以 $ p $ 为儿子的边的边权为 $ len[p]-len[fa[p]] $ ，我们考虑一条边对答案的贡献，显然就是有 $ sz[p] \times (n - sz[p] ) $ 条路径经过这条边，乘上边权加入答案即可。  </p>
<hr>
<h4 id="USACO17DEC-Standing-Out-from-the-Herd"><a href="#USACO17DEC-Standing-Out-from-the-Herd" class="headerlink" title="USACO17DEC Standing Out from the Herd"></a>USACO17DEC Standing Out from the Herd</h4><p><a href="https://www.luogu.org/problemnew/show/P4081">USACO17DEC Standing Out from the Herd</a><br>题意见链接。<br>做法：建出广义后缀自动机，再将每一个字符串每一个位置插入后缀自动机（节点权值加一），最后后缀自动机节点权值为一的点为独特点，它的贡献为它在 $ parent $ 树上的深度减去它的父亲在 $ parent $ 树上的深度。  </p>
<hr>
<h4 id="SCOI2012-喵星球上的点名"><a href="#SCOI2012-喵星球上的点名" class="headerlink" title="SCOI2012 喵星球上的点名"></a>SCOI2012 喵星球上的点名</h4><p><a href="https://www.luogu.org/problemnew/show/P2336">SCOI2012 喵星球上的点名</a><br>建出广义后缀自动机，建出 $ parent $ 树，显然一个串的贡献为它在 $ parent $ 树的子树大小。然后可以莫队处理。  </p>
<hr>
<h4 id="LCS-Longest-Common-Substring"><a href="#LCS-Longest-Common-Substring" class="headerlink" title="LCS - Longest Common Substring"></a>LCS - Longest Common Substring</h4><p><a href="https://www.luogu.org/problemnew/show/SP1811">LCS - Longest Common Substring</a><br>题意：给定两个字符串，求出它们的最长公共子串。<br>做法：给其中一个串建后缀自动机，另一个串分别与其匹配，再过程中对 $ len[u] $ 取 $ Max $ 即可。  </p>
<hr>
<h4 id="ZJOI2015-诸神眷顾的幻想乡"><a href="#ZJOI2015-诸神眷顾的幻想乡" class="headerlink" title="ZJOI2015 诸神眷顾的幻想乡"></a>ZJOI2015 诸神眷顾的幻想乡</h4><p><a href="https://www.luogu.org/problemnew/show/P3346"> ZJOI2015 诸神眷顾的幻想乡</a><br>题意：给出一个字母树，任何一条从叶子开始的有向路径为一个字符串，询问不同的字符串个数。<br>做法：将每个叶子节点定位根 $ dfs $ ，建广义后缀自动机，对于每个节点，对答案的贡献为 $ len[u] - len[fa[u]] $。  </p>
<hr>
<h4 id="CF235C-Cyclical-Quest"><a href="#CF235C-Cyclical-Quest" class="headerlink" title="CF235C Cyclical Quest"></a>CF235C Cyclical Quest</h4><p><a href="http://codeforces.com/problemset/problem/235/C">CF235C Cyclical Quest</a><br>题意：给一个主串和多个询问串，求询问串的所有样子不同的周期同构出现次数和。<br>做法：给主串建后缀自动机，拓扑排序计算主串的某个子串出现次数。对于每个询问，将询问串倍长（最后一个串不复制），然后在自动机上跑，若匹配长度大于等于原询问串长度且是为访问过的状态，则答案加上该子串出现次数。  </p>
<hr>
<h4 id="LCS2-Longest-Common-Substring-II"><a href="#LCS2-Longest-Common-Substring-II" class="headerlink" title="LCS2 - Longest Common Substring II"></a>LCS2 - Longest Common Substring II</h4><p><a href="https://www.spoj.com/problems/LCS2/">LCS2 - Longest Common Substring II</a><br>题意：给定一些字符串，求出它们的最长公共子串。<br>做法：给其中一个串建后缀自动机，其他串分别与其匹配，记录自动机上每个节点能匹配的最长长度，取 $ Max $ 即可。  </p>
<hr>
<h4 id="SDOI2016-生成魔咒"><a href="#SDOI2016-生成魔咒" class="headerlink" title="SDOI2016 生成魔咒"></a>SDOI2016 生成魔咒</h4><p><a href="https://www.luogu.org/problemnew/show/P4070"> SDOI2016 生成魔咒</a><br>题意：每次再字符串末尾新加入一个字符（数字），并求当前字符串中本质不同的字串的的个数。<br>做法：考虑建 $ SAM $ 的过程是在线的，每次增加的贡献为 $len[np] - len[fa[np]]$。  </p>
<hr>
<h4 id="NOI2015-品酒大会"><a href="#NOI2015-品酒大会" class="headerlink" title="NOI2015 品酒大会"></a>NOI2015 品酒大会</h4><p><a href="https://www.luogu.org/problemnew/show/P2178"> NOI2015 品酒大会</a><br><a href="http://uoj.ac/problem/131">强力的HACK数据</a>  </p>
<p>题意： $ \forall i \in [0, n) $ ，求有多少对后缀满足 $ len(lcp) \geq i $ ， 并求出两个后缀的权值乘积的最大值。<br>做法：将串倒着建后缀自动机，使 $ lcs $ 变成 $ lcp $ ，然后构造 $ parent $ 树，便可以从孩子里得到信息，计数问题转移显然。由于数据存在负数，所以可能负负得正得到最优解。记录一个节点子树中最大值、最小值、次大值、次小值，然后转移。当然还有许多细节（交UOJ就知道了）。  </p>
<hr>
<h4 id="「雅礼集训-2017-Day7」事情的相似度"><a href="#「雅礼集训-2017-Day7」事情的相似度" class="headerlink" title="「雅礼集训 2017 Day7」事情的相似度"></a>「雅礼集训 2017 Day7」事情的相似度</h4><p><a href="https://loj.ac/problem/6041">「雅礼集训 2017 Day7」事情的相似度</a><br>题意：给你一个长度为 $ n $ 的01串，$ m $ 次询问，每次询问给出 $ l $ 、$ r $ ，求从 $ [l,r] $ 中选出两个不同的前缀的最长公共后缀长度的最大值。 $ n,m \leq 10^5 $<br>做法：建后缀自动机，那么任意两个前缀的最长公共后缀即为parent树上的LCA深度。将询问离线，按右端点排序，每次加入一个前缀，就将他们在parent树上到根节点的路径打上他们的标记。access时，若遇到了以前打的标记，则该节点为旧标记与新标记的lca。将贡献计入树状数组（维护前缀最大值）并将旧覆盖。  </p>
<hr>
<h4 id="「雅礼集训-2017-Day1」字符串"><a href="#「雅礼集训-2017-Day1」字符串" class="headerlink" title="「雅礼集训 2017 Day1」字符串"></a>「雅礼集训 2017 Day1」字符串</h4><p><a href="https://loj.ac/problem/6031">「雅礼集训 2017 Day1」字符串</a><br>题意：先给你一个模式串，然后再给出若干个询问区间（即接下来询问的子串位置）。接着有q次询问，给出若干个相同长度的字符串以及l, r，让你分别求出第l个询问区间到第r个询问区间在模式串中出现次数之和（下标从0开始计算）。<br>做法：<br>显然的暴力做法是将模式串建后缀自动机后询问无脑匹配。<br>然后这道题很奇怪的一点是询问次数乘上询问串长度不大于100000。<br>假如询问串长度比较小，就用一个二维动态数组存储询问串下标确定时有哪些询问区间编号。每次询问枚举询问串左右下标在自动机上跑判断是否合法，然后在用lower_bound找出用到的询问区间个数，然后询问串长度不大于 $ \sqrt {100000} $ 的就过了，实测至少60分。<br>假如询问很少，我们就对每个询问串，在自动机上跑，预处理每个节点在parent树上的位置及能往前匹配的最长长度，然后暴力枚举用到的询问区间，先判断合法，然后在倍增到这个询问区间的长度，然后就过了。<br>话说这道题可以拆成两部分的性质真的不太明显。</p>
<hr>
]]></content>
      <tags>
        <tag>字符串</tag>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>PT07D - Let us count 1 2 3</title>
    <url>/2025/07/27/PT07D%20-%20Let%20us%20count%201%202%203/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.spoj.com/problems/PT07D/en/">PT07D - Let us count 1 2 3」PATH</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$ k &#x3D; 1 $ ： 树的 $ Prufer $ 序列个数为 $ n^{n - 2} $ 。<br>$ k &#x3D; 2 $ ： 树的 $ Prufer $ 序列选一个为根， $ n^{n - 1} $ 。<br>$ k &#x3D; 3 $ ：<br>令 $ f_i $ 为节点数为 $ i $ 时无标号有根树的方案数，生成函数为 $ F(x) &#x3D; \sum f_i x^i $ 。<br>考虑到一棵无标号有根树可以看做一个无标号有根森林加一个根组成，而一种大小为 $ k $ 的子树贡献用生成函数表示为 $ \sum x^{ki} &#x3D; (1 - x^k)^{-1} $ ，一共有 $ f_k $ 种，即 $ (1 - x^k)^{-f_k} $ ，则：<br>$$<br>F(x) &#x3D; x \prod_{k &gt; 0} (1 - x^k)^{-f_k}<br>$$<br>两边取 $ \ln $ 并求导得：<br>$$<br>\frac{F’(x)}{F(x)} &#x3D; \frac{1}{x} + \sum_{k &gt; 0} k f_k \frac{x^{k - 1}}{1 - x^k}\\<br>x F’(x) &#x3D; F(x) + (\sum_{k &gt; 0} k f_k \frac{x^{k - 1}}{1 - x^k})F(x)\\<br>n f_n &#x3D; f_n + \sum_{i &gt; 0} f_i \sum_{k | n - i} k f_k<br>$$<br>可以 $ O(n^2) $ 算出 $ f_n $ 。<br>$ k &#x3D; 4 $ ：<br>考虑怎么唯一表示一棵树，我们可以用重心表示，所以把根不是重心的都减去。 一个根不为重心，那么有且仅有一个子树大小大于 $ \frac{n}{2} $ ：<br>$$<br>ans &#x3D; f_n - \sum_{i &#x3D; 1}^{\frac{n}{2}} f_i f_{n - i}\\<br>ans +&#x3D; f_{\frac{n}{2}} f_{\frac{n}{2}} - f_{\frac{n}{2}}(f_{\frac{n}{2}} - 1) &#x2F; 2<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> k, n, p;</span><br><span class="line"><span class="type">int</span> f[<span class="number">10010</span>], g[<span class="number">10010</span>], h[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = p - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> w = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % p) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = w * x % p;</span><br><span class="line">	<span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	f[<span class="number">1</span>] = <span class="number">1</span>; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) g[i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		f[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++) f[i] = (f[i] + f[j] * g[i - j]) % p;</span><br><span class="line">		f[i] = f[i] * <span class="built_in">ksm</span>(i - <span class="number">1</span>, p - <span class="number">2</span>) % p;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = i, t = i * f[i] % p; j &lt;= n; j += i) g[j] = (g[j] + t) % p;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">solve1</span>(); <span class="type">int</span> inv2 = (p + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = (i - <span class="number">1</span>) / <span class="number">2</span>; j; j--) cnt = (cnt + f[j] * f[i - j]) % p;</span><br><span class="line">		<span class="keyword">if</span>(!(i &amp; <span class="number">1</span>)) cnt = (cnt + (ll)f[i / <span class="number">2</span>] * (f[i / <span class="number">2</span>] - <span class="number">1</span>) * inv2 % p) % p;</span><br><span class="line">		h[i] = (f[i] - cnt + p) % p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, h[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;k, &amp;n, &amp;p) != EOF;) &#123;</span><br><span class="line">		<span class="keyword">if</span>(k == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n == <span class="number">1</span> ? <span class="number">1</span> : <span class="built_in">ksm</span>(n % p, n - <span class="number">2</span>));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ksm</span>(n % p, n - <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">3</span>) <span class="built_in">solve1</span>(), <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[n]);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">solve2</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>【NOIP2012】疫情控制</title>
    <url>/2025/07/27/NOIP2012-yi-qing-kong-zhi/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2607">【NOIP2012】疫情控制</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>这道题显然可以二分答案。<br>考虑构造解。对于每个军队，当它不能到达首都时，它的深度显然越小越好。对于可以到达首都的军队，它有两种决策：退回上一个位置、去填补其他子树的最上面节点。可以用倍增维护。<br>考虑一种特殊数据：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 5</span><br><span class="line">1 3 2</span><br><span class="line">1 4 5</span><br><span class="line">4 5 1000000000</span><br><span class="line">3 3 4 5</span><br></pre></td></tr></table></figure>

<p>它的构造方案是 $ 5 \to 5, 4 \to 3, 3 \to 2 $ ，答案是 $ 7 $ 。<br>考虑一个能到达根节点的军队（从 $ root $ 的儿子 $ x $ 来），若它的步数还能回到上一个位置（并非时光倒流），则直接将它放在根节点考虑没有影响；否则它要么去一个 $ dis(root, x) \geq dis(root, y), y \in son(root) $ 的地方，要么待在 $ x $ 。这部分可以用 $ multiset $ 维护。<br>最后贪心地从首都分配军队。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>;</span><br><span class="line"><span class="type">int</span> n, m, cnt[N],fa[<span class="number">19</span>][N], fr[N], flag[N]; ll ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">	<span class="type">int</span> to; ll w; <span class="built_in">P</span>(<span class="type">int</span> To = <span class="number">0</span>, ll W = <span class="number">0</span>) : <span class="built_in">to</span>(To), <span class="built_in">w</span>(W) &#123;&#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> P &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> w &gt; yy.w; &#125;</span><br><span class="line">&#125;; vector&lt;P&gt; e[N];</span><br><span class="line">ll depw[N];</span><br><span class="line">ll a[N], b[N]; <span class="type">int</span> la, lb;</span><br><span class="line">vector&lt;ll&gt; hv[N];</span><br><span class="line">multiset&lt;ll&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(), pre = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; pre = c, c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = <span class="number">10ll</span> * x + (c ^ <span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(pre == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> anc)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ff == <span class="number">1</span>) anc = u; fr[u] = anc, fa[<span class="number">0</span>][u] = ff;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">18</span>) fa[i][u] = fa[i - <span class="number">1</span>][fa[i - <span class="number">1</span>][u]];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v.to != ff) depw[v.to] = depw[u] + v.w, <span class="built_in">dfs</span>(v.to, u, anc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(flag[u] || e[u].<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>, now = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v.to != ff) ++cnt, <span class="built_in">solve</span>(v.to, u), now += flag[v.to];</span><br><span class="line">	<span class="keyword">if</span>(cnt == now) flag[u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	la = lb = <span class="number">0</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, n) flag[i] = <span class="number">0</span>, hv[i].<span class="built_in">clear</span>(); st.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">if</span>(cnt[<span class="number">1</span>]) &#123; <span class="built_in">rep</span>(i, <span class="number">1</span>, cnt[<span class="number">1</span>]) a[++la] = x; &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) <span class="keyword">if</span>(cnt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(depw[i] &lt;= x)</span><br><span class="line">			<span class="built_in">rep</span>(j, <span class="number">1</span>, cnt[i]) &#123;</span><br><span class="line">				<span class="keyword">if</span>(depw[fr[i]] &lt;= x - depw[i]) a[++la] = x - depw[i];</span><br><span class="line">				<span class="keyword">else</span> hv[fr[i]].<span class="built_in">pb</span>(x - depw[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> anc = i; ll tmp = x;</span><br><span class="line">			<span class="built_in">per</span>(j, <span class="number">18</span>, <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">if</span>(fa[j][anc] &amp;&amp; depw[anc] - depw[fa[j][anc]] &lt;= tmp)</span><br><span class="line">					tmp -= depw[anc] - depw[fa[j][anc]], anc = fa[j][anc];</span><br><span class="line">			flag[anc] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[<span class="number">1</span>]) &#123;</span><br><span class="line">		<span class="built_in">solve</span>(v.to, <span class="number">1</span>), <span class="built_in">sort</span>(hv[v.to].<span class="built_in">begin</span>(), hv[v.to].<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;ll&gt;());</span><br><span class="line">		<span class="keyword">if</span>(!flag[v.to]) &#123;</span><br><span class="line">			multiset&lt;ll&gt;::iterator it = st.<span class="built_in">lower_bound</span>(v.w);</span><br><span class="line">			<span class="keyword">if</span>(it != st.<span class="built_in">end</span>() &amp;&amp; (!hv[v.to].<span class="built_in">size</span>() || *it &lt;= hv[v.to].<span class="built_in">back</span>()))</span><br><span class="line">				st.<span class="built_in">erase</span>(it), flag[v.to] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(hv[v.to].<span class="built_in">size</span>()) hv[v.to].<span class="built_in">pop_back</span>(), flag[v.to] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i : hv[v.to]) st.<span class="built_in">insert</span>(i); <span class="keyword">if</span>(!flag[v.to]) b[++lb] = v.w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + la + <span class="number">1</span>), <span class="built_in">sort</span>(b + <span class="number">1</span>, b + lb + <span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> p1 = <span class="number">1</span>, p2 = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(; p1 &lt;= la &amp;&amp; p2 &lt;= lb; ++p1, ++p2) &#123;</span><br><span class="line">		<span class="keyword">for</span>(; p1 &lt;= la &amp;&amp; a[p1] &lt; b[p2]; ++p1);</span><br><span class="line">		<span class="keyword">if</span>(p1 &gt; la) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p2 &gt; lb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y, z; <span class="built_in">gi</span>(x), <span class="built_in">gi</span>(y), <span class="built_in">gi</span>(z), e[x].<span class="built_in">pb</span>(<span class="built_in">P</span>(y, z)), e[y].<span class="built_in">pb</span>(<span class="built_in">P</span>(x, z)); &#125;</span><br><span class="line">	<span class="built_in">sort</span>(e[<span class="number">1</span>].<span class="built_in">begin</span>(), e[<span class="number">1</span>].<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">gi</span>(m); <span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123; <span class="type">int</span> x; <span class="built_in">gi</span>(x), ++cnt[x]; &#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	ll l = <span class="number">0</span>, r = <span class="number">1e16</span>, mid;</span><br><span class="line">	<span class="keyword">for</span>(; l &lt;= r;) mid = (l + r) / <span class="number">2</span>, <span class="built_in">check</span>(mid) ? (ans = mid, r = mid - <span class="number">1</span>) : l = mid + <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>「SNOI2017」遗失的答案</title>
    <url>/2025/07/27/SNOI2017-yi-shi-de-da-an/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2257">「SNOI2017」遗失的答案</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>先判断有无解（ $ L \mod G &#x3D; 0 $ ），然后将 $ n &#x2F;&#x3D; G, L &#x2F;&#x3D; G $ 。<br>由于 $ n \leq 1e8 $ ，所以每个数最多有 $ 8 $ 个不同的质因数。<br>令 $ L &#x3D; p_{1}^{a_1}p_{2}^{a_2} \dots p_{t}^{a_t} $ ，则素数 $ p_i $ 的指数上界为 $ a_i $ 。<br>由题意得对于每个质因数所选的数既有恰好达到上界，由于恰好为下界的。由于状态数为 $ 16 $ ，所以可以状压。<br>可以通过 $ dfs $ 处理出所有 $ x $ 使得 $ x \leq n $ 且 $ x &#x3D; p_{1}^{b_1}p_{2}^{b_2} \dots p_{t}^{b_t} (b_i \leq a_i) $ ，然后将 $ x $ 分类统计。<br>于是问题转化为给出一个集合，求或为全集的方案数。<br>设 $ f_s $ 表示或为 $ s $ 的方案数。<br>设 $ g_s &#x3D; \sum_{i \in s} f_i &#x3D; 2^{cnt_s} - 1 $ 表示或为 $ s $ 子集的方案数。<br>容斥得 $ f_s &#x3D; \sum_{i \in s} (-1)^{|s| - |i|} g_i $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, L, G, m, mx;</span><br><span class="line"><span class="type">int</span> p[<span class="number">20</span>], lp, cnt[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> ba[N], g[N], sz[N];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (ll)x * y % mod; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> state, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(w &gt; n) <span class="keyword">return</span> ; <span class="keyword">if</span>(u &gt; lp) &#123; ++g[state]; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="built_in">dfs</span>(u + <span class="number">1</span>, state | (<span class="number">1</span> &lt;&lt; u - <span class="number">1</span>), w);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, cnt[u] - <span class="number">1</span>) w *= p[u], <span class="built_in">dfs</span>(u + <span class="number">1</span>, state, w);</span><br><span class="line">	<span class="built_in">dfs</span>(u + <span class="number">1</span>, state | (<span class="number">1</span> &lt;&lt; u + lp - <span class="number">1</span>), w * p[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> state)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, mx) &#123;</span><br><span class="line">		<span class="keyword">if</span>((state &amp; i) != state) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(sz[i] &amp; <span class="number">1</span>) res = <span class="built_in">sub</span>(res, ba[g[i] - <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">else</span> res = <span class="built_in">add</span>(res, ba[g[i] - <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;G, &amp;L, &amp;m);</span><br><span class="line">	<span class="keyword">if</span>(L % G) &#123; <span class="keyword">for</span>(; m; --m, <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>)); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	L /= G, n /= G; ll tt = L;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= tt; i++) <span class="keyword">if</span>(tt % i == <span class="number">0</span>) &#123;</span><br><span class="line">		p[++lp] = i; <span class="keyword">for</span>(; tt % i == <span class="number">0</span>; tt /= i) ++cnt[lp];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tt &gt; <span class="number">1</span>) p[++lp] = tt, ++cnt[lp];</span><br><span class="line">	mx = (<span class="number">1</span> &lt;&lt; lp + lp) - <span class="number">1</span>, <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, lp + lp) <span class="built_in">rep</span>(j, <span class="number">0</span>, mx)</span><br><span class="line">		<span class="keyword">if</span>(j &amp; (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>)) g[j] += g[j ^ (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>)];</span><br><span class="line">	ba[<span class="number">0</span>] = <span class="number">1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, g[mx]) ba[i] = <span class="built_in">add</span>(ba[i - <span class="number">1</span>], ba[i - <span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, mx) sz[i] = sz[i &gt;&gt; <span class="number">1</span>] + (i &amp; <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x; m; --m) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); <span class="keyword">if</span>(x % G) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">		x /= G; <span class="keyword">if</span>(L % x || x &gt; n) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">		<span class="keyword">if</span>(ans.<span class="built_in">find</span>(x) != ans.<span class="built_in">end</span>()) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[x]); <span class="keyword">continue</span>; &#125;</span><br><span class="line">		<span class="type">int</span> state = <span class="number">0</span>, t = <span class="number">0</span>, tmp = x;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lp; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(; x % p[i] == <span class="number">0</span>; x /= p[i], ++t);</span><br><span class="line">			<span class="keyword">if</span>(!t) state |= (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span>(t == cnt[i]) state |= (<span class="number">1</span> &lt;&lt; i + lp - <span class="number">1</span>);</span><br><span class="line">			t = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[tmp] = <span class="built_in">calc</span>(state));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>【SDOI2019】世界地图</title>
    <url>/2025/07/27/SDOI2019-shi-jie-di-tu/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/3112">【SDOI2019】世界地图</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>因为 $ n $ 很小，所以问题可以从 $ n $ 入手。<br>发现询问不会删除第一列和最后一列，那么最后的结果为合并地图 $ [1, l_i - 1] $ 和 $ [r_i + 1, m] $ 的 $ MST $ 得到的 $ MST $ 大小。所以预处理只要求地图前缀&#x2F;后缀 $ MST $ 即可。<br>考虑如何合并两个相邻的 $ MST $ 。发现合并这两个 $ MST $ 只有最前和最后两列的点会产生连接的关系，所以每个 $ MST $ 只要记录两端的点构成的虚树（虚树边权为两点之间路径的最大值），然后再用 $ Kruskal $ 建最小生成树即可。<br>时间复杂度 $ O(n(m + q) \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20010</span>, M = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> n, m, lim, q;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> SA, SB, SC;</span><br><span class="line"><span class="type">int</span> rht[N][M], dwn[N][M];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y, w;</span><br><span class="line">	<span class="built_in">Edge</span>(<span class="type">int</span> X, <span class="type">int</span> Y, <span class="type">int</span> W) : <span class="built_in">x</span>(X), <span class="built_in">y</span>(Y), <span class="built_in">w</span>(W) &#123;&#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> w &lt; yy.w; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tot, fa[N], flag[N]; vector&lt;Edge&gt; e; ll ad;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>, hed[N], to[N], nxt[N], val[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MST</span> &#123;</span><br><span class="line">	<span class="type">int</span> tot; ll sum; vector&lt;Edge&gt; e; <span class="built_in">MST</span>() &#123;&#125;</span><br><span class="line">	<span class="built_in">MST</span>(<span class="type">int</span> *ar) &#123;</span><br><span class="line">		tot = n, sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) e.<span class="built_in">pb</span>(<span class="built_in">Edge</span>(i, i + <span class="number">1</span>, ar[i]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">qry</span><span class="params">()</span> </span>&#123; ll ss = sum; <span class="keyword">for</span>(<span class="keyword">auto</span> v : e) ss += v.w; <span class="keyword">return</span> ss; &#125;</span><br><span class="line">&#125;; MST pre[N], suf[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	SA ^= SA &lt;&lt; <span class="number">16</span>, SA ^= SA &gt;&gt; <span class="number">5</span>, SA ^= SA &lt;&lt; <span class="number">1</span>; <span class="type">unsigned</span> <span class="type">int</span> t = SA;</span><br><span class="line">	SA = SB, SB = SC, SC ^= t ^ SA; <span class="keyword">return</span> SC % lim + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%u%u%u%d&quot;</span>, &amp;n, &amp;m, &amp;SA, &amp;SB, &amp;SC, &amp;lim);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) rht[j][i] = <span class="built_in">gi</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) dwn[j][i] = <span class="built_in">gi</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lnk</span><span class="params">(<span class="type">const</span> Edge &amp;x)</span> </span>&#123;</span><br><span class="line">	to[++cnt] = x.y, val[cnt] = x.w, nxt[cnt] = hed[x.x], hed[x.x] = cnt;</span><br><span class="line">	to[++cnt] = x.x, val[cnt] = x.w, nxt[cnt] = hed[x.y], hed[x.y] = cnt;</span><br><span class="line">	ad += x.w, fa[<span class="built_in">find</span>(x.x)] = <span class="built_in">find</span>(x.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] != ff) ss += <span class="built_in">dfs1</span>(to[i], u);</span><br><span class="line">	<span class="keyword">if</span>(ss &gt;= <span class="number">2</span>) flag[u] = <span class="number">1</span>; ss += flag[u]; <span class="keyword">return</span> ss &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> lst, <span class="type">int</span> ww)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(flag[u]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(lst) e.<span class="built_in">pb</span>(<span class="built_in">Edge</span>(flag[u], lst, ww));</span><br><span class="line">		lst = flag[u], ad -= ww, ww = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i])</span><br><span class="line">		<span class="keyword">if</span>(to[i] != ff) <span class="built_in">dfs2</span>(to[i], u, lst, <span class="built_in">Max</span>(ww, val[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">MST <span class="title">merge</span><span class="params">(<span class="type">const</span> MST &amp;x, <span class="type">const</span> MST &amp;y, <span class="type">int</span> *ar)</span> </span>&#123;</span><br><span class="line">	tot = x.tot + y.tot, e.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : x.e) e.<span class="built_in">pb</span>(v);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : y.e) e.<span class="built_in">pb</span>(<span class="built_in">Edge</span>(v.x + x.tot, v.y + x.tot, v.w));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		e.<span class="built_in">pb</span>(<span class="built_in">Edge</span>(x.tot - n + i, x.tot + i, ar[i]));</span><br><span class="line">	<span class="built_in">sort</span>(e.<span class="built_in">begin</span>(), e.<span class="built_in">end</span>()), cnt = <span class="number">0</span>, ad = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</span><br><span class="line">		fa[i] = i, flag[i] = (i &lt;= n || i &gt; tot - n), hed[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e) <span class="keyword">if</span>(<span class="built_in">find</span>(v.x) != <span class="built_in">find</span>(v.y)) <span class="built_in">lnk</span>(v);</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) <span class="keyword">if</span>(flag[i]) flag[i] = ++cnt;</span><br><span class="line">	e.<span class="built_in">clear</span>(), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	MST res; res.tot = cnt, res.e = e, res.sum = x.sum + y.sum + ad;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gen</span>();</span><br><span class="line">	pre[<span class="number">1</span>] = <span class="built_in">MST</span>(dwn[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; m; i++)</span><br><span class="line">		pre[i] = <span class="built_in">merge</span>(pre[i - <span class="number">1</span>], <span class="built_in">MST</span>(dwn[i]), rht[i - <span class="number">1</span>]);</span><br><span class="line">	suf[m] = <span class="built_in">MST</span>(dwn[m]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = m - <span class="number">1</span>; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">		suf[i] = <span class="built_in">merge</span>(<span class="built_in">MST</span>(dwn[i]), suf[i + <span class="number">1</span>], rht[i]);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> l, r; q; --q) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">merge</span>(suf[r + <span class="number">1</span>], pre[l - <span class="number">1</span>], rht[m]).<span class="built_in">qry</span>());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>虚树</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>「SHOI2016」成绩比较</title>
    <url>/2025/07/27/SHOI2016-cheng-ji-bi-jiao/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2026">「SHOI2016」成绩比较</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>设 $ val_i $ 表示第 $ i $ 门课分数分配的方案数。<br>$ f_{i, j} $ 表示前 i 门课 B神 吊打 j 人的方案数。  </p>
<p>$$<br>f_{i, j} &#x3D; \sum_{i &#x3D; j}^{n} f_{i - 1, k} \binom{k}{j}\binom{n - k - 1}{rank_i - 1 - (k - j)}val_i<br>$$</p>
<p>即从原来吊打 k 个人减为 j 个人（k 里选 j 个），再从剩下的人中选一些排在他前面。  </p>
<p>$$<br>val_i &#x3D; \sum_{j &#x3D; 1}^{mx_i} j^{n - rank_i}(mx_i - j)^{rank_i - 1}<br>$$</p>
<p><del>感性理解</del>发现这个式子可以被描述成关于 $ mx_i $ 的 n 次多项式。<br>拉格朗日插值即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, mx[N], rnk[N], pw[N][N];</span><br><span class="line"><span class="type">int</span> f[N][N], c[N][N];</span><br><span class="line"><span class="type">int</span> val[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &lt; y) ? <span class="number">0</span> : c[x][y]; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> w = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="number">1ll</span> * x * x % mod) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="number">1ll</span> * x * w % mod; <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(mx[x] &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, mx[x]) res = (res + <span class="number">1ll</span> * pw[i][n - rnk[x]] * pw[mx[x] - i][rnk[x] - <span class="number">1</span>]) % mod;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line">		val[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, i) val[i] = (val[i] + <span class="number">1ll</span> * pw[j][n - rnk[x]] * pw[i - j][rnk[x] - <span class="number">1</span>]) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="type">int</span> mu1 = <span class="number">1</span>, mu2 = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n + <span class="number">1</span>) <span class="keyword">if</span>(j != i) &#123;</span><br><span class="line">			mu1 = <span class="number">1ll</span> * mu1 * (mod + mx[x] - j) % mod;</span><br><span class="line">			mu2 = <span class="number">1ll</span> * mu2 * (mod + i - j) % mod;</span><br><span class="line">		&#125;</span><br><span class="line">		res = (res + <span class="number">1ll</span> * mu1 * <span class="built_in">ksm</span>(mu2) % mod * val[i]) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	c[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">200</span>) &#123; c[i][<span class="number">0</span>] = <span class="number">1</span>; <span class="built_in">rep</span>(j, <span class="number">1</span>, i) c[i][j] = (c[i - <span class="number">1</span>][j - <span class="number">1</span>] + c[i - <span class="number">1</span>][j]) % mod; &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, <span class="number">200</span>) &#123; pw[i][<span class="number">0</span>] = <span class="number">1</span>; <span class="built_in">rep</span>(j, <span class="number">1</span>, <span class="number">200</span>) pw[i][j] = <span class="number">1ll</span> * pw[i][j - <span class="number">1</span>] * i % mod; &#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;mx[i]);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;rnk[i]);</span><br><span class="line">	f[<span class="number">0</span>][n - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">		<span class="type">int</span> mu = <span class="built_in">solve</span>(i);</span><br><span class="line">		<span class="built_in">rep</span>(j, k, n - <span class="number">1</span>) <span class="built_in">rep</span>(k, j, n - <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="type">int</span> w = <span class="number">1ll</span> * <span class="built_in">C</span>(k, j) * <span class="built_in">C</span>(n - k - <span class="number">1</span>, rnk[i] - <span class="number">1</span> - (k - j)) % mod * f[i - <span class="number">1</span>][k] % mod;</span><br><span class="line">			f[i][j] = (f[i][j] + <span class="number">1ll</span> * mu * w) % mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[m][k]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
        <tag>插值</tag>
      </tags>
  </entry>
  <entry>
    <title>「THUPC 2017」小 L 的计算题</title>
    <url>/2025/07/27/THUPC-2017-xiao-L-de-ji-suan-ti/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2409">「THUPC 2017」小 L 的计算题」PATH</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$$<br>f(k) &#x3D; \sum_k (\sum_{i &#x3D; 1}^{n} a_i^k) x^k\\<br> &#x3D; \sum_k \sum_{i &#x3D; 1}^{n} (a_ix)^k\\<br> &#x3D; \sum_{i &#x3D; 1}^{n} \sum_k (a_ix)^k\\<br> &#x3D; \sum_{i &#x3D; 1}^{n} \frac{1}{1 - a_ix}\\<br> &#x3D; \sum_{i &#x3D; 1}^{n} (1 - \frac{-a_ix}{1-a_ix})\\<br> &#x3D; n - \sum_{i &#x3D; 1}^{n} \frac{-a_ix}{1-a_ix}\\<br> &#x3D; n - x \sum_{i &#x3D; 1}^{n} \ln’(1 - a_ix)\\<br> &#x3D; n - x \ln’(\prod_{i &#x3D; 1}^{n} (1 - a_ix))<br>$$</p>
<p>分治FFT + 多项式求 Ln 即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> w = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="built_in">mul</span>(w, x); <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> w = <span class="number">1</span>; <span class="keyword">for</span>(; w &lt;= x; w &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> w; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; mid; i++) w[i] = <span class="built_in">mul</span>(w[i - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> mu = <span class="built_in">ksm</span>(lmt), i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], mu);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = a.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(a[<span class="number">0</span>])), res;</span><br><span class="line">		res = <span class="built_in">Inv</span>(a, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(a.begin(), a.begin() + sz)</span></span>;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ln</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; f, g = <span class="built_in">Inv</span>(a); f.<span class="built_in">resize</span>(a.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; f.<span class="built_in">size</span>(); i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, a[i]);</span><br><span class="line">		f[f.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="number">0</span>, f = <span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(a.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = f.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) f[i] = <span class="built_in">mul</span>(f[i - <span class="number">1</span>], <span class="built_in">ksm</span>(i));</span><br><span class="line">		f[<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> f;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> T, n, a[N], ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f, g;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res.<span class="built_in">pb</span>(<span class="built_in">sub</span>(<span class="number">0</span>, a[l])), res;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="keyword">return</span> Poly::<span class="built_in">Mul</span>(<span class="built_in">solve</span>(l, mid), <span class="built_in">solve</span>(mid + <span class="number">1</span>, r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T); T; --T) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); <span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] %= mod;</span><br><span class="line">		f = Poly::<span class="built_in">Ln</span>(<span class="built_in">solve</span>(<span class="number">1</span>, n));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, ed = f.<span class="built_in">size</span>(); i &lt; ed; i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, f[i]);</span><br><span class="line">		<span class="built_in">per</span>(i, n, <span class="number">1</span>) f[i] = f[i - <span class="number">1</span>];</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">0</span>, n) f[i] = <span class="built_in">sub</span>(<span class="number">0</span>, f[i]);</span><br><span class="line">		f[<span class="number">0</span>] = <span class="built_in">add</span>(f[<span class="number">0</span>], n), ans = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, n) ans ^= f[i]; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>一句（dui）话题解1</title>
    <url>/2025/07/27/a-solution-to-a-question1/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />
    <label for="pass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>口胡</tag>
      </tags>
  </entry>
  <entry>
    <title>【UOJ401】【CTSC2018】青蕈领主</title>
    <url>/2025/07/27/UOJ401-CTSC2018-qing-gao-ling-zhu/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://uoj.ac/problem/401">【UOJ401】【CTSC2018】青蕈领主</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>参考自<a href="http://www.cnblogs.com/CHNJZ/p/10554019.html">这篇文章</a>。<br>最长连续序列不能相交，那么只有包含关系。<br>那么我们可以根据区间的包含关系建出一棵以 $ n $ 为根的树，用 $ dis[i] $ 表示节点 $ i $ 的儿子个数。<br>因为连续的区间可以看成一个点，所以每个节点的贡献可以分别考虑。<br>设 $ f[i] $ 为长度为 $ i $ 且有多少个长度为 $ i + 1 $ 的连续序列，删去最大数后不存在长度超过 $ 1 $ 的连续序列，答案为 $ \prod { f[dis[i]] } $ 。<br>若 $ f[i] $ 如果从合法方案转来，只要最后一个数不等于 $ i $ 即可，方案数为 $ (i − 1) \times f[i − 1] $ 。<br>否则，那么不满足的区间只有有一个，长度设为 $ l $ ，把最大值插入形成合法区间的方案数为 $ f[l] $ ,把插入后的区间看成一个点，与剩下的点的方案数为 $ f[i − l] $ ；若要保证有解，那么这个区间的范围一定在 $ [2,i − l] $ ，所以得到：<br>$$ f[i] &#x3D; (i - 1) \times f[i - 1] + \sum_{l &#x3D; 2}^{i - 2}{(i - l - 1) \times f[i]f[i - l]} $$<br>分治 $ FFT $ 即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, ilmt = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++)</span><br><span class="line">				A[i] = <span class="built_in">mul</span>(A[i], ilmt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>), B.<span class="built_in">resize</span>(lmt + <span class="number">5</span>), <span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>;</span><br><span class="line"><span class="type">int</span> T, n;</span><br><span class="line"><span class="type">int</span> a[N], dis[N], sta[N], top = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">		<span class="keyword">if</span>(l == <span class="number">2</span>) f[l] = <span class="number">2</span>; <span class="keyword">else</span> f[l] = <span class="built_in">add</span>(f[l], <span class="built_in">mul</span>(l - <span class="number">1</span>, f[l - <span class="number">1</span>]));</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; G, F; <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">cdq</span>(l, mid);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= r - l + <span class="number">1</span>; i++) F.<span class="built_in">pb</span>(f[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= r - l + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">if</span>(i + l &lt;= mid) G.<span class="built_in">pb</span>(<span class="built_in">mul</span>(f[i + l], i + l - <span class="number">1</span>));</span><br><span class="line">	F = Poly::<span class="built_in">Mul</span>(F, G);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= r; i++) f[i] = <span class="built_in">add</span>(f[i], F[i - l]);</span><br><span class="line">	<span class="keyword">if</span>(l != <span class="number">2</span>) &#123;</span><br><span class="line">		F.<span class="built_in">clear</span>(), G.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= r - l + <span class="number">1</span>; i++) <span class="keyword">if</span>(i + l &lt;= mid) F.<span class="built_in">pb</span>(f[i + l]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= r - l + <span class="number">1</span>; i++)</span><br><span class="line">			<span class="keyword">if</span>(i &lt;= r - l) G.<span class="built_in">pb</span>(<span class="built_in">mul</span>(f[i], i - <span class="number">1</span>));</span><br><span class="line">		F = Poly::<span class="built_in">Mul</span>(F, G);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= r; i++) f[i] = <span class="built_in">add</span>(f[i], F[i - l]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cdq</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), dis[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[n] != n) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">1</span>; top = <span class="number">1</span>, sta[<span class="number">1</span>] = n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i; i--) &#123;</span><br><span class="line">		<span class="keyword">for</span>(; i &lt; sta[top] - a[sta[top]] + <span class="number">1</span>; --top);</span><br><span class="line">		<span class="keyword">if</span>(i - a[i] &lt; sta[top] - a[sta[top]]) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> ; &#125;</span><br><span class="line">		++dis[sta[top]], sta[++top] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = <span class="built_in">mul</span>(ans, f[dis[i]]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans); <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;T, &amp;n), f.<span class="built_in">resize</span>(n + <span class="number">1</span>), <span class="built_in">cdq</span>(<span class="number">2</span>, n - <span class="number">1</span>), f[<span class="number">0</span>] = <span class="number">1</span>, f[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(; T; --T) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>分治</tag>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>【agc023E】Inversions</title>
    <url>/2025/07/27/agc023E-Inversions/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://agc023.contest.atcoder.jp/tasks/agc023_e">【agc023E】Inversions</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p><a href="https://www.cnblogs.com/cjyyb/p/9567855.html">yyb的题解</a>  </p>
<p>考虑计算合法排列的方案数。<br>记 $ cnt[i] &#x3D; \sum [ a_j &gt;&#x3D; i ] $ ，则方案数为 $ tot &#x3D; \prod_{ i &#x3D; 1 }^{ n } (cnt[i] (n - i)) $ 。<br>意思是将数从 n 到 1 填入，对于一个数 i 有 $ cnt[i] $ 个位置可以填，其中 n - i 个位置被占了。显然当方案数为 0 时答案为 0 。  </p>
<p>存在一种比较好写的 $ O(n^2 \log n) $ 的做法。考虑枚举两个位置 $ i, j (i &lt; j) $ ，存在三种情况：  </p>
<ol>
<li>$ a_i &#x3D; a_j $ 。显然如果存在一种方案合法，则这两个位置的数对换也合法，逆序对数为总方案数的一半。  </li>
<li>$ a_i &lt; a_j $ 。显然只有 $ a_j &#x3D; a_i $ 的部分是有用的，即 $ j $ 处方案数为（总方案数 - $ a_j \in [a_i + 1, a_j] $ 的方案数）&#x2F; 2。  </li>
<li>总排列数减不合法，相当于是要求 $ p_i &lt; p_j $ 的方案数。无非是把上面的 $ i, j $ 互换了而已，计算方法还是一样的。</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>, inv2 = (mod + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], cnt[N], tot = <span class="number">1</span>, ans;</span><br><span class="line"><span class="type">int</span> tr[<span class="number">2</span>][N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123;</span><br><span class="line">		tr[<span class="number">0</span>][u] = cnt[l] - (n - l), tr[<span class="number">1</span>][u] = cnt[l] - (n - l + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(u * <span class="number">2</span>, l, mid), <span class="built_in">build</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">	tr[<span class="number">0</span>][u] = <span class="built_in">mul</span>(tr[<span class="number">0</span>][u * <span class="number">2</span>], tr[<span class="number">0</span>][u * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">	tr[<span class="number">1</span>][u] = <span class="built_in">mul</span>(tr[<span class="number">1</span>][u * <span class="number">2</span>], tr[<span class="number">1</span>][u * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> tr[w][u];</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= mid) res = <span class="built_in">mul</span>(res, <span class="built_in">ask</span>(u * <span class="number">2</span>, l, mid, L, R, w));</span><br><span class="line">	<span class="keyword">if</span>(R &gt; mid) res = <span class="built_in">mul</span>(res, <span class="built_in">ask</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, w));</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), ++cnt[a[i]];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--) cnt[i] += cnt[i + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--) tot = <span class="built_in">mul</span>(tot, <span class="built_in">sub</span>(cnt[i], n - i));</span><br><span class="line">	<span class="keyword">if</span>(!tot) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i] == a[j]) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(tot, inv2));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[i] &lt; a[j]) &#123;</span><br><span class="line">			<span class="type">int</span> ss = <span class="built_in">mul</span>(tot, <span class="built_in">ksm</span>(<span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n, a[i] + <span class="number">1</span>, a[j], <span class="number">0</span>)));</span><br><span class="line">			ss = <span class="built_in">mul</span>(ss, <span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n, a[i] + <span class="number">1</span>, a[j], <span class="number">1</span>));</span><br><span class="line">			ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(ss, inv2));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> ss = <span class="built_in">mul</span>(tot, <span class="built_in">ksm</span>(<span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n, a[j] + <span class="number">1</span>, a[i], <span class="number">0</span>)));</span><br><span class="line">			ss = <span class="built_in">mul</span>(ss, <span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n, a[j] + <span class="number">1</span>, a[i], <span class="number">1</span>));</span><br><span class="line">			ss = <span class="built_in">sub</span>(tot, <span class="built_in">mul</span>(ss, inv2)), ans = <span class="built_in">add</span>(ans, ss);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记 $ D[i] &#x3D; \frac{ cnt[j] - 1 - (n - j) }{ cnt[j] - (n - j) } $ 。那么枚举一对 $ i, j $ ，它们的贡献是<br>$$ tot \times \prod_{ k&#x3D;a_i + 1 }^{ a_j } D[k] &#x3D; tot \times \frac{ \prod_{ k &#x3D; 1 }^{ a_j }D[k] }{ \prod_{ k &#x3D; 1 }^{ a_i } D[k] } $$<br>树状数组维护前缀和即可。<br>注意下 $ D[i] $ 可能为 $ 0 $ ，所以求的时候要分段计算一下贡献就好了。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>, inv2 = (mod + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], cnt[N], tot = <span class="number">1</span>, ans;</span><br><span class="line"><span class="type">int</span> tr[<span class="number">2</span>][N], up[N], dn[N], zr[N], idn[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(; x &lt;= n; x += x &amp; -x)</span><br><span class="line">		tr[<span class="number">0</span>][x] = <span class="built_in">add</span>(tr[<span class="number">0</span>][x], w), tr[<span class="number">1</span>][x] = <span class="built_in">add</span>(tr[<span class="number">1</span>][x], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ask</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">0</span>; <span class="keyword">for</span>(; x; x -= x &amp; -x) ss = <span class="built_in">add</span>(ss, tr[w][x]); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), ++cnt[a[i]];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--) cnt[i] += cnt[i + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--)</span><br><span class="line">		tot = <span class="built_in">mul</span>(tot, <span class="built_in">sub</span>(cnt[i], n - i)), cnt[i] -= n - i;</span><br><span class="line">	<span class="keyword">if</span>(!tot) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	up[<span class="number">0</span>] = dn[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		x = <span class="built_in">mul</span>(cnt[i] - <span class="number">1</span>, <span class="built_in">ksm</span>(cnt[i]));</span><br><span class="line">		<span class="keyword">if</span>(!x) zr[i] = zr[i - <span class="number">1</span>] + <span class="number">1</span>, up[zr[i]] = i, dn[i] = dn[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">else</span> zr[i] = zr[i - <span class="number">1</span>], dn[i] = <span class="built_in">mul</span>(dn[i - <span class="number">1</span>], x);</span><br><span class="line">		idn[i] = <span class="built_in">ksm</span>(dn[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		x = <span class="built_in">sub</span>(<span class="built_in">Ask</span>(a[i], <span class="number">0</span>), <span class="built_in">Ask</span>(up[zr[a[i]]] - <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">		x = <span class="built_in">mul</span>(x, <span class="built_in">mul</span>(dn[a[i]], <span class="built_in">mul</span>(tot, inv2)));</span><br><span class="line">		ans = <span class="built_in">add</span>(ans, x);</span><br><span class="line">		<span class="built_in">Add</span>(a[i], idn[a[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) tr[<span class="number">0</span>][i] = tr[<span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n, x; i; i--) &#123;</span><br><span class="line">		x = <span class="built_in">sub</span>(<span class="built_in">Ask</span>(a[i] - <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">Ask</span>(up[zr[a[i]]] - <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">		x = <span class="built_in">mul</span>(x, <span class="built_in">mul</span>(dn[a[i]], <span class="built_in">mul</span>(tot, inv2)));</span><br><span class="line">		ans = <span class="built_in">sub</span>(ans, x);</span><br><span class="line">		ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(<span class="built_in">Ask</span>(a[i] - <span class="number">1</span>, <span class="number">1</span>), tot));</span><br><span class="line">		<span class="built_in">Add</span>(a[i], idn[a[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>一句（dui）话题解2</title>
    <url>/2025/07/27/a-solution-to-a-question2/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />
    <label for="pass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>口胡</tag>
      </tags>
  </entry>
  <entry>
    <title>常系数齐次线性递推</title>
    <url>/2025/07/27/chang-xi-shu-qi-ci-xian-xing-di-tui/</url>
    <content><![CDATA[<span id="more"></span>  

<p>建议学习：<a href="https://www.bilibili.com/video/av6731067">&gt; here &lt;</a>  </p>
<p>一个线性变换会使一个向量在方向上发生偏移，但是如果能找到变换后方向不会发生偏移的向量，将其当作基向量，就可以快速计算递推式的任意项。<br>将这种基向量称作特征向量 $ \vec{v} $ ，每次变换后伸长或缩短的倍数称作特征值 $ \lambda $ ，转移矩阵为$ A $，其中 $ A $ 有 $ n $ 列（转移长度为 $ n $）。<br>于是：<br>$$<br>A \vec{v} &#x3D; \lambda \vec{v}\\<br>(\lambda I - A) \vec{v} &#x3D; 0<br>$$</p>
<p>其中 $ \vec{v} $ 取零向量是无意义的。<br>若要使 $ \vec{v} $ 为非零解，则 $ \det(\lambda I - A) &#x3D; 0 $ ，即将空间降维。<br>其中 $ \det(\lambda I - A) &#x3D; 0 $ 是次数为 $ A $ 的列数的特征多项式 $ f(\lambda) $ 。<br>根据<strong>Cayley-Hamilton定理</strong>， $ f(A) &#x3D; 0 $ ，证明莫得<del>感兴趣的话百度一下</del>。<br>转移矩阵大概是长这样的：<br>$$<br>\begin{bmatrix}<br>a_1&amp;a_2&amp;a_3&amp;\dots&amp;a_{n-1}&amp;a_n\\<br>1  &amp;0  &amp;0  &amp;\dots&amp;0&amp;0  \\<br>0  &amp;1  &amp;0  &amp;\dots&amp;0&amp;0  \\<br>\dots&amp;\dots&amp;\dots&amp;\dots&amp;\dots&amp;\dots\\<br>0  &amp;0  &amp;0  &amp;\dots&amp;1&amp;0<br>\end{bmatrix}<br>$$</p>
<p>特征多项式是长这样的：<br>$$<br>\det(\begin{bmatrix}<br>\lambda-a_1&amp;-a_2&amp;-a_3&amp;\dots&amp;-a_{n-1}&amp;-a_n\\<br>-1  &amp;\lambda  &amp;0  &amp;\dots&amp;0&amp;0  \\<br>0  &amp;-1  &amp;\lambda  &amp;\dots&amp;0&amp;0  \\<br>\dots&amp;\dots&amp;\dots&amp;\dots&amp;\dots&amp;\dots\\<br>0  &amp;0  &amp;0  &amp;\dots&amp;-1&amp;\lambda<br>\end{bmatrix})<br>$$</p>
<p>这个东西的行列式可以手算（判断第一行选哪一个）：<br>$$<br>f(\lambda) &#x3D; \lambda^n - \sum_{i &#x3D; 1}^{n}a_i\lambda^{n-i}<br>$$</p>
<p>设初始项 $ H $，求第 $ m $ 项。<br>求 $ (A^{m} \times H)_0 $ 。  </p>
<p>$$<br>\because f(A) &#x3D; 0\\<br>\therefore A^m \bmod f(A) &#x3D; A^m<br>$$</p>
<p>直接多项式快速幂 + 多项式取模计算出 $ A^m \bmod f(A) $ 。<br>设之后得到的多项式<br>$$<br>g(A) &#x3D; \sum_{i &#x3D; 0}^{n - 1} c_i A^i<br>$$</p>
<p>最后求<br>$$<br>\sum_{i &#x3D; 0}^{n - 1} (c_{i} A^{i} H)<em>{0} &#x3D; \sum</em>{i &#x3D; 0}^{n - 1} c_{i} h_{i}<br>$$</p>
<p><del>授之以渔不如授之以鱼</del>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(A[<span class="number">0</span>])), res;</span><br><span class="line">		res = <span class="built_in">Inv</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Div</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B, vector&lt;<span class="type">int</span>&gt; &amp;D, vector&lt;<span class="type">int</span>&gt; &amp;R)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(B.<span class="built_in">size</span>() &gt; A.<span class="built_in">size</span>()) <span class="keyword">return</span> (<span class="type">void</span>)(D.<span class="built_in">clear</span>(), D.<span class="built_in">pb</span>(<span class="number">0</span>), R = A);</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; a = A, b = B, iB; <span class="type">int</span> n = A.<span class="built_in">size</span>(), m = B.<span class="built_in">size</span>();</span><br><span class="line">		<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">		b.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), iB = <span class="built_in">Inv</span>(b, n - m + <span class="number">1</span>);</span><br><span class="line">		D = <span class="built_in">Mul</span>(a, iB), D.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), <span class="built_in">reverse</span>(D.<span class="built_in">begin</span>(), D.<span class="built_in">end</span>());</span><br><span class="line">		R = <span class="built_in">Mul</span>(B, D);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) R[i] = (mod + A[i] - R[i]) % mod;</span><br><span class="line">		R.<span class="built_in">resize</span>(m);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, m, ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f, h, res, b, tmp;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; t = Poly::<span class="built_in">Mul</span>(a, b), r;</span><br><span class="line">	Poly::<span class="built_in">Div</span>(t, f, tmp, r); <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">if</span>(n &lt;= m) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">			<span class="type">int</span> x; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">			<span class="keyword">if</span>(i == n) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (x % mod + mod) % mod); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	f.<span class="built_in">resize</span>(m + <span class="number">1</span>), h.<span class="built_in">resize</span>(m), f[m] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;f[m - i]);</span><br><span class="line">		f[m - i] = ((mod - f[m - i]) % mod + mod) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, m - <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]), h[i] = (h[i] % mod + mod) % mod;</span><br><span class="line">	res.<span class="built_in">pb</span>(<span class="number">1</span>), b.<span class="built_in">pb</span>(<span class="number">0</span>), b.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>, b = <span class="built_in">Mul</span>(b, b)) <span class="keyword">if</span>(n &amp; <span class="number">1</span>) res = <span class="built_in">Mul</span>(res, b);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, m - <span class="number">1</span>) ans = (ans + <span class="number">1ll</span> * res[i] * h[i]) % mod;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>codechef-TBGRAPH-题解</title>
    <url>/2025/07/27/codechef-TBGRAPH-ti-jie/</url>
    <content><![CDATA[<p><a href="https://www.codechef.com/problems/TBGRAPH">Graph on a Table</a>  </p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一张 $ n \times m $ 的网格图，每次可以从 $ (x_0, y_0) $ 跳到 $ (x_1, y_1) $ 当且仅当 $ x_0 &lt; x_1 $ 且 $ y_0 &lt; y_1 $ ，同时这两个点都要在同一个给出的矩形中，求最多可以经过多少个网格并求出方案数对 $ 10^9 + 7 $ 取模。  </p>
<span id="more"></span>  

<h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><p>由于要求的是最长路经，所以对于路径相邻的两个位置 $ (x_i, y_i) $ 和 $ (x_{i + 1}, y_{i + 1}) $ 满足 $ x_i + 1 &#x3D; x_{i + 1} $ 或 $ y_i + 1 &#x3D; y_{i + 1} $ 。<br>考虑DP，预处理出每个点可以从那些地方转移( $ Left[i][j] $ 和 $ Up[i][j] $ 分别维护这个点可以转移的最左和最上方的位置 )。<br>然后单调队列优化DP即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a), i##ed = (b); i &lt;= i##ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a), i##ed = (b); i &gt;= i##ed; i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>, M = <span class="number">500010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">file</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;roche.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;roche.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gi</span><span class="params">(<span class="type">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">	x= <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>;)</span><br><span class="line">		x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> T, n, m, q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y, xx, yy;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> P &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> x &lt; yy.x; &#125;</span><br><span class="line">&#125;; P a[M];</span><br><span class="line"><span class="type">int</span> up[N][N], lt[N][N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">	<span class="type">int</span> len, s; <span class="built_in">Node</span>(<span class="type">int</span> X = <span class="number">0</span>, <span class="type">int</span> Y = <span class="number">0</span>) : <span class="built_in">len</span>(X), <span class="built_in">s</span>(Y) &#123;&#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> len &lt; yy.len; &#125;</span><br><span class="line">&#125;; Node ans, f[N][N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">	Node a[N]; <span class="type">int</span> f, e, s[N], id[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; f = <span class="number">1</span>, e = <span class="number">0</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, x) s[i] = <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x, Node w)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(; f &lt;= e &amp;&amp; a[e] &lt; w;)</span><br><span class="line">			s[a[e].len] = (s[a[e].len] - a[e].s + mod) % mod, --e;</span><br><span class="line">		s[w.len] = (s[w.len] + w.s) % mod, a[++e] = w, id[e] = x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Node <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(; f &lt;= e &amp;&amp; id[f] &lt; x;)</span><br><span class="line">			s[a[f].len] = (s[a[f].len] - a[f].s + mod) % mod, ++f;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Node</span>(a[f].len + <span class="number">1</span>, s[a[f].len]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; Queue Up[N], Lt[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Node <span class="keyword">operator</span>+(Node x, Node y) &#123;</span><br><span class="line">	<span class="keyword">if</span>(x.len ^ y.len) <span class="keyword">return</span> x.len &gt; y.len ? x : y;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Node</span>(x.len, (x.s + y.s) % mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_up_lt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">rep</span>(j, <span class="number">1</span>, m) up[i][j] = lt[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, q) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(j, a[i].x + <span class="number">1</span>, a[i].xx)</span><br><span class="line">			lt[j][a[i].yy] = <span class="built_in">Min</span>(a[i].y, lt[j][a[i].yy]);</span><br><span class="line">		<span class="built_in">rep</span>(j, a[i].y + <span class="number">1</span>, a[i].yy)</span><br><span class="line">			up[a[i].xx][j] = <span class="built_in">Min</span>(a[i].x, up[a[i].xx][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">per</span>(i, n, <span class="number">1</span>) <span class="built_in">per</span>(j, m, <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(j &lt; m) lt[i][j] = <span class="built_in">Min</span>(lt[i][j + <span class="number">1</span>], lt[i][j]);</span><br><span class="line">			<span class="keyword">if</span>(i &lt; n) up[i][j] = <span class="built_in">Min</span>(up[i + <span class="number">1</span>][j], up[i][j]);</span><br><span class="line">			<span class="keyword">if</span>(lt[i][j] &gt;= j) lt[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">			<span class="keyword">if</span>(up[i][j] &gt;= i) up[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n), <span class="built_in">gi</span>(m), <span class="built_in">gi</span>(q);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, q) <span class="built_in">gi</span>(a[i].x), <span class="built_in">gi</span>(a[i].y), <span class="built_in">gi</span>(a[i].xx), <span class="built_in">gi</span>(a[i].yy);</span><br><span class="line">	<span class="built_in">get_up_lt</span>();</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) Lt[i].<span class="built_in">init</span>(m); <span class="built_in">rep</span>(i, <span class="number">1</span>, m) Up[i].<span class="built_in">init</span>(n);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">rep</span>(j, <span class="number">1</span>, m) f[i][j] = <span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">rep</span>(j, <span class="number">1</span>, m) &#123;</span><br><span class="line">		Lt[i].<span class="built_in">push</span>(j, f[i][j]), Up[j].<span class="built_in">push</span>(i, f[i][j]);</span><br><span class="line">		<span class="keyword">if</span>(lt[i + <span class="number">1</span>][j + <span class="number">1</span>] != <span class="number">0x3f3f3f3f</span>)</span><br><span class="line">			f[i + <span class="number">1</span>][j + <span class="number">1</span>] = f[i + <span class="number">1</span>][j + <span class="number">1</span>] + Lt[i].<span class="built_in">ask</span>(lt[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">if</span>(up[i + <span class="number">1</span>][j + <span class="number">1</span>] != <span class="number">0x3f3f3f3f</span>)</span><br><span class="line">			f[i + <span class="number">1</span>][j + <span class="number">1</span>] = f[i + <span class="number">1</span>][j + <span class="number">1</span>] + Up[j].<span class="built_in">ask</span>(up[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">if</span>(up[i + <span class="number">1</span>][j + <span class="number">1</span>] != <span class="number">0x3f3f3f3f</span> &amp;&amp; lt[i + <span class="number">1</span>][j + <span class="number">1</span>] != <span class="number">0x3f3f3f3f</span> &amp;&amp;</span><br><span class="line">			f[i][j].len + <span class="number">1</span> == f[i + <span class="number">1</span>][j + <span class="number">1</span>].len)</span><br><span class="line">			f[i + <span class="number">1</span>][j + <span class="number">1</span>].s = (f[i + <span class="number">1</span>][j + <span class="number">1</span>].s - f[i][j].s + mod) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	ans = <span class="built_in">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">rep</span>(j, <span class="number">1</span>, m) ans = ans + f[i][j];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ans.len, ans.s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//	file();</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T); T; --T) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>【ZJOI2012】小蓝的好友</title>
    <url>/2025/07/27/ZJOI2012-xiao-lan-de-hao-you/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problemnew/show/P2611">【ZJOI2012】小蓝的好友</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>至少包含一个点的矩阵数等于总矩阵数减去不包含任意一个点的矩阵数。<br>考虑将点按照纵坐标排序，进行类似扫描线的操作。每一列有用的点是最靠近当前行的点，记录它们的纵坐标。如果这一层存在一段长度为 $ s $ 不包含点，则它对答案的贡献为 $ \frac{(s + 1) \times s}{2} $ ；如果是纵坐标上一段都满足，那就再乘上纵坐标上的长度。<br>维护一个 $ Treap $ ，$ value $ 值中序遍历表示横坐标的一段，$ key $ 值表示横坐标为该值时纵坐标的最大值。每次一些节点 $ key $ 值会变大，然后用 $ splay $ 的方式旋转满足 $ Treap $ 的性质，同时维护答案。<br>由于数据随机，所以复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">400010</span>;</span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line">ll ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="type">int</span> ch[<span class="number">2</span>][N], sz[N], dep[N], fa[N], tot, rt; ll val[N];</span><br><span class="line"><span class="type">int</span> sta[N], top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) <span class="keyword">return</span> ;</span><br><span class="line">	sz[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(ch[<span class="number">0</span>][u]) sz[u] += sz[ch[<span class="number">0</span>][u]]; <span class="keyword">if</span>(ch[<span class="number">1</span>][u]) sz[u] += sz[ch[<span class="number">1</span>][u]];</span><br><span class="line">	sum -= val[u];</span><br><span class="line">	val[u] = (ll)sz[u] * (sz[u] + <span class="number">1</span>) / <span class="number">2</span> * (dep[fa[u]] - dep[u]);</span><br><span class="line">	sum += val[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> ff, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	u = (l + r) &gt;&gt; <span class="number">1</span>, fa[u] = ff;</span><br><span class="line">	<span class="keyword">if</span>(l &lt; u) <span class="built_in">build</span>(ch[<span class="number">0</span>][u], u, l, u - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(u &lt; r) <span class="built_in">build</span>(ch[<span class="number">1</span>][u], u, u + <span class="number">1</span>, r);</span><br><span class="line">	<span class="built_in">update</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	top = <span class="number">0</span>, dep[u] = tot;</span><br><span class="line">	<span class="keyword">for</span>(; dep[u] &gt; dep[fa[u]];) &#123;</span><br><span class="line">		<span class="type">int</span> y = fa[u], z = fa[y], k = ch[<span class="number">1</span>][y] == u, w = ch[k ^ <span class="number">1</span>][u];</span><br><span class="line">		ch[ch[<span class="number">1</span>][z] == y][z] = u; ch[k][y] = w, ch[k ^ <span class="number">1</span>][u] = y;</span><br><span class="line">		fa[w] = y; fa[u] = z, fa[y] = u;</span><br><span class="line">		sta[++top] = y;</span><br><span class="line">	&#125;</span><br><span class="line">	sta[++top] = u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= top; i++) &#123;</span><br><span class="line">		<span class="built_in">update</span>(sta[i]);</span><br><span class="line">		<span class="keyword">if</span>(ch[<span class="number">0</span>][sta[i]]) <span class="built_in">update</span>(ch[<span class="number">0</span>][sta[i]]);</span><br><span class="line">		<span class="keyword">if</span>(ch[<span class="number">1</span>][sta[i]]) <span class="built_in">update</span>(ch[<span class="number">1</span>][sta[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q), <span class="built_in">build</span>(ch[<span class="number">1</span>][rt], <span class="number">0</span>, <span class="number">1</span>, m);</span><br><span class="line">	ans = (ll)n * (n + <span class="number">1</span>) / <span class="number">2</span> * m * (m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= q; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		++tot, ++dep[rt];</span><br><span class="line">		<span class="keyword">if</span>(ch[<span class="number">0</span>][rt]) <span class="built_in">update</span>(ch[<span class="number">0</span>][rt]); <span class="keyword">if</span>(ch[<span class="number">1</span>][rt]) <span class="built_in">update</span>(ch[<span class="number">1</span>][rt]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; e[i].<span class="built_in">size</span>(); j++) <span class="built_in">insert</span>(e[i][j]);</span><br><span class="line">		ans -= sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>笛卡尔树</tag>
      </tags>
  </entry>
  <entry>
    <title>【CodePlus 2018 4 月赛】组合数问题 2</title>
    <url>/2025/07/27/codeplus-2018-4-yue-sai-zu-he-shu-wen-ti-2/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/6353">【CodePlus 2018 4 月赛】组合数问题 2</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>发现 $ f_k(h) &#x3D; C(k, h) $ 是单峰函数，意味着可以像 <a href="https://www.luogu.org/problemnew/show/P2048">【NOI2010】超级钢琴</a>  一样用优先队列维护当前每个 $ k $ 最大值。<br>发现组合数很大，优先级不容易确定。考虑取组合数的对数，再用对数（ $ \log (a \times b) &#x3D; \log a + \log b $ ）进行比较。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-15</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, k, ans;</span><br><span class="line"><span class="type">int</span> fac[N], ifac[N];</span><br><span class="line"><span class="type">double</span> lg[N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; st[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y; <span class="type">double</span> w;</span><br><span class="line">	<span class="built_in">P</span>(<span class="type">int</span> X = <span class="number">0</span>, <span class="type">int</span> Y = <span class="number">0</span>) : <span class="built_in">x</span>(X), <span class="built_in">y</span>(Y) &#123; w = lg[x] - lg[y] - lg[x - y]; &#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> P &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> w + eps &lt; yy.w; &#125;</span><br><span class="line">&#125;; priority_queue&lt;P&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; y || x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mul</span>(fac[x], <span class="built_in">mul</span>(ifac[y], ifac[x - y]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) lg[i] = <span class="built_in">log</span>(i) + lg[i - <span class="number">1</span>];</span><br><span class="line">	fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = ifac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fac[i] = <span class="built_in">mul</span>(fac[i - <span class="number">1</span>], i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="built_in">mul</span>(mod - mod / i, ifac[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="built_in">mul</span>(ifac[i - <span class="number">1</span>], ifac[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) st[i].<span class="built_in">insert</span>(i / <span class="number">2</span>), q.<span class="built_in">push</span>(<span class="built_in">P</span>(i, i / <span class="number">2</span>));</span><br><span class="line">	<span class="keyword">for</span>(; k; --k) &#123;</span><br><span class="line">		P u = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>(), ans = <span class="built_in">add</span>(ans, <span class="built_in">C</span>(u.x, u.y));</span><br><span class="line">		<span class="keyword">if</span>(u.y &gt; <span class="number">0</span> &amp;&amp; !st[u.x].<span class="built_in">count</span>(u.y - <span class="number">1</span>))</span><br><span class="line">			st[u.x].<span class="built_in">insert</span>(u.y - <span class="number">1</span>), q.<span class="built_in">push</span>(<span class="built_in">P</span>(u.x, u.y - <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">if</span>(u.y &lt; u.x &amp;&amp; !st[u.x].<span class="built_in">count</span>(u.y + <span class="number">1</span>))</span><br><span class="line">			st[u.x].<span class="built_in">insert</span>(u.y + <span class="number">1</span>), q.<span class="built_in">push</span>(<span class="built_in">P</span>(u.x, u.y + <span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title>多项式全家桶</title>
    <url>/2025/07/27/duo-xiang-shi-quan-jia-tong/</url>
    <content><![CDATA[<p>默写课文。。。  </p>
<span id="more"></span>  

<h3 id="导数公式："><a href="#导数公式：" class="headerlink" title="导数公式："></a>导数公式：</h3><table>
<thead>
<tr>
<th align="center">原函数</th>
<th align="center">导函数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$ y &#x3D; C(C为常数) $</td>
<td align="center">$ y’ &#x3D; 0 $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; a^x $</td>
<td align="center">$ y’ &#x3D; a^x \ln a $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; e^x $</td>
<td align="center">$ y’ &#x3D; e^x $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; x^n $</td>
<td align="center">$ y’ &#x3D; nx^{n - 1} $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \log_{a}x $</td>
<td align="center">$ y’ &#x3D; \frac{1}{x \ln a} $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \ln x $</td>
<td align="center">$ y’ &#x3D; \frac{1}{x} $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \sin x $</td>
<td align="center">$ y’ &#x3D; \cos x $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \cos x $</td>
<td align="center">$ y’ &#x3D; - \sin x $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; u \pm v $</td>
<td align="center">$ y’ &#x3D; u’ \pm v’ $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; uv $</td>
<td align="center">$ y’ &#x3D; u’v + uv’ $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \frac{u}{v} $</td>
<td align="center">$ y’ &#x3D; \frac{u’v - uv’}{v^2} $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; f(g(x)) $</td>
<td align="center">$ y’ &#x3D; g’(x)f’(g(x)) $</td>
</tr>
</tbody></table>
<h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Add</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(Max(a.size(), b.size()))</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &lt; (<span class="type">int</span>)a.<span class="built_in">size</span>()) res[i] = <span class="built_in">add</span>(res[i], a[i]);</span><br><span class="line">			<span class="keyword">if</span>(i &lt; (<span class="type">int</span>)b.<span class="built_in">size</span>()) res[i] = <span class="built_in">add</span>(res[i], b[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(A[<span class="number">0</span>])), res;</span><br><span class="line">		res = <span class="built_in">Inv</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Div</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B, vector&lt;<span class="type">int</span>&gt; &amp;D, vector&lt;<span class="type">int</span>&gt; &amp;R)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(B.<span class="built_in">size</span>() &gt; A.<span class="built_in">size</span>()) <span class="keyword">return</span> (<span class="type">void</span>)(D.<span class="built_in">clear</span>(), D.<span class="built_in">pb</span>(<span class="number">0</span>), R = A);</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; a = A, b = B, iB; <span class="type">int</span> n = A.<span class="built_in">size</span>(), m = B.<span class="built_in">size</span>();</span><br><span class="line">		<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">		b.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), iB = <span class="built_in">Inv</span>(b, n - m + <span class="number">1</span>);</span><br><span class="line">		D = <span class="built_in">Mul</span>(a, iB), D.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), <span class="built_in">reverse</span>(D.<span class="built_in">begin</span>(), D.<span class="built_in">end</span>());</span><br><span class="line">		R = <span class="built_in">Mul</span>(B, D);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) R[i] = (mod + A[i] - R[i]) % mod;</span><br><span class="line">		R.<span class="built_in">resize</span>(m - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ln</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; f, g = <span class="built_in">Inv</span>(A); f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; (<span class="type">int</span>)f.<span class="built_in">size</span>(); i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, A[i]);</span><br><span class="line">		f[f.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="number">0</span>, f = <span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = (<span class="type">int</span>)f.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) f[i] = <span class="built_in">mul</span>(f[i - <span class="number">1</span>], <span class="built_in">ksm</span>(i));</span><br><span class="line">		f[<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> f;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Exp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res;</span><br><span class="line">		res = <span class="built_in">Exp</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>), res.<span class="built_in">resize</span>(sz); vector&lt;<span class="type">int</span>&gt; tmp = <span class="built_in">Ln</span>(res);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)tmp.<span class="built_in">size</span>(); i++) tmp[i] = <span class="built_in">add</span>(<span class="built_in">sub</span>(<span class="number">0</span>, tmp[i]), A[i]);</span><br><span class="line">		tmp[<span class="number">0</span>] = <span class="built_in">add</span>(<span class="number">1</span>, tmp[<span class="number">0</span>]), res = <span class="built_in">Mul</span>(res, tmp);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> <span class="type">int</span> &amp;K)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> sz = A.<span class="built_in">size</span>(), low = <span class="number">0</span>; vector&lt;<span class="type">int</span>&gt; ta, res;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) <span class="keyword">if</span>(A[i]) &#123; low = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = low; i &lt; sz; i++) ta.<span class="built_in">pb</span>(A[i]);</span><br><span class="line">		<span class="type">int</span> mu = ta[<span class="number">0</span>], inv = <span class="built_in">ksm</span>(mu), Mu = <span class="built_in">ksm</span>(mu, K);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * inv % mod;</span><br><span class="line">		ta = <span class="built_in">Ln</span>(ta);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * K % mod;</span><br><span class="line">		ta = <span class="built_in">Exp</span>(ta);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * Mu % mod;</span><br><span class="line">		<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; low; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= K; j++) &#123; ++cnt, res.<span class="built_in">pb</span>(<span class="number">0</span>); <span class="keyword">if</span>(cnt &gt; sz) <span class="keyword">break</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) res.<span class="built_in">pb</span>(ta[i]);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;K)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> mu = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)K.<span class="built_in">size</span>(); i++) mu = <span class="built_in">add</span>(<span class="built_in">mul</span>(mu, <span class="number">10</span>), K[i]);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Ksm</span>(A, mu);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Sqrt</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) &#123; <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res; &#125;</span><br><span class="line">		res = <span class="built_in">Sqrt</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>); <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		res.<span class="built_in">resize</span>(sz), tmp = <span class="built_in">Mul</span>(tmp, <span class="built_in">Inv</span>(res));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) res[i] = <span class="number">1ll</span> * (res[i] + tmp[i]) * (mod + <span class="number">1</span>) / <span class="number">2</span> % mod;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; tt[<span class="number">4000010</span>], res;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Evaluate_init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; ttt;</span><br><span class="line">		<span class="keyword">if</span>(l &gt;= r) &#123; ttt.<span class="built_in">pb</span>(mod - a[l]), ttt.<span class="built_in">pb</span>(<span class="number">1</span>); <span class="keyword">return</span> tt[u] = ttt; &#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">Evaluate_init</span>(u * <span class="number">2</span>, l, mid, a), <span class="built_in">Evaluate_init</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, a);</span><br><span class="line">		<span class="keyword">return</span> tt[u] = <span class="built_in">Mul</span>(tt[u * <span class="number">2</span>], tt[u * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Evaluate</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;f, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(r - l + <span class="number">1</span> &lt;= <span class="number">512</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">				<span class="type">int</span> w = <span class="number">1</span>, x = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)f.<span class="built_in">size</span>(); i++) x = <span class="built_in">add</span>(x, <span class="built_in">mul</span>(w, f[i])), w = <span class="built_in">mul</span>(w, a[k]);</span><br><span class="line">				res.<span class="built_in">pb</span>(x);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; vector&lt;<span class="type">int</span>&gt; tmp; <span class="built_in">Div</span>(f, tt[u], tmp, tmp);</span><br><span class="line">		<span class="built_in">Evaluate</span>(u * <span class="number">2</span>, l, mid, tmp, a), <span class="built_in">Evaluate</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, tmp, a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Evaluation</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;f, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">Evaluate_init</span>(<span class="number">1</span>, <span class="number">0</span>, a.<span class="built_in">size</span>() - <span class="number">1</span>, a);</span><br><span class="line">		res.<span class="built_in">clear</span>(), <span class="built_in">Evaluate</span>(<span class="number">1</span>, <span class="number">0</span>, a.<span class="built_in">size</span>() - <span class="number">1</span>, f, a); <span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="NTT（Mul-ntt）"><a href="#NTT（Mul-ntt）" class="headerlink" title="NTT（Mul&amp;ntt）"></a>NTT（Mul&amp;ntt）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">				<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">				A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">	<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">	<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="牛顿迭代："><a href="#牛顿迭代：" class="headerlink" title="牛顿迭代："></a>牛顿迭代：</h3><p>$$<br>\begin{aligned}<br>\large{F(x) &#x3D; F_0(x) - \frac{G(F_0(x))}{G’(F_0(x))}}\\<br>\large{G(F(x)) &#x3D; 0}\\<br>\large{G’(F(x)) &#x3D; \frac{dG}{dF}}\\<br>\end{aligned}<br>$$</p>
<h4 id="推导："><a href="#推导：" class="headerlink" title="推导："></a>推导：</h4><p>$$<br>\begin{aligned}<br>y &amp;&#x3D; G’(F_0(x))(x - F_0(x)) + G(F_0(x))\\<br>0 &amp;&#x3D; G’(F_0(x))(F(x) - F_0(x)) + G(F_0(x))\\<br>F(x) &amp;&#x3D; F_0(x) - \frac{G(F_0(x))}{G’(F_0(x))}\\<br>\end{aligned}<br>$$</p>
<hr>
<h3 id="求逆（Inv）："><a href="#求逆（Inv）：" class="headerlink" title="求逆（Inv）："></a>求逆（Inv）：</h3><p>$$<br>\begin{aligned}<br>F \times G’ &amp;&#x3D; 1 (\mod x^{\lceil\frac{n}{2}\rceil})\\<br>F \times G &amp;&#x3D; 1 (\mod x^n)\\<br>F(G - G’) &amp;&#x3D; 0 (\mod x^{\lceil\frac{n}{2}\rceil})\\<br>G - G’ &amp;&#x3D; 0 (\mod x^{\lceil\frac{n}{2}\rceil})\\<br>(G - G’)^2 &amp;&#x3D; 0 (\mod x^n)\\<br>G^2 -2GG’ + G’^2 &amp;&#x3D; 0 (\mod x^n)\\<br>F(G^2 -2GG’ + G’^2) &amp;&#x3D; 0 (\mod x^n)\\<br>G &amp;&#x3D; 2G’ - FG’^2 (\mod x^n)\\<br>\end{aligned}<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(A[<span class="number">0</span>])), res;</span><br><span class="line">	res = <span class="built_in">Inv</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">	<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">	<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++)</span><br><span class="line">		res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">	<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="求Ln（Ln）："><a href="#求Ln（Ln）：" class="headerlink" title="求Ln（Ln）："></a>求Ln（Ln）：</h3><p>$$<br>\begin{aligned}<br>\ln’(F(x)) &amp;&#x3D; \frac{F’(x)}{F(x)}\\<br>\ln(F(x)) &amp;&#x3D; \int \ln’(F(x))\\<br>\end{aligned}<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ln</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; f, g = <span class="built_in">Inv</span>(A); f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; f.<span class="built_in">size</span>(); i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, A[i]);</span><br><span class="line">	f[f.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="number">0</span>, f = <span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = f.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) f[i] = <span class="built_in">mul</span>(f[i - <span class="number">1</span>], <span class="built_in">ksm</span>(i));</span><br><span class="line">	f[<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="求Exp（Exp）："><a href="#求Exp（Exp）：" class="headerlink" title="求Exp（Exp）："></a>求Exp（Exp）：</h3><p>$$<br>\begin{aligned}<br>考虑牛顿迭代。\\<br>F(x) &amp;&#x3D; e^{a(x)}, \ln(F(x)) &#x3D; a(x), G(F(x)) &#x3D; ln(F(x)) - a(x) .\\<br>F(x) &amp;&#x3D; F_0(x) - \frac{G(F(x))}{G’(F(x))}\\<br> &amp;&#x3D; F_0(x) - \frac{\ln(F_0(x)) - a(x)}{\frac{1}{F_0(x)}}\\<br> &amp;&#x3D; F_0(x) - F_0(x)(\ln(F_0(x)) - a(x))\\<br> &amp;&#x3D; F_0(x)(1 - \ln(F_0(x)) + a(x))<br>\end{aligned}<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Exp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res;</span><br><span class="line">	res = <span class="built_in">Exp</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>), res.<span class="built_in">resize</span>(sz); vector&lt;<span class="type">int</span>&gt; tmp = <span class="built_in">Ln</span>(res);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); i++) tmp[i] = <span class="built_in">add</span>(<span class="built_in">sub</span>(<span class="number">0</span>, tmp[i]), A[i]);</span><br><span class="line">	tmp[<span class="number">0</span>] = <span class="built_in">add</span>(<span class="number">1</span>, tmp[<span class="number">0</span>]), res = <span class="built_in">Mul</span>(res, tmp);</span><br><span class="line">	<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="多项式快速幂（Ksm）："><a href="#多项式快速幂（Ksm）：" class="headerlink" title="多项式快速幂（Ksm）："></a>多项式快速幂（Ksm）：</h3><p>$$<br>\begin{aligned}<br>(f(x))^{w} &amp;&#x3D; \exp(w\ln(f(x)))<br>\end{aligned}<br>$$</p>
<p>这种做法也可以用来多项式开根。。。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;K)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res = <span class="built_in">Ln</span>(A); <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; K.<span class="built_in">size</span>(); i++) k = <span class="built_in">add</span>(<span class="built_in">mul</span>(k, <span class="number">10</span>), K[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) res[i]= <span class="built_in">mul</span>(res[i], k);</span><br><span class="line">	res = <span class="built_in">Exp</span>(res), res.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()); <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Update:</strong>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> <span class="type">int</span> &amp;K)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> sz = A.<span class="built_in">size</span>(), low = <span class="number">0</span>; vector&lt;<span class="type">int</span>&gt; ta, res;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) <span class="keyword">if</span>(A[i]) &#123; low = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = low; i &lt; sz; i++) ta.<span class="built_in">pb</span>(A[i]);</span><br><span class="line">	<span class="type">int</span> mu = ta[<span class="number">0</span>], inv = <span class="built_in">ksm</span>(mu), Mu = <span class="built_in">ksm</span>(mu, K);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * inv % mod;</span><br><span class="line">	ta = <span class="built_in">Ln</span>(ta);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * K % mod;</span><br><span class="line">	ta = <span class="built_in">Exp</span>(ta);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * Mu % mod;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; low; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= K; j++) &#123; ++cnt, res.<span class="built_in">pb</span>(<span class="number">0</span>); <span class="keyword">if</span>(cnt &gt; sz) <span class="keyword">break</span>; &#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) res.<span class="built_in">pb</span>(ta[i]);</span><br><span class="line">	<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;K)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> mu = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)K.<span class="built_in">size</span>(); i++) mu = <span class="built_in">add</span>(<span class="built_in">mul</span>(mu, <span class="number">10</span>), K[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Ksm</span>(A, mu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="开方（Sqrt）："><a href="#开方（Sqrt）：" class="headerlink" title="开方（Sqrt）："></a>开方（Sqrt）：</h3><p>$$<br>\begin{aligned}<br>牛顿迭代。\\<br>G(F(x)) &amp;&#x3D; F^2(x) - a(x) &#x3D; 0\\<br>F(x) &amp;&#x3D; F_0(x) - \frac{G(F_0(x))}{G’(F_0(x))}\\<br> &amp;&#x3D; F_0(x) - \frac{F_0^2(x) - a(x)}{2F_0(x)}\\<br> &amp;&#x3D; \frac{F_0^2(x) + a(x)}{2F_0(x)}\\<br>\end{aligned}<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Sqrt</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) &#123; <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res; &#125;</span><br><span class="line">	res = <span class="built_in">Sqrt</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>); <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">	res.<span class="built_in">resize</span>(sz), tmp = <span class="built_in">Mul</span>(tmp, <span class="built_in">Inv</span>(res));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) res[i] = <span class="number">1ll</span> * (res[i] + tmp[i]) * (mod + <span class="number">1</span>) / <span class="number">2</span> % mod;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>共价大爷游长沙</title>
    <url>/2025/07/27/gong-jia-da-ye-you-chang-sha-ti-jie/</url>
    <content><![CDATA[<p>来自我的口胡记录。  </p>
<p><a href="http://uoj.ac/problem/207">UOJ #207 共价大爷游长沙</a>  </p>
<p><a href="http://matthew99.blog.uoj.ac/blog/1771">官方题解</a>  </p>
<span id="more"></span>  

<p>确实是一道好题，讲详细点。<br>首先有一种显然的暴力，即暴力增加路径、改变路径、查询答案，出题人良心地给了 $ 10 $ 分。<br>若无加减边的操作和删除的操作，那么我们可以维护当前的可行路径，每次可以用 $ O(logn) $ 或者 $ O(1) $ 时间进行树上路径求交以及判断一条边是否在路径上。<br>如果没有加边删边操作，那么我们可以用动态树或者树链剖分等支持链修改单点询问的结构，维护每个点被路径经过的次数，每次看看询问边的两个端点是否都被经过了 $ |S| $ 次。<br>对于 $ |S| \leq 10 $ 的数据，我们可以每次询问的时候进行和算法三类似的操作，每次暴力加入所有路径维护每个点被经过的次数再用同样的方法询问，期望得分 $ 20 $ 分。<br>然后是正解。我们难以维护的是两点之间的动态路径，加减边令人头大。考虑树上差分，在 $ lca $ 处减两倍的值<del>然而动态树并没有lca</del>，考虑异或，异或两个相同的值相当于没操作。如此将端点都异或一个相同的随机数即可，同时统计所有路径的变量也要异或相同的数。 $ LCT $ 维护即可。<br><del>然而我打了代码。</del>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc ch[u][0]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc ch[u][1]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n,m,ans;</span><br><span class="line"><span class="type">int</span> fa[N],ch[N][<span class="number">2</span>],v[N],s[N],sta[N];</span><br><span class="line"><span class="type">bool</span> lz[N];</span><br><span class="line"><span class="type">int</span> tx[N*<span class="number">5</span>],ty[N*<span class="number">5</span>],w[N*<span class="number">5</span>],cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Rand</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (<span class="built_in">rand</span>()&lt;&lt;<span class="number">15</span>)+<span class="built_in">rand</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">nroot</span><span class="params">(<span class="type">const</span> <span class="type">int</span> u)</span> </span>&#123; <span class="keyword">return</span> ch[fa[u]][<span class="number">0</span>]==u||ch[fa[u]][<span class="number">1</span>]==u; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">const</span> <span class="type">int</span> u)</span> </span>&#123; s[u]=s[lc]^s[rc]^v[u]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="keyword">if</span>(lz[u]) <span class="built_in">swap</span>(lc,rc),lz[lc]^=<span class="number">1</span>,lz[rc]^=<span class="number">1</span>,lz[u]=<span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> y=fa[u],z=fa[y],k=ch[y][<span class="number">1</span>]==u,w=ch[u][k^<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) ch[z][ch[z][<span class="number">1</span>]==y]=u; ch[y][k]=w,ch[u][k^<span class="number">1</span>]=y;</span><br><span class="line">    <span class="keyword">if</span>(w) fa[w]=y; fa[y]=u,fa[u]=z;</span><br><span class="line">    <span class="built_in">pushup</span>(y),<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> y=u,z,top=<span class="number">1</span>;sta[top]=y;<span class="keyword">while</span>(<span class="built_in">nroot</span>(y)) sta[++top]=y=fa[y];</span><br><span class="line">    <span class="keyword">while</span>(top) <span class="built_in">pushdown</span>(sta[top--]);</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">nroot</span>(u);<span class="built_in">rotate</span>(u)) &#123;</span><br><span class="line">        y=fa[u],z=fa[y]; <span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) <span class="built_in">rotate</span>((ch[y][<span class="number">0</span>]==u)^(ch[z][<span class="number">0</span>]==y)? u:y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;u;u=fa[y=u]) <span class="built_in">splay</span>(u),v[u]^=s[rc],rc=y,v[u]^=s[y],<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="built_in">access</span>(u),<span class="built_in">splay</span>(u),lz[u]^=<span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123; <span class="built_in">makeroot</span>(x),<span class="built_in">access</span>(y),<span class="built_in">splay</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lnk</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123; <span class="built_in">makeroot</span>(x),<span class="built_in">makeroot</span>(y),fa[x]=y,v[y]^=s[x]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123; <span class="built_in">split</span>(x,y),fa[x]=ch[y][<span class="number">0</span>]=<span class="number">0</span>,<span class="built_in">pushup</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> w)</span> </span>&#123; <span class="built_in">makeroot</span>(x),v[x]^=w,s[x]^=w; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n),<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="built_in">lnk</span>(x,y);</span><br><span class="line">    <span class="type">int</span> opt,x,y;</span><br><span class="line">    <span class="keyword">for</span>(;m;--m) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="built_in">cut</span>(x,y),<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="built_in">lnk</span>(x,y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) &#123;</span><br><span class="line">            ++cnt,<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;tx[cnt],&amp;ty[cnt]),w[cnt]=<span class="built_in">Rand</span>();</span><br><span class="line">            ans^=w[cnt],<span class="built_in">mdy</span>(tx[cnt],w[cnt]),<span class="built_in">mdy</span>(ty[cnt],w[cnt]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x),ans^=w[x],<span class="built_in">mdy</span>(tx[x],w[x]),<span class="built_in">mdy</span>(ty[x],w[x]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="built_in">split</span>(x,y),<span class="built_in">puts</span>((v[y]==ans)? <span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title>二次剩余</title>
    <url>/2025/07/27/er-ci-sheng-yu/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="勒让德符号"><a href="#勒让德符号" class="headerlink" title="勒让德符号"></a>勒让德符号</h3><p>$$<br>\large{ \left( \frac{n}{p} \right) &#x3D;<br>\begin{cases}<br>1, &amp;n \text{在模 $ p $ 意义下的二次剩余}\\<br>-1, &amp;n \text{在模 $ p $ 意义下的非二次剩余}\\<br>0, &amp;n \equiv 0 (\bmod p)<br>\end{cases} }<br>$$</p>
<p>即：  </p>
<p>$$<br>\large{ \left( \frac{n}{p} \right) \equiv n^{\frac{p - 1}{2}} (\bmod p) }<br>$$</p>
<h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>$$<br>\large{ n^2 \equiv (p - n)^2 } \\<br>\large{ \text{$ p $ 的二次剩余和二次非剩余的个数均为 $ \frac{p - 1}{2} $ （除 $ 0 $）} }<br>$$</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li>随机找一个 $ \left( \frac{a^2 - n}{p} \right) &#x3D; -1 $ ，令 $ \omega &#x3D; \sqrt{a^2 - n} $ 。  </li>
<li>合法解 $ x \equiv (a + \omega)^{\frac{p + 1}{2}} (\bmod p) $ 。</li>
</ol>
<p>过程中实数运算需要用结构体维护正数部分和根号部分。  </p>
<p>理论可以见 <a href="https://www.cnblogs.com/zwfymqz/p/10605181.html">&gt; here &lt;</a>。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Math &#123;</span><br><span class="line">	<span class="type">int</span> n, p, w; <span class="keyword">struct</span> <span class="title class_">P</span> &#123; <span class="type">int</span> x, y; &#125;;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> P <span class="title">mul</span><span class="params">(<span class="type">const</span> P &amp;x, <span class="type">const</span> P &amp;y, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		P res;</span><br><span class="line">		res.x = (<span class="number">1ll</span> * x.x * y.x + <span class="number">1ll</span> * x.y * y.y % p * w % p) % p;</span><br><span class="line">		res.y = (<span class="number">1ll</span> * x.y * y.x + <span class="number">1ll</span> * x.x * y.y) % p;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> w = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="number">1ll</span> * x * x % p) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="number">1ll</span> * w * x % p;</span><br><span class="line">		<span class="keyword">return</span> w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Pow</span><span class="params">(P x, <span class="type">int</span> y, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		P w = (P)&#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x, p)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="built_in">mul</span>(w, x, p);</span><br><span class="line">		<span class="keyword">return</span> w.x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		x %= p; <span class="keyword">if</span>(p == <span class="number">2</span>) <span class="keyword">return</span> x;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">ksm</span>(n, (p - <span class="number">1</span>) / <span class="number">2</span>, p) == p - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		<span class="type">int</span> ans;</span><br><span class="line">		<span class="keyword">for</span>(;;) &#123;</span><br><span class="line">			ans = <span class="built_in">rand</span>() % p, w = (<span class="number">1ll</span> * ans * ans % p - x + p) % p;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">ksm</span>(w, (p - <span class="number">1</span>) / <span class="number">2</span>, p) == p - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		P t = (P)&#123;ans, <span class="number">1</span>&#125;; <span class="keyword">return</span> <span class="built_in">Pow</span>(t, (p + <span class="number">1</span>) / <span class="number">2</span>, p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Sqrt</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> pr)</span> </span>&#123; n = x, p = pr; <span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">return</span> <span class="built_in">calc</span>(x, p); &#125;</span><br><span class="line">&#125; <span class="keyword">using</span> Math::Sqrt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/07/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<h3 id="Attach-pdf"><a href="#Attach-pdf" class="headerlink" title="Attach pdf"></a>Attach pdf</h3><div class="pdf-container">
  <iframe src="/pdfjs/web/viewer.html?file=/assets/hello-world/readpapers1.pdf" width="100%" height="800px"></iframe>
</div>]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>【Luogu】重返现世</title>
    <url>/2025/07/27/luogu-chong-fan-xian-shi/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h3><p><a href="https://www.luogu.org/problemnew/show/P4707">【Luogu】重返现世</a>  </p>
<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>为了打开返回现世的大门，Yopilla 需要制作开启大门的钥匙。Yopilla 所在的迷失大陆有 $ n $ 种原料，只需要集齐任意 $ k $ 种，就可以开始制作。<br>Yopilla 来到了迷失大陆的核心地域。每个单位时间，这片地域就会随机生成一种原料。每种原料被生成的概率是不同的，第 $ i $ 种原料被生成的概率是 $ \frac{P_i}{m} $ 。如果 Yopilla 没有这种原料，那么就可以进行收集。<br>Yopilla 急于知道，他收集到任意 $ k $ 种原料的期望时间，答案对 $ 998244353 $ 取模。  </p>
<h3 id="做法："><a href="#做法：" class="headerlink" title="做法："></a>做法：</h3><p>根据 $ Kth-MinMax $ 容斥：<br>$$ Kth-MinMax(S) &#x3D; \sum_{T \in S} C(|T| - 1, k - 1) (-1)^{|T| - k} min(T) $$<br>令 $ f[i][j][k] &#x3D; (前i个元素中 \sum P_{a_i} &#x3D; j)\sum_{T} C(|T| - 1, k - 1)(-1)^{|T| - k} $ 。考虑加入一个新元素：<br>不加：$ f[i][j][k] &#x3D; f[i - 1][j][k] $ 。<br>加：<br>$$ f[i][j][k] &#x3D; \sum_{T \in S} C(|T| - 1, k - 1) (-1)^{|T| - k} $$<br>$$ &#x3D; \sum_{T}C(|T|, k - 1)(-1)^{|T| - k + 1} $$<br>$$ &#x3D; \sum_{T}(C(|T| - 1, k - 1) + C(|T - 1|, k - 2))(-1)^{|T| - k + 1} $$<br>$$ &#x3D; \sum_{T}C(|T| - 1, k - 1)(-1)^{|T| - k}(-1) + \sum_{T}C(|T| - 1, k - 2)(-1)^{|T| - k + 1} $$<br>$$ &#x3D; -f[i - 1][j - P_i][k - 1] + f[i - 1][j - P_i][k] $$<br> $ f[i][0][0] &#x3D; 1 $ 。<br> $ dp $ 转移即可（需要滚动数组），最后的 $ f[i][j][k] $ 期望为 $ \frac{m}{j} $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, p[N], ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> fac[N], ifac[N];</span><br><span class="line"><span class="type">int</span> f[<span class="number">2</span>][N * <span class="number">10</span>][N], Now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &lt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mul</span>(fac[x], <span class="built_in">mul</span>(ifac[y], ifac[x - y]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;m), k = n - k + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p[i]);</span><br><span class="line">	fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = ifac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fac[i] = <span class="built_in">mul</span>(fac[i - <span class="number">1</span>], i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="built_in">mul</span>(mod - mod / i, ifac[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="built_in">mul</span>(ifac[i - <span class="number">1</span>], ifac[i]);</span><br><span class="line">	f[Now][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		Now ^= <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> h = <span class="number">0</span>; h &lt;= k; h++) f[Now][j][h] = f[Now ^ <span class="number">1</span>][j][h];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = p[i]; j &lt;= m; j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> h = <span class="number">1</span>; h &lt;= k; h++) &#123;</span><br><span class="line">				f[Now][j][h] = <span class="built_in">add</span>(f[Now][j][h], f[Now ^ <span class="number">1</span>][j - p[i]][h - <span class="number">1</span>]);</span><br><span class="line">				f[Now][j][h] = <span class="built_in">sub</span>(f[Now][j][h], f[Now ^ <span class="number">1</span>][j - p[i]][h]);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(f[Now][i][k], <span class="built_in">ksm</span>(i)));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">mul</span>(ans, m));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title>【国家集训队】calc</title>
    <url>/2025/07/27/guo-jia-ji-xun-dui-calc/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.com.cn/problem/P4463">【国家集训队】calc</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$ f_{i, j} $ 表示 <strong>递增</strong> 序列中前 i 个数，最后一个数为 $ \leq j $ 的权值和。 $ f_{i, j} &#x3D; j \times f_{i - 1, j - 1} + f_{i, j - 1} $ 。<br>发现这样做复杂度 $ O(nA) $ ，过不去。<br>将 $ f_{i, j} $ 差分后得 $ g_{i, j} $ ，可以用关于 j 的多项式表示。考虑转移过程，即求前缀和在乘上 j，次数 +2 。<br>由此得证 $ f_{i, j} $ 可以被表示成 2n 次多项式。<br>拉格朗日插值即可，复杂度 $ O(n^2) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> mx, n, p, ans = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> X[N], Y[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = p - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> w = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="number">1ll</span> * x * x % p) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="number">1ll</span> * w * x % p; <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;mx, &amp;n, &amp;p);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) ans = <span class="number">1ll</span> * ans * i % p;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, n + n + <span class="number">1</span>) f[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n + n + <span class="number">1</span>) f[i][j] = <span class="number">1ll</span> * f[i - <span class="number">1</span>][j - <span class="number">1</span>] * j % p;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n + n + <span class="number">1</span>) f[i][j] = (f[i][j - <span class="number">1</span>] + f[i][j]) % p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + n + <span class="number">1</span>) X[i] = i, Y[i] = f[n][i];</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + n + <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="type">int</span> sum1 = Y[i], sum2 = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n + n + <span class="number">1</span>) <span class="keyword">if</span>(i != j) &#123;</span><br><span class="line">			sum1 = <span class="number">1ll</span> * sum1 * (mx - X[j] + p) % p;</span><br><span class="line">			sum2 = <span class="number">1ll</span> * sum2 * (X[i] - X[j] + p) % p;</span><br><span class="line">		&#125;</span><br><span class="line">		sum = (sum + <span class="number">1ll</span> * sum1 * <span class="built_in">ksm</span>(sum2) % p) % p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="number">1ll</span> * ans * sum % p);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
        <tag>插值</tag>
      </tags>
  </entry>
  <entry>
    <title>黄金体验</title>
    <url>/2025/07/27/huang-jin-ping-tu/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://cometoj.com/contest/58/problem/F?problem_id=2762">黄金体验</a>  </p>
<h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给出一颗有 $ n $ 个节点的树，每个点有一个初始权值 $ w_i $ ，要求支持两种操作：  </p>
<ol>
<li>给出 $ x $ ，$ y $ ，使点 $ x $ 的权值增加 $ y $。  </li>
<li>给出 $ k $，选定 $ k $ 个点使得包含这 $ k $ 个点的最小联通子图点权和最大，你只需要输出这个最大值。<br>$ n, q \leq 100000, w_i, y \leq 10^9 $</li>
</ol>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>先不考虑修改操作，对于询问操作，当 $ k &#x3D; 1 $ 时为点权最大值，可以直接 $ O(1) $ 维护。当 $ k &#x3D; 2 $ 时，答案为点权最大的一条边（显然是一个叶子连向另一个叶子）；当 $ k $ 更大时，相当于在已有的图上加一条未选过的从叶子上来的权值最大的链。<br>所以可以权值长链剖分，用动态开点线段树维护前 $ k - 1 $ 大的链。<br>考虑加上修改，由于点权只会增大，所以原本的修改点所在的长链依旧是长链，不是长链则可能更新成长链。可能会更新直径（要 $ makeroot $），这部分可以用 $ LCT $ 维护。<br>时间复杂度 $ O(n \log^2 n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>; <span class="type">const</span> ll INF = <span class="number">1e15</span>;</span><br><span class="line"><span class="type">int</span> n, rt, m; ll a[N], rtw;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">	multiset&lt;ll&gt; tr;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">const</span> ll &amp;x)</span> </span>&#123; tr.<span class="built_in">erase</span>(tr.<span class="built_in">find</span>(x)); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">const</span> ll &amp;x)</span> </span>&#123; tr.<span class="built_in">insert</span>(x); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">top</span><span class="params">()</span> </span>&#123; <span class="built_in">assert</span>(!tr.<span class="built_in">empty</span>()); <span class="keyword">return</span> *(--tr.<span class="built_in">end</span>()); &#125;</span><br><span class="line">&#125;; Heap hp;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pretree</span> &#123;</span><br><span class="line">	<span class="type">int</span> tot, rt, lf[N * <span class="number">40</span>], rf[N * <span class="number">40</span>], cnt[N * <span class="number">40</span>]; ll s[N * <span class="number">40</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> &amp;u, ll l, ll r, ll x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) u = ++tot; s[u] += x * w, cnt[u] += w; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">		ll mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">		x &lt;= mid ? <span class="built_in">mdy</span>(lf[u], l, mid, x, w) : <span class="built_in">mdy</span>(rf[u], mid + <span class="number">1</span>, r, x, w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">ask</span><span class="params">(<span class="type">int</span> u, ll l, ll r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(cnt[u] &lt;= k) <span class="keyword">return</span> s[u]; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> l * k;</span><br><span class="line">		ll mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(cnt[rf[u]] &gt;= k) <span class="keyword">return</span> <span class="built_in">ask</span>(rf[u], mid + <span class="number">1</span>, r, k);</span><br><span class="line">		<span class="keyword">return</span> s[rf[u]] + <span class="built_in">ask</span>(lf[u], l, mid, k - cnt[rf[u]]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; Pretree t;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LCT</span> &#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> lc ch[0][u]</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rc ch[1][u]</span></span><br><span class="line">	<span class="type">int</span> ch[<span class="number">2</span>][N], fa[N], rt; <span class="type">bool</span> lz[N]; <span class="type">int</span> sta[N], top; ll s[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">nroot</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u)</span> </span>&#123; <span class="keyword">return</span> ch[<span class="number">0</span>][fa[u]] == u || ch[<span class="number">1</span>][fa[u]] == u; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rev</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u)</span> </span>&#123; <span class="built_in">swap</span>(lc, rc), lz[u] ^= <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u)</span> </span>&#123; s[u] = s[lc] + s[rc] + a[u]; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u)</span> </span>&#123; <span class="keyword">if</span>(lz[u]) <span class="built_in">rev</span>(lc), <span class="built_in">rev</span>(rc), lz[u] = <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> y = fa[u], z = fa[y], k = ch[<span class="number">1</span>][y] == u, w = ch[k ^ <span class="number">1</span>][u];</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) ch[ch[<span class="number">1</span>][z] == y][z] = u; ch[k][y] = w, ch[k ^ <span class="number">1</span>][u] = y;</span><br><span class="line">		<span class="keyword">if</span>(w) fa[w] = y; fa[y] = u, fa[u] = z; <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> y = u, z; <span class="keyword">for</span>(sta[top = <span class="number">1</span>] = y; <span class="built_in">nroot</span>(y); sta[++top] = y = fa[y]);</span><br><span class="line">		<span class="keyword">for</span>(; top; <span class="built_in">pushdown</span>(sta[top--]));</span><br><span class="line">		<span class="keyword">for</span>(; <span class="built_in">nroot</span>(u); <span class="built_in">rotate</span>(u)) &#123;</span><br><span class="line">			y = fa[u], z = fa[y];</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) <span class="built_in">rotate</span>((ch[<span class="number">0</span>][z] == y) ^ (ch[<span class="number">0</span>][y] == u) ? u : y);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Link</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">		t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, s[x], <span class="number">-1</span>), t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, s[y], <span class="number">-1</span>);</span><br><span class="line">		t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, s[ch[<span class="number">1</span>][x]], <span class="number">1</span>), ch[<span class="number">1</span>][x] = y, <span class="built_in">pushup</span>(x);</span><br><span class="line">		t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, s[x], <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">splay</span>(rt); <span class="type">int</span> y = u; <span class="keyword">for</span>(; <span class="built_in">nroot</span>(y); y = fa[y]); <span class="built_in">splay</span>(u); <span class="keyword">return</span> y == rt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Right</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="keyword">for</span>(; rc; u = rc); <span class="keyword">return</span> u; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> y = u; <span class="built_in">splay</span>(u), u = fa[u];</span><br><span class="line">		<span class="keyword">for</span>(; u; u = fa[y = u]) &#123;</span><br><span class="line">			<span class="built_in">splay</span>(u);</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">check</span>(u) &amp;&amp; s[lc] &lt; s[rc]) rt = <span class="built_in">Right</span>(u), <span class="built_in">splay</span>(rt), <span class="built_in">rev</span>(rt), <span class="built_in">splay</span>(u);</span><br><span class="line">			<span class="keyword">if</span>(s[rc] &lt; s[y]) <span class="built_in">Link</span>(u, y); <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">undef</span> lc</span></span><br><span class="line">	<span class="meta">#<span class="keyword">undef</span> rc</span></span><br><span class="line">&#125;; LCT lct;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, ll d)</span> </span>&#123;</span><br><span class="line">	d += a[u]; <span class="keyword">if</span>(d &gt; rtw) rtw = d, rt = u; <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff) <span class="built_in">dfs</span>(v, u, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	ll d = <span class="number">0</span>; <span class="type">int</span> son = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff) &#123;</span><br><span class="line">		lct.fa[v] = u, <span class="built_in">init</span>(v, u); <span class="keyword">if</span>(lct.s[v] &gt; d) d = lct.s[v], son = v;</span><br><span class="line">	&#125;</span><br><span class="line">	lct.ch[<span class="number">1</span>][u] = son, lct.<span class="built_in">pushup</span>(u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff &amp;&amp; v != son) t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, lct.s[v], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x); &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]), hp.<span class="built_in">add</span>(a[i]);</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="type">int</span> trt = rt; rt = rtw = <span class="number">0</span>, <span class="built_in">dfs</span>(trt, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">init</span>(trt, <span class="number">0</span>), lct.rt = trt, t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, rtw, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m); m; --m) &#123;</span><br><span class="line">		<span class="type">int</span> opt; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line">		<span class="keyword">if</span>(!opt) &#123;</span><br><span class="line">			<span class="type">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), lct.<span class="built_in">splay</span>(x);</span><br><span class="line">			hp.<span class="built_in">del</span>(a[x]), t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, lct.s[x], <span class="number">-1</span>);</span><br><span class="line">			a[x] += y, lct.<span class="built_in">pushup</span>(x);</span><br><span class="line">			hp.<span class="built_in">add</span>(a[x]), t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, lct.s[x], <span class="number">1</span>);</span><br><span class="line">			lct.<span class="built_in">access</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> k; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">			<span class="keyword">if</span>(k == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, hp.<span class="built_in">top</span>());</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, t.<span class="built_in">ask</span>(t.rt, <span class="number">0</span>, INF, k - <span class="number">1</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FWT</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>基于策略的强化学习</title>
    <url>/2025/07/27/policy-based-reinforcement-learning/</url>
    <content><![CDATA[<p>参考资料：<a href="https://zhuanlan.zhihu.com/p/614115887">Proximal Policy Optimization (PPO) 算法理解：从策略梯度开始</a></p>
<p>如果LaTeX挂了：</p>
<div class="pdf-container">
  <iframe src="/pdfjs/web/viewer.html?file=/assets/policy-based-reinforcement-learning/policy-based-reinforcement-learning.pdf" width="100%" height="800px"></iframe>
</div>

<hr>
<h1 id="传统策略梯度算法"><a href="#传统策略梯度算法" class="headerlink" title="传统策略梯度算法"></a>传统策略梯度算法</h1><h2 id="策略近似"><a href="#策略近似" class="headerlink" title="策略近似"></a>策略近似</h2><p>设$\theta$为神经网络参数，基于策略的强化学习用参数化概率分布$\pi_{\theta}(a | s) &#x3D; P(a | s; \theta)$确定策略，在返回的动作概率列表中对不同的动作进行抽样选择。</p>
<h2 id="定义目标函数"><a href="#定义目标函数" class="headerlink" title="定义目标函数"></a>定义目标函数</h2><p>目标就是找到那些可能获得更多奖励期望值的动作，使它们对应的概率更大，从而策略就更有可能选择这些动作。</p>
<p>定义的最大化目标函数：</p>
<p>$$<br>\max_{\theta} J(\theta) &#x3D; \max_{\theta} E_{\tau \sim \pi_{\theta} } (R(\tau)) &#x3D; \max_{\theta} \sum_{\tau} P(\tau; \theta) R(\tau)<br>$$</p>
<p>其中$\tau$是agent与环境交互产生的状态-动作轨迹$\tau &#x3D; (s_1, a_1, \dots, s_T, a_T)$。我们的目标是通过调整$\theta$，使得获得更大奖励期望的轨迹出现的概率更高。</p>
<p>其中，轨迹$\tau$在策略$\pi_{\theta}(a | s)$下发生的概率为：</p>
<p>$$<br>P(\tau; \theta) &#x3D; \left[ \prod_{t &#x3D; 0}^T P(s_{t + 1} | s_t, a_t) \cdot \pi_{\theta} (a_t | s_t) \right]<br>$$</p>
<p>实际枚举所有可能的轨迹是很困难的，基本都需要通过大量采样得到样本求期望值近似。</p>
<h2 id="策略梯度"><a href="#策略梯度" class="headerlink" title="策略梯度"></a>策略梯度</h2><p>$$<br>\begin{aligned}<br>\nabla_{\theta} J(\theta) &amp;&#x3D; \sum_{\tau} \nabla_{\theta} P(\tau; \theta) \cdot R(\tau) \\<br>&amp;&#x3D; \sum_{\tau} P(\tau; \theta) \frac{\nabla_{\theta} P(\tau; \theta)}{P(\tau; \theta)} R(\tau) \\<br>&amp;&#x3D; \sum_{\tau} P(\tau; \theta) \cdot \nabla_{\theta} \log P(\tau; \theta) \cdot R(\tau)<br>\end{aligned}<br>$$</p>
<p>根据$P(\tau; \theta)$可得：</p>
<p>$$<br>\begin{aligned}<br>\nabla_{\theta} \log P(\tau; \theta) &amp;&#x3D; \nabla_{\theta} \left[ \sum_{t &#x3D; 0}^T \log P(s_{t + 1} | s_t, a_t) + \sum_{t &#x3D; 0}^T \log \pi_{\theta} (a_t | s_t) \right] \\<br>&amp;&#x3D; \sum_{t &#x3D; 0}^T \nabla_{\theta} \log \pi_{\theta} (a_t | s_t)<br>\end{aligned}<br>$$</p>
<p>假设当前有$m$条轨迹的样本：</p>
<p>$$<br>\begin{aligned}<br>\nabla_{\theta} J(\theta) &amp;\approx \frac{1}{m} \sum_{i &#x3D; 1}^{m} \nabla_{\theta} \log P(\tau^{(i)}; \theta) \cdot R(\tau^{(i)}) \\<br>&amp;&#x3D; \frac{1}{m} \sum_{i &#x3D; 1}^{m} \left[ \sum_{t^{(i)} &#x3D; 0}^{T^{(i)}} \nabla_{\theta} \log \pi_{\theta} (a_{t^{(i)}} | s_{t^{(i)}}) \right] \cdot R(\tau^{(i)}) \\<br>&amp;&#x3D; \frac{1}{n} \sum_{i &#x3D; 1}^{n} \nabla_{\theta} \log \pi_{\theta} (a_i | s_i) \cdot R(\tau_i) \quad \left( n &#x3D; \sum_{i &#x3D; 1}^{m} (T^{(i)} + 1) \right)<br>\end{aligned}<br>$$</p>
<p>策略梯度的更新规则：</p>
<p>$$<br>\theta \leftarrow \theta + \alpha \cdot \nabla_{\theta} J(\theta)<br>$$</p>
<h3 id="Softmax策略"><a href="#Softmax策略" class="headerlink" title="Softmax策略"></a>Softmax策略</h3><p>对于离散动作空间：</p>
<p>$$<br>\pi_{\theta}(a | s) &#x3D; \frac{e^{\phi(s, a)^T \theta}}{\sum_{a’ \in A} e^{\phi(s, a’)^T \theta}}<br>$$</p>
<p>对应的策略梯度：</p>
<p>$$<br>\begin{aligned}<br>&amp;\quad \nabla_{\theta} \log \pi_{\theta}(a | s) \\<br>&amp;&#x3D; \nabla_{\theta} \left(\phi(s, a)^T \theta -  \log \sum_{a’ \in A} e^{\phi(s, a’)^T \theta} \right) \\<br>&amp;&#x3D; \phi(s, a) - \frac{\sum_{a’ \in A} \phi(s, a’) \cdot e^{\phi(s, a’)^T \theta}}{\sum_{a’ \in A} e^{\phi(s, a’)^T \theta}} \\<br>&amp;&#x3D; \phi(s, a) - \sum_{a’ \in A} \phi(s, a’) \cdot \pi_{\theta}(a’ | s)<br>\end{aligned}<br>$$</p>
<p>如果奖励信号很高并且观察到的向量与平均向量相差很大，就会有增加该动作概率的强烈趋势。</p>
<h3 id="高斯策略"><a href="#高斯策略" class="headerlink" title="高斯策略"></a>高斯策略</h3><p>对于连续动作空间：</p>
<p>$$<br>\pi_{\theta}(a | s) &#x3D; \frac{1}{\sqrt{2 \pi} \sigma_{\theta}} e^{- \frac{(a - \mu_{\theta})^2}{2 \sigma_{\theta}^2}}<br>$$</p>
<p>其中正态分布的均值$\mu_{\theta} &#x3D; \phi(s, a)^T \theta$。</p>
<p>对应的策略梯度：</p>
<p>$$<br>\begin{aligned}<br>&amp;\quad \nabla_{\theta} \log \pi_{\theta}(a | s) \\<br>&amp;&#x3D; \nabla_{\theta} \left(-\frac{1}{2} \cdot \log (2 \pi \sigma_{\theta}^2) - \frac{(a -\mu_{\theta})^2}{2 \sigma_{\theta}^2} \right) \\<br>&amp;&#x3D; \frac{(a - \mu_{\theta})\phi(s, a)}{\sigma_{\theta}^2}<br>\end{aligned}<br>$$</p>
<p>在高回报的情况下，远离均值的动作会触发强烈的更新信号。</p>
<p>在实际任务中，我们没有必要手动计算偏导数，使用深度学习框架的自动求导。定义损失函数：</p>
<p>$$<br>\mathcal{L}(a, s, r) &#x3D; -\log(\pi_\theta(a | s)) r<br>$$</p>
<p>即可让计算机自动求导。</p>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Network: theta := R^(|theta|)</span><br><span class="line">for n = 1 to N:</span><br><span class="line">    tau &lt;- pi(theta)</span><br><span class="line">    for t = 1 to T:</span><br><span class="line">        R(tau | t) = R[t] + R[t + 1] + ... + R[T]</span><br><span class="line">        theta &lt;- theta - alpha * R(tau | t) * grad(theta, pi(theta, a | s))</span><br></pre></td></tr></table></figure>

<p>这里对于一条路径，将路径上每一个状态都进行了计算，对信息的利用最大化。</p>
<h1 id="自然策略梯度算法"><a href="#自然策略梯度算法" class="headerlink" title="自然策略梯度算法"></a>自然策略梯度算法</h1><h2 id="传统策略梯度算法的缺陷"><a href="#传统策略梯度算法的缺陷" class="headerlink" title="传统策略梯度算法的缺陷"></a>传统策略梯度算法的缺陷</h2><p>在传统的策略梯度算法中，权重更新会遇到两个问题：</p>
<ul>
<li>过冲（Overshooting）: 更新错过了奖励峰值并落入了次优策略区域</li>
<li>下冲（Undershooting）: 在梯度方向上采取过小的更新步长会导致收敛缓慢</li>
</ul>
<p>在监督学习问题中，overshooting不是什么问题，因为数据是固定的，我们可以在下一个epoch中重新纠正；但在强化学习问题中，如果因为overshooting陷入了一个较差的策略区域，则未来的样本批次可能不会提供太多有意义的信息，用较差的数据样本再去更新策略，从而陷入了糟糕的正反馈中无法恢复。较小的学习率可能会解决这个问题，但会导致收敛速度变慢的undershooting问题。</p>
<h2 id="限制策略更新的差异"><a href="#限制策略更新的差异" class="headerlink" title="限制策略更新的差异"></a>限制策略更新的差异</h2><p>我们需要表示策略（分布）之间的差异，而不是参数本身的差异。计算两个概率分布之间的差异，最常见的是KL散度，也称为相对熵，描述了两个概率分布之间的距离：</p>
<p>$$<br>\mathcal{D}<em>{KL}(\pi</em>{\theta} || \pi_{\theta + \Delta \theta}) &#x3D; \sum_{x \in \Chi} \pi_{\theta}(x) \log \left( \frac{\pi_{\theta}(x)}{\pi_{\theta + \Delta \theta}(x)} \right)<br>$$</p>
<p>调整后的策略更新限制为：</p>
<p>$$<br>\Delta \theta^{*} &#x3D; \argmax_{\Delta \theta, \mathcal{D}<em>{KL}(\pi</em>{\theta} || \pi_{\theta + \Delta \theta}) \le \epsilon} J(\theta + \Delta \theta)<br>$$</p>
<p>然而，计算KL散度需要遍历所有的状态-动作对，因此我们需要一些化简来处理现实的RL问题。</p>
<p>首先，我们使用拉格朗日松弛将原表达式的发散约束转化为惩罚项，得到一个更容易求解的表达式：</p>
<p>$$<br>\Delta \theta^{*} &#x3D; \argmax_{\Delta \theta} J(\theta + \Delta \theta) - \lambda(\mathcal{D}<em>{KL}(\pi</em>{\theta} || \pi_{\theta + \Delta \theta}) - \epsilon)<br>$$</p>
<p>用近似方法来化简。通过泰勒展开：</p>
<p>$$<br>\begin{aligned}<br>\Delta \theta^{*} &amp;\approx \argmax_{\Delta \theta} J(\theta) + \nabla_{\theta} J(\theta) \cdot \Delta \theta - \frac{1}{2} \lambda (\Delta \theta^{T} F(\theta) \Delta \theta) + \lambda \epsilon \\<br>&amp;\approx \argmax_{\Delta \theta} \nabla_{\theta} J(\theta) \cdot \Delta \theta - \frac{1}{2} \lambda (\Delta \theta^{T} F(\theta) \Delta \theta) \\<br>F(\theta) &amp;&#x3D; \mathbb{E}<em>{\theta} [ \nabla</em>{\theta} \log \pi_{\theta}(x) \nabla_{\theta} \log \pi_{\theta}(x)^{T} ]<br>\end{aligned}<br>$$</p>
<p>KL散度近似于二阶泰勒展开。用Fisher信息矩阵代替二阶导数，除了符号紧凑性外，还可以大大减少计算开销。</p>
<h2 id="解决KL约束问题"><a href="#解决KL约束问题" class="headerlink" title="解决KL约束问题"></a>解决KL约束问题</h2><p>对于近似简化后的表达式，可以通过将关于$\Delta \theta$的梯度设置为0，来找到最优的权重更新$\Delta \theta$：</p>
<p>$$<br>\begin{aligned}<br>0 &amp;&#x3D; \frac{\partial}{\partial \Delta \theta} \left( \nabla_{\theta} J(\theta) \Delta \theta - \frac{1}{2} \lambda \Delta \theta^{T} F(\theta) \Delta \theta \right) \\<br>&amp;&#x3D; \nabla_{\theta} J(\theta) - \frac{1}{2} \lambda F(\theta) \Delta \theta \\<br>\Delta \theta &amp;&#x3D; - \frac{2}{\lambda} F(\theta)^{-1} \nabla_{\theta} J(\theta)<br>\end{aligned}<br>$$</p>
<p>其中，$\lambda$是一个常数，可以吸收到学习率$\alpha$中。根据$\mathcal{D}<em>{KL}(\pi</em>{\theta} || \pi_{\theta + \Delta \theta}) \le \epsilon$，我们可以推出动态学习率：</p>
<p>$$<br>\alpha &#x3D; \sqrt{\frac{2 \epsilon}{\nabla J(\theta)^T} F(\theta)^{-1} \nabla J(\theta)}<br>$$</p>
<p>可以确保每次更新的KL散度（近似）等于$\epsilon$。</p>
<p>自然策略梯度：</p>
<p>$$<br>\tilde{\nabla} J(\theta) &#x3D; F(\theta)^{-1} \nabla J(\theta)<br>$$</p>
<p>最终的权重更新方案为：</p>
<p>$$<br>\Delta \theta &#x3D; \sqrt{\frac{2 \epsilon }{\nabla J(\theta)^T F(\theta)^{-1} \nabla J(\theta)}} \tilde{\nabla} J(\theta)<br>$$</p>
<p>该方案的强大之处在于，无论分布的表示如何，它总是以相同的幅度改变策略。</p>
<h1 id="信赖域策略优化算法（TRPO）"><a href="#信赖域策略优化算法（TRPO）" class="headerlink" title="信赖域策略优化算法（TRPO）"></a>信赖域策略优化算法（TRPO）</h1><h2 id="自然策略梯度算法的缺陷"><a href="#自然策略梯度算法的缺陷" class="headerlink" title="自然策略梯度算法的缺陷"></a>自然策略梯度算法的缺陷</h2><ul>
<li>近似值可能会违反KL约束，从而导致分析得出的步长过大，超出限制要求</li>
<li>矩阵$F$的计算时间太长，是$O(N^3)$复杂度的运算</li>
<li>我们没有检查更新是否真的改进了策略。由于存在大量的近似过程，策略可能并没有优化</li>
</ul>
<h2 id="算法理论"><a href="#算法理论" class="headerlink" title="算法理论"></a>算法理论</h2><p>针对自然策略梯度算法的问题，我们希望可以对策略的优化进行量化，从而保证每次的更新一定是优化作用的。为此，我们需要计算两种策略之间预期回报的差异。这里采用的是原策略预期回报添加新策略预期优势的方式。该表达式在原策略下计算优势函数，无需重新采样：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) &#x3D; J(\pi_{\theta}) + \mathbb{E}<em>{\tau \sim \pi</em>{\theta + \Delta \theta}} \sum_{t &#x3D; 0}^{\infin} \gamma^{t} A^{\pi_{\theta}}(s_t, a_t)<br>$$</p>
<p>其中优势函数的定义为：</p>
<p>$$<br>A^{\pi_{\theta}}(s, a) &#x3D; \mathbb{E}(Q^{\pi_{\theta}}(s, a) - V^{\pi_{\theta}}(s))<br>$$</p>
<p>由于时间范围是无限的，引入状态的折扣分布：</p>
<p>$$<br>\rho_{\pi}(s) &#x3D; \sum_{k &#x3D; 0}^{\infin} \gamma^{k} P(s_k &#x3D; s)<br>$$</p>
<p>原差异表达式可重新表示为：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) &#x3D; J(\pi_{\theta}) + \sum_{s \in \mathcal{S}} \rho_{\pi_{\theta + \Delta \theta}}(s) \sum_{a \in \mathcal{A}} \pi_{\theta + \Delta \theta}(a | s) A^{\pi_{\theta}}(s, a)<br>$$</p>
<p>引入近似误差，使用当前策略近似：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) \approx J(\pi_{\theta}) + \sum_{s \in \mathcal{S}} \rho_{\pi_{\theta}}(s) \sum_{a \in \mathcal{A}} \pi_{\theta + \Delta \theta}(a | s) A^{\pi_{\theta}}(s, a)<br>$$</p>
<p>将状态分布求和替换为期望，方便实际计算时使用蒙特卡洛模拟进行采样，同时将动作求和替换为<a href="https://zhuanlan.zhihu.com/p/41217212">重要性采样</a>。通过重要性采样，可以有效利用当前策略的行动期望，并针对新策略下的概率进行了修正：</p>
<p>$$<br>\begin{aligned}<br>J(\pi_{\theta + \Delta \theta}) &amp;&#x3D; J(\pi_{\theta}) + \sum_{s \in \mathcal{S}} \rho_{\pi_{\theta + \Delta \theta}}(s) \sum_{a \in \mathcal{A}} \pi_{\theta + \Delta \theta}(a | s) A^{\pi_{\theta}}(s, a) \\<br>&amp;&#x3D; J(\pi_{\theta}) + \mathbb{E}<em>{s \sim \rho</em>{\pi_{\theta + \Delta \theta}}} \pi_{\theta + \Delta \theta}(a | s) A^{\pi_{\theta}}(s, a) \\<br>&amp;\approx J(\pi_{\theta}) + \mathbb{E}<em>{s \sim \rho</em>{\pi_{\theta}}} \frac{\pi_{\theta + \Delta \theta}(a | s)}{\pi_{\theta}(a | s)} A^{\pi_{\theta}}(s, a)<br>\end{aligned}<br>$$</p>
<p>描述更新策略相对于原策略的预期优势称为替代优势：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) - J(\pi_{\theta}) \approx \mathbb{E}<em>{s \sim \rho</em>{\pi_{\theta}}} \frac{\pi_{\theta + \Delta \theta}(a | s)}{\pi_{\theta}(a | s)} A^{\pi_{\theta}}(s, a) &#x3D; \mathcal{L}<em>{\pi</em>{\theta}}(\pi_{\theta + \Delta \theta})<br>$$</p>
<p>之前产生的近似误差可以用两种策略之间最坏情况的KL散度表示：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) - J(\pi_{\theta}) \ge \mathcal{L}<em>{\pi</em>{\theta}}(\pi_{\theta + \Delta \theta}) - C \mathcal{D}<em>{KL}^{\max} (\pi</em>{\theta} || \pi_{\theta + \Delta \theta})<br>$$</p>
<p>论文中推导出$C$的值以及目标函数改进的下限。如果我们改进右侧，可以保证左侧也得到改进。本质上，如果替代优势$\mathcal{L}<em>{\pi</em>{\theta}}(\pi_{\theta + \Delta \theta})$超过最坏情况下的近似误差$C \mathcal{D}<em>{KL}^{\max} (\pi</em>{\theta} || \pi_{\theta + \Delta \theta})$，我们一定会改进目标。</p>
<p>这就是<strong>单调改进定理</strong>。相应的过程是<strong>最小化最大化算法（MM）</strong>。即如果我们改进下限，我们也会将目标改进至少相同的量。</p>
<h2 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h2><p>在实际的算法实现方面，TRPO和自然策略梯度算法没有太大的区别。TRPO的核心是利用单调改进定理，验证更新是否真正改进了我们的策略。</p>
<p>咕咕咕</p>
<!-- ### **共轭梯度法（conjugate gradient method）**

在自然策略梯度算法中，计算逆Fisher矩阵是一个耗时且数值不稳定的过程，特别是对于神经网络，参数矩阵可以变得非常大，$O(\theta^3)$的时间复杂度将无法计算。

好消息是，我们对逆矩阵本身并不感兴趣。观察自然策略梯度的方程式，如果我们可以直接得到乘积$F^{-1}\nabla \log \pi_{\theta}(x)$，就不再需要逆。

引入共轭梯度法，这是一个近似上式乘积的数值过程，这样我们就可以避免计算逆矩阵。共轭梯度通常在$|\theta|$步内收敛，从而可以处理大矩阵。

### 线搜索（line search）

虽然自然梯度策略中提供了给定KL散度约束的最佳步长，但由于存在较多的近似值，实际上可能不满足该约束。

TRPO 通过执行线搜索来解决此问题，通过不断地迭代减小更新的大小，直到第一个不违反约束的更新。这个过程可以看作是不断缩小信任区域，即我们相信更新可以实际改进目标的区域。 -->

<h1 id="近端策略优化算法（PPO）"><a href="#近端策略优化算法（PPO）" class="headerlink" title="近端策略优化算法（PPO）"></a>近端策略优化算法（PPO）</h1><h2 id="TRPO算法的缺陷"><a href="#TRPO算法的缺陷" class="headerlink" title="TRPO算法的缺陷"></a>TRPO算法的缺陷</h2><ul>
<li>无法处理大参数矩阵</li>
<li>二阶优化很慢</li>
<li>TRPO 很复杂</li>
</ul>
<h2 id="PPO-Penalty"><a href="#PPO-Penalty" class="headerlink" title="PPO Penalty"></a>PPO Penalty</h2><p>TRPO在理论分析上推导出与KL散度相乘的惩罚项，但在实践中，这种惩罚往往过于严格，只产生非常小的更新。因此，问题是如何可靠地确定缩放参数$\beta$，同时避免overshooting：</p>
<p>$$<br>\Delta \theta^* &#x3D; \argmax_{\Delta \theta} \mathcal{L}<em>{\theta + \Delta \theta}(\theta + \Delta \theta) - \beta \mathcal{D}</em>{KL}(\pi_{\theta} || \pi_{\theta + \Delta \theta})<br>$$</p>
<p>PPO通过设置目标散度$\delta$的方式解决了这个问题，希望我们的每次更新都位于目标散度附近的某个地方。目标散度应该大到足以显著改变策略，但又应该小到足以使更新稳定。</p>
<p>每次更新后，PPO都会检查更新的大小。如果最终更新的散度超过目标散度的1.5倍，则下一次迭代我们将加倍$\beta$来更加重惩罚。相反，如果更新太小，我们将$\beta$减半，从而有效地扩大信任区域。迭代更新的思路与TRPO线搜索有一些相似之处，但PPO搜索是在两个方向上都有效的，而TRPO是单向减小的。</p>
<p>只是基于启发式确定的。根据经验，PPO对数值设置是非常不敏感的。总之，我们牺牲了一些数学上的严谨性来使实际的效果更好。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: initial policy parameters theta_0, initial KL penalty beta_0, target KL-divergence delta</span><br><span class="line">for k = 0, 1, 2, ... do</span><br><span class="line">    Collect set of partial trajectories D_k on policy pi_k = pi_&#123;theta_k&#125;</span><br><span class="line">    Estimate advantages A_t^&#123;pi_k&#125; using any advantage estimation algorithm</span><br><span class="line">    Compute policy update:</span><br><span class="line">        theta_&#123;k + 1&#125; = argmax(theta, L_&#123;theta_k&#125;(theta) - beta_k * D_&#123;KL&#125;(theta || theta_k))</span><br><span class="line">    by taking K steps of minibatch SGD (via Adam)</span><br><span class="line">    if D_&#123;KL&#125;(theta_&#123;k + 1&#125; || theta_k) &gt;= 1.5 delta then</span><br><span class="line">        beta_&#123;k + 1&#125; = beta_&#123;k&#125; * 2</span><br><span class="line">    else if D_&#123;KL&#125;(theta_&#123;k + 1&#125; || theta_k) &lt;= delta / 1.5 then</span><br><span class="line">        beta_&#123;k + 1&#125; = beta_&#123;k&#125; / 2</span><br><span class="line">    else</span><br><span class="line">        beta_&#123;k + 1&#125; = beta_k</span><br></pre></td></tr></table></figure>

<h2 id="PPO-Clip"><a href="#PPO-Clip" class="headerlink" title="PPO Clip"></a>PPO Clip</h2><p>与其费心随着时间的推移改变惩罚，PPO Clip直接限制策略可以改变的范围。我们重新定义了替代优势：</p>
<p>$$<br>\mathcal{L}<em>{\pi</em>{\theta}}^{CLIP}(\pi_{\theta_k}) \\<br>&#x3D; \mathbb{E}<em>{\tau \sim \pi</em>{\theta}} \left[ \sum_{t&#x3D;0}^T [\min \left( \rho_t(\pi_{\theta}, \pi_{\theta_k})A_{t}^{\pi_{\theta_k}}, clip(\rho_t(\pi_{\theta}, \pi_{\theta_k}), 1 - \epsilon, 1 + \epsilon)A_{t}^{\pi_{\theta_k}} \right)] \right]<br>$$</p>
<p>$\rho_t$ 为重要性采样：</p>
<p>$$<br>\rho_t(\theta) &#x3D; \frac{\pi_{\theta}(a_t | s_t)}{\pi_{\theta_k}(a_t | s_t)}<br>$$</p>
<p>为了实现想要达到的效果，我们应该调整$\epsilon$，作为对KL散度的隐式限制。根据经验，$\epsilon&#x3D;0.1 or 0.2$是实际效果较好的值。</p>
<h2 id="PPO2"><a href="#PPO2" class="headerlink" title="PPO2"></a>PPO2</h2><p>PPO2是Open AI发布的算法更新版本，是矢量化环境的PPO算法实现，针对 GPU 进行了优化，更好地支持并行训练。它与PPO也有许多实际实现的差异，例如优势被自动归一化、价值函数被裁剪等，但与本文概述的PPO具有相同的数学基础。如果需要直接使用OpenAI实现的PPO算法，则应该使用PPO2。</p>
]]></content>
      <tags>
        <tag>reinforcement learning</tag>
      </tags>
  </entry>
  <entry>
    <title>有关python环境的一些指南</title>
    <url>/2025/07/27/python-yi-xie-zhi-nan/</url>
    <content><![CDATA[<span id="more"></span>

<p><a href="https://pytorch.org/">&gt; PyTorch &lt;</a></p>
<p>[TOC]</p>
<h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n <span class="variable">$&#123;environment_name&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate <span class="variable">$&#123;environment_name&#125;</span></span><br><span class="line"><span class="comment"># conda deactivate $&#123;environment_name&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="选择python版本"><a href="#选择python版本" class="headerlink" title="选择python版本"></a>选择python版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install python=<span class="variable">$&#123;python_version&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="安装cuda"><a href="#安装cuda" class="headerlink" title="安装cuda"></a>安装cuda</h2><p><a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#ubuntu">&gt; official website &lt;</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install cudatoolkit==<span class="variable">$&#123;cuda_version&#125;</span> -c nvidia</span><br><span class="line">conda install cuda -c nvidia/label/cuda-<span class="variable">$&#123;cuda_version&#125;</span></span><br><span class="line">conda install nvidia::cuda-nvcc <span class="comment"># an alternative way</span></span><br></pre></td></tr></table></figure>

<h2 id="安装PyTorch"><a href="#安装PyTorch" class="headerlink" title="安装PyTorch"></a>安装PyTorch</h2><p><a href="https://pytorch.org/">&gt; PyTorch &lt;</a></p>
<h2 id="This-transaction-has-incompatible-packages-due-to-a-shared-path"><a href="#This-transaction-has-incompatible-packages-due-to-a-shared-path" class="headerlink" title="This transaction has incompatible packages due to a shared path."></a>This transaction has incompatible packages due to a shared path.</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda clean --all</span><br></pre></td></tr></table></figure>

<h2 id="安装torch-scatter"><a href="#安装torch-scatter" class="headerlink" title="安装torch-scatter"></a>安装torch-scatter</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pytorch-scatter -c pyg</span><br></pre></td></tr></table></figure>

<h2 id="查询cuda-memory"><a href="#查询cuda-memory" class="headerlink" title="查询cuda memory"></a>查询cuda memory</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi --query-gpu=memory.total,memory.used --format=csv</span><br></pre></td></tr></table></figure>

<h2 id="检查当前GPU内存占用情况"><a href="#检查当前GPU内存占用情况" class="headerlink" title="检查当前GPU内存占用情况"></a>检查当前GPU内存占用情况</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi --query-compute-apps=pid,name,gpu_bus_id,used_memory --format=csv</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvidia-smi --help-query-compute-apps</span><br><span class="line"></span><br><span class="line">List of valid properties to query <span class="keyword">for</span> the switch <span class="string">&quot;--query-compute-apps&quot;</span>:</span><br><span class="line"></span><br><span class="line">Section about Active Compute Processes properties</span><br><span class="line">List of processes having compute context on the device.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;timestamp&quot;</span></span><br><span class="line">The timestamp of when the query was made <span class="keyword">in</span> format <span class="string">&quot;YYYY/MM/DD HH:MM:SS.msec&quot;</span>.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gpu_name&quot;</span></span><br><span class="line">The official product name of the GPU. This is an alphanumeric string. For all products.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gpu_bus_id&quot;</span></span><br><span class="line">PCI bus <span class="built_in">id</span> as <span class="string">&quot;domain:bus:device.function&quot;</span>, <span class="keyword">in</span> hex.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gpu_serial&quot;</span></span><br><span class="line">This number matches the serial number physically printed on each board. It is a globally unique immutable alphanumeric value.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gpu_uuid&quot;</span></span><br><span class="line">This value is the globally unique immutable alphanumeric identifier of the GPU. It does not correspond to any physical label on the board.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;pid&quot;</span></span><br><span class="line">Process ID of the compute application</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;process_name&quot;</span> or <span class="string">&quot;name&quot;</span></span><br><span class="line">Process Name</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;used_gpu_memory&quot;</span> or <span class="string">&quot;used_memory&quot;</span></span><br><span class="line">Amount memory used on the device by the context. Not available on Windows when running <span class="keyword">in</span> WDDM mode because Windows KMD manages all the memory not NVIDIA driver.</span><br></pre></td></tr></table></figure>

<h1 id="orin安装pytorch"><a href="#orin安装pytorch" class="headerlink" title="orin安装pytorch"></a>orin安装pytorch</h1><h2 id="error-‘class-torch-Library’-has-no-member-named-‘set-python-module’-22"><a href="#error-‘class-torch-Library’-has-no-member-named-‘set-python-module’-22" class="headerlink" title="error: ‘class torch::Library’ has no member named ‘set_python_module’ 22"></a>error: ‘class torch::Library’ has no member named ‘set_python_module’ 22</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pytorch/vision torchvision</span><br><span class="line"><span class="built_in">cd</span> torchvision</span><br><span class="line">git checkout v0.16.0</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="安装timm"><a href="#安装timm" class="headerlink" title="安装timm"></a>安装timm</h2><p><a href="https://blog.csdn.net/zlbbme/article/details/128647059">&gt; link &lt;</a></p>
<p><a href="https://pypi.tuna.tsinghua.edu.cn/simple/timm/">&gt; package &lt;</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget &lt;package&gt;.whl</span><br><span class="line">pip install &lt;package&gt;.whl</span><br></pre></td></tr></table></figure>

<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><h2 id="下载数据集"><a href="#下载数据集" class="headerlink" title="下载数据集"></a>下载数据集</h2><h3 id="用-wget-下载-KITTI-上的数据"><a href="#用-wget-下载-KITTI-上的数据" class="headerlink" title="用 wget 下载 KITTI 上的数据"></a>用 wget 下载 KITTI 上的数据</h3><p>先开代理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -b &lt;<span class="built_in">link</span>&gt;.zip</span><br></pre></td></tr></table></figure>

<p>查看进度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f wget-log</span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip &lt;name&gt;.zip</span><br></pre></td></tr></table></figure>

<h3 id="从drive-google下载"><a href="#从drive-google下载" class="headerlink" title="从drive google下载"></a>从drive google下载</h3><p><a href="https://blog.csdn.net/qq_43235540/article/details/135976536">&gt; link &lt;</a></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="一文解决-RuntimeError-CUDA-out-of-memory-全网最全"><a href="#一文解决-RuntimeError-CUDA-out-of-memory-全网最全" class="headerlink" title="一文解决 RuntimeError: CUDA out of memory. 全网最全"></a>一文解决 RuntimeError: CUDA out of memory. 全网最全</h2><p><a href="https://blog.csdn.net/m0_50502579/article/details/126059178">&gt; link &lt;</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    depth_pred = model(rgb)</span><br></pre></td></tr></table></figure>

<h1 id="Linux的一些操作"><a href="#Linux的一些操作" class="headerlink" title="Linux的一些操作"></a>Linux的一些操作</h1><h2 id="读取当前路径下的文件总大小"><a href="#读取当前路径下的文件总大小" class="headerlink" title="读取当前路径下的文件总大小"></a>读取当前路径下的文件总大小</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>三（四）元环计数</title>
    <url>/2025/07/27/san-si-yuan-huan-ji-shu/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="无向图三元环计数"><a href="#无向图三元环计数" class="headerlink" title="无向图三元环计数"></a>无向图三元环计数</h3><p>将边定向，度数少的点连向度数多的点，度数相同时编号小的连向编号大的。这样保证一个点它的出度不会超过 $ O(\sqrt{m}) $ （因为原本度数大于 $ \sqrt{m} $ 的点不会超过 $ \sqrt{m} $ 个）。<br>然后暴力。对于每个$u$，找$ v \in e[u] $, $ w \in e[v] $ ,若 $ w \in e[u] $ 那么找到三元环。一个个数就行。  </p>
<h3 id="无向图四元环计数"><a href="#无向图四元环计数" class="headerlink" title="无向图四元环计数"></a>无向图四元环计数</h3><p>和无向图三元环计数一样将边定向，不同的是计数方式会麻烦一点。<br>定向后四元环会出现两种情况：<br>$$<br>1 \rightarrow 2, 2 \rightarrow 3, 3 \rightarrow 4, 1 \rightarrow 4\<br>1 \rightarrow 2, 2 \rightarrow 3, 1 \rightarrow 4, 4 \rightarrow 3<br>$$<br>考虑通过对角$2, 4$ 计数。先将点按照定向后的图拓扑排序。先对于每一个$2$，找$ 1 \in ee[2] $, $ 3 \in ee[2] $, $ 4 \in e[1] $, $ 4 \in e[1] $, $ 4 $的拓扑序在$2$后，其中ee代表的是原图的边，e代表的是定向后的边。开个数组统计。  </p>
<p>时间复杂度都是 $ O(m \sqrt{m}) $ 。  </p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, M = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m, d[N], id[N], rnk[N];</span><br><span class="line"><span class="type">int</span> ex[M], ey[M];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], ee[N];</span><br><span class="line"><span class="type">int</span> cnt3 = <span class="number">0</span>, cnt4 = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> vis[N]; <span class="type">int</span> num[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		e[i].<span class="built_in">clear</span>(), ee[i].<span class="built_in">clear</span>();</span><br><span class="line">		vis[i] = <span class="number">0</span>, num[i] = <span class="number">0</span>;</span><br><span class="line">		cnt3 = cnt4 = <span class="number">0</span>;</span><br><span class="line">		d[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;ex[i], &amp;ey[i]);</span><br><span class="line">		++d[ex[i]], ++d[ey[i]];</span><br><span class="line">		ee[ex[i]].<span class="built_in">pb</span>(ey[i]), ee[ey[i]].<span class="built_in">pb</span>(ex[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x = ex[i], y = ey[i];</span><br><span class="line">		<span class="keyword">if</span>(d[x] &gt; d[y] || (d[x] == d[y] &amp;&amp; x &gt; y)) <span class="built_in">swap</span>(x, y);</span><br><span class="line">		e[x].<span class="built_in">pb</span>(y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[i]) vis[v] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> u : e[i]) <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(vis[v]) ++cnt3;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[i]) vis[v] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) id[i] = i;</span><br><span class="line">	<span class="built_in">sort</span>(id + <span class="number">1</span>, id + n + <span class="number">1</span>, [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123; <span class="keyword">return</span> d[x] != d[y] ? d[x] &lt; d[y] : x &lt; y; &#125;);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rnk[id[i]] = i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> u : ee[i]) <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(rnk[v] &gt; rnk[i])</span><br><span class="line">			cnt4 = (cnt4 + num[v]) % mod, num[v]++;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> u : ee[i]) <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(rnk[v] &gt; rnk[i]) num[v] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, cnt3, cnt4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> T; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">	<span class="keyword">for</span>(; T; --T) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="有向图三（四）元环计数"><a href="#有向图三（四）元环计数" class="headerlink" title="有向图三（四）元环计数"></a>有向图三（四）元环计数</h3><p>先将边看作无向边，枚举（统计）环的时候再判断方向即可。  </p>
<h3 id="竞赛图找三元环"><a href="#竞赛图找三元环" class="headerlink" title="竞赛图找三元环"></a>竞赛图找三元环</h3><p>只要不是拓扑图就有三元环。  </p>
<h3 id="竞赛图三元环计数"><a href="#竞赛图三元环计数" class="headerlink" title="竞赛图三元环计数"></a>竞赛图三元环计数</h3><p>容斥。<br>$$<br>Ans &#x3D; C(n, 3) - \sum_{i&#x3D;1}^{n}C(d_i, 2) \space d_i表示i点的出度<br>$$</p>
]]></content>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch-checkpoints相关</title>
    <url>/2025/07/27/pytorch-checkpoints/</url>
    <content><![CDATA[<span id="more"></span>

<p>[TOC]</p>
<h2 id="checkpoints-导出"><a href="#checkpoints-导出" class="headerlink" title="checkpoints 导出"></a>checkpoints 导出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.save(&#123;<span class="string">&#x27;model_state_dict&#x27;</span>: model.state_dict()&#125;, <span class="string">&#x27;/path/to/checkpoints&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="checkpoints-导入"><a href="#checkpoints-导入" class="headerlink" title="checkpoints 导入"></a>checkpoints 导入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">state = torch.load(<span class="string">&#x27;/path/to/checkpoints&#x27;</span>)</span><br><span class="line">model.load_state_dict(state[<span class="string">&#x27;model_state_dict&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h2 id="model-state-dict-描述"><a href="#model-state-dict-描述" class="headerlink" title="model.state_dict() 描述"></a>model.state_dict() 描述</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(method) <span class="keyword">def</span> <span class="title function_">state_dict</span>(<span class="params"></span></span><br><span class="line"><span class="params">    *,</span></span><br><span class="line"><span class="params">    prefix: <span class="built_in">str</span> = ...,</span></span><br><span class="line"><span class="params">    keep_vars: <span class="built_in">bool</span> = ...</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span><br></pre></td></tr></table></figure>

<h2 id="model-state-dict-keys"><a href="#model-state-dict-keys" class="headerlink" title="model.state_dict().keys()"></a>model.state_dict().keys()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sequential(</span><br><span class="line">  (0): Conv2d(3, 16, kernel_size=(11, 11), stride=(3, 3))</span><br><span class="line">  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span><br><span class="line">  (2): ReLU(inplace=True)</span><br><span class="line">  (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="line">  (4): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1))</span><br><span class="line">  (5): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span><br><span class="line">  (6): ReLU(inplace=True)</span><br><span class="line">  (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="line">  (8): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="line">  (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span><br><span class="line">  (10): ReLU(inplace=True)</span><br><span class="line">  (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))</span><br><span class="line">  (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span><br><span class="line">  (13): ReLU(inplace=True)</span><br><span class="line">  (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="line">  (15): Flatten(start_dim=1, end_dim=-1)</span><br><span class="line">  (16): Linear(in_features=3136, out_features=2048, bias=True)</span><br><span class="line">  (17): ReLU(inplace=True)</span><br><span class="line">  (18): Linear(in_features=2048, out_features=1, bias=True)</span><br><span class="line">  (19): Sigmoid()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(model.state_dict().keys())</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">odict_keys([&#x27;0.weight&#x27;, &#x27;0.bias&#x27;, &#x27;1.weight&#x27;, &#x27;1.bias&#x27;, &#x27;1.running_mean&#x27;, &#x27;1.running_var&#x27;, &#x27;1.num_batches_tracked&#x27;, &#x27;4.weight&#x27;, &#x27;4.bias&#x27;, &#x27;5.weight&#x27;, &#x27;5.bias&#x27;, &#x27;5.running_mean&#x27;, &#x27;5.running_var&#x27;, &#x27;5.num_batches_tracked&#x27;, &#x27;8.weight&#x27;, &#x27;8.bias&#x27;, &#x27;9.weight&#x27;, &#x27;9.bias&#x27;, &#x27;9.running_mean&#x27;, &#x27;9.running_var&#x27;, &#x27;9.num_batches_tracked&#x27;, &#x27;11.weight&#x27;, &#x27;11.bias&#x27;, &#x27;12.weight&#x27;, &#x27;12.bias&#x27;, &#x27;12.running_mean&#x27;, &#x27;12.running_var&#x27;, &#x27;12.num_batches_tracked&#x27;, &#x27;16.weight&#x27;, &#x27;16.bias&#x27;, &#x27;18.weight&#x27;, &#x27;18.bias&#x27;])</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>「ZJOI2015」幻想乡战略游戏</title>
    <url>/2025/07/27/ZJOI2015-huan-xiang-xiang-zhan-lue-you-xi/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2135">「ZJOI2015」幻想乡战略游戏</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>原问题实则为动态求带权重心问题。设每个点的花费为 $ W_i $ ， 从任意非带权重心一点出发，每次向相邻的点中 $ W_v $ 最小的走，最后会走到带权重心。<br>如果已知 $ W_u $ ，求 $ u $ 的子节点 $ v $ 的 $ W_v $ 。设 $ len(u, v) $ 为 $ u, v $ 间的距离， $ cnt_u $ 为 $ u $ 子树内的军队单位数，则 $ W_v &#x3D; W_u + len(u, v)(cnt_u - cnt_v \times 2) $ 。<br>考虑用点分治加速计算 $ W_u $ 并加速求解。每次向点分树子节点中存在比当前分治重心更优秀的点的子树跳，跳的过程复杂度 $ O(q \log n) $ 。<br>每次每个节点求 $ W_u $ 时间为 $ O(\log n) $ ，总时间复杂度为 $ O(n \log n + q \log^2 n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, m, lg[N];</span><br><span class="line">vector&lt;pii&gt; e[N], E[N];</span><br><span class="line"><span class="type">int</span> dfn[N], dep[N], idx = <span class="number">0</span>, st[<span class="number">18</span>][N]; ll Dep[N];</span><br><span class="line"><span class="type">int</span> sz[N], mx[N], root, size, rt;</span><br><span class="line"><span class="type">bool</span> vis[N]; <span class="type">int</span> fa[N];</span><br><span class="line"><span class="type">int</span> id[N]; ll sum[N], cnt[N];</span><br><span class="line">ll dn[N], up[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	x = dfn[x], y = dfn[y]; <span class="keyword">if</span>(x &gt; y) <span class="built_in">swap</span>(x, y); <span class="type">int</span> k = y - x + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> dep[st[lg[k]][x]] &lt;= dep[st[lg[k]][y - (<span class="number">1</span> &lt;&lt; lg[k]) + <span class="number">1</span>]] ? st[lg[k]][x] : st[lg[k]][y - (<span class="number">1</span> &lt;&lt; lg[k]) + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dis</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> Dep[x] + Dep[y] - Dep[<span class="built_in">LCA</span>(x, y)] * <span class="number">2</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	dep[u] = dep[ff] + <span class="number">1</span>, dfn[u] = ++idx, st[<span class="number">0</span>][idx] = u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v.fst != ff) Dep[v.fst] = Dep[u] + v.snd, <span class="built_in">dfs1</span>(v.fst, u), st[<span class="number">0</span>][++idx] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getrt</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	sz[u] = <span class="number">1</span>, mx[u] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v.fst != ff &amp;&amp; !vis[v.fst])</span><br><span class="line">		<span class="built_in">getrt</span>(v.fst, u), sz[u] += sz[v.fst], mx[u] = <span class="built_in">max</span>(mx[u], sz[v.fst]);</span><br><span class="line">	mx[u] = <span class="built_in">max</span>(mx[u], size - sz[u]); <span class="keyword">if</span>(mx[u] &lt; mx[root]) root = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">getrt</span>(u, <span class="number">0</span>), vis[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(!vis[v.fst]) &#123;</span><br><span class="line">		mx[root = <span class="number">0</span>] = size = sz[v.fst], <span class="built_in">getrt</span>(v.fst, <span class="number">0</span>);</span><br><span class="line">		E[u].<span class="built_in">pb</span>(<span class="built_in">mp</span>(root, v.fst)), fa[root] = u, <span class="built_in">build</span>(root);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), lg[<span class="number">0</span>] = <span class="number">-1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, idx) lg[i] = lg[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(j, <span class="number">1</span>, <span class="number">17</span>)</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, idx - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>)</span><br><span class="line">			st[j][i] = dep[st[j - <span class="number">1</span>][i]] &lt;= dep[st[j - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)]] ? st[j - <span class="number">1</span>][i] : st[j - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)];</span><br><span class="line">	mx[root = <span class="number">0</span>] = size = n, <span class="built_in">getrt</span>(<span class="number">1</span>, <span class="number">0</span>), rt = root, <span class="built_in">build</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	cnt[x] += w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x; fa[i]; i = fa[i]) &#123;</span><br><span class="line">		ll dis = <span class="built_in">Dis</span>(fa[i], x); dn[fa[i]] += dis * w, up[i] += dis * w, cnt[fa[i]] += w;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	ll res = dn[x];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x; fa[i]; i = fa[i]) &#123;</span><br><span class="line">		ll dis = <span class="built_in">Dis</span>(fa[i], x); res += dn[fa[i]] - up[i] + dis * (cnt[fa[i]] - cnt[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qry</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	ll res = <span class="built_in">calc</span>(x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : E[x]) <span class="keyword">if</span>(<span class="built_in">calc</span>(v.snd) &lt; res) <span class="keyword">return</span> <span class="built_in">qry</span>(v.fst);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y, z; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z), e[x].<span class="built_in">pb</span>(<span class="built_in">mp</span>(y, z)), e[y].<span class="built_in">pb</span>(<span class="built_in">mp</span>(x, z)); &#125;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x, y; m; --m) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), <span class="built_in">mdy</span>(x, y), <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">qry</span>(rt));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title>退役后的日子</title>
    <url>/2025/07/27/tui-yi-hou-de-ri-zi/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="2022-9-24"><a href="#2022-9-24" class="headerlink" title="2022.9.24"></a>2022.9.24</h3><p><a href="https://codeforces.com/contest/1479/problem/D">CF1479D Odd Mineral Resource</a><br>假如不需要知道路径上哪些数只出现奇数次，那么这道题及类似于<a href="https://uoj.ac/problem/207">共价大爷游长沙</a>。<br>现在考虑如何找出路径上出现奇数次，范围在 $ [l, r] $ 之间的任意数。考虑用欧拉序的方式来维护路径，具体用主席树维护某一个值的出现次数。<br><a href="https://codeforces.com/contest/1479/submission/172846022">My Submission</a>  </p>
<p><a href="https://codeforces.com/contest/1515/problem/I">CF1515I Phoenix and Diamonds</a><br>读错题意若干次QAQ<br>如果用线段树暴力维护，每次选择连续一段尽可能取走，很容易被卡复杂度，实测Time Limit Exceeded on Test 71。<br>由于 $ c $ 一开始非常大，$ w_i $ 则较小，前面可以尽可能取，直到剩下的 $ c $ 小于 $ 10^5 $ 。<br>考虑对于每个 $ c $ ，大于 $ \lfloor c \rfloor $ 最多取一次，剩下的要在小于 $ \lfloor c \rfloor $ 中取。由于取的顺序是一定的，所以可以通过线段树维护能取到 $ \lfloor c \rfloor $ 的哪一个钻石，对于小于 $ \lfloor c \rfloor $ 的可以用另一个线段树维护。<br>考虑对于不同的 $ c $，$ \lfloor c \rfloor $ 会不同，难以预处理。直接按二进制按位预处理即可。<br><a href="https://codeforces.com/contest/1515/problem/I">My Submission</a>  </p>
<p>昨天CF有点摆。。。周末还有icpc网络赛。。。<br>晚上打了把ABC，状态极度不佳，明天靠队友。。。  </p>
<h3 id="2022-9-25"><a href="#2022-9-25" class="headerlink" title="2022.9.25"></a>2022.9.25</h3><p>dbq QAQ，我是罚时机器。。。<br>今天状态很不对，很多莫名其妙的错误同一天犯（数组开小、忘记取min，题意看错），好在队友发挥了作用，最后八题垫底（我的锅）（但我还是写了七道）  </p>
<h3 id="2022-9-28"><a href="#2022-9-28" class="headerlink" title="2022.9.28"></a>2022.9.28</h3><p>技能CD了一下，稍微暖一下手感~<br><a href="https://www.luogu.com.cn/problem/P5115">Check,Check,Check one two!</a><br>用后缀自动机维护parent树，任意两个endpos的lca的len是它们的最长公共前缀。<br>对于点对 $ (i, j) $ ， $ s[i - a + 1, i + b - 1] &#x3D; s[j - a + 1, j + b - 1] $ ，则贡献为 $ a \times b $ 。我们现在很容易地维护了前缀，考虑后缀如何处理。由于每个点对 $ (i, j) $ ，它们会在 $ (i + 1, j + 1) $ 至 $ (i + b - 1, j + b - 1) $ 都计算一边，故每次加上贡献 $ a $ 即可。<br>考虑 $ k1, k2 $ 的限制。对 $ (i, j) $ 已知的前缀进行约束，即直接统计点对在该前缀子串上都合法的情况。此外，对于 $ s[m, m + k1] $ （举个栗子），之前在 $ m $ 处的贡献应减去，且减去后不会对此再有影响。<br><a href="https://www.luogu.com.cn/record/87858659">My Submission</a><br>PS: LJ不在QQ群里供题了啊QAQ，日常口胡断粮了<br>最近要期中考，考虑先放一放ACM，先苟住学分绩。。。  </p>
<h3 id="2022-10-3"><a href="#2022-10-3" class="headerlink" title="2022.10.3"></a>2022.10.3</h3><p><a href="https://www.cnblogs.com/daniel14311531/p/16751516.html">&gt; Here &lt;</a>  </p>
<h3 id="2022-10-4"><a href="#2022-10-4" class="headerlink" title="2022.10.4"></a>2022.10.4</h3><p><a href="https://codeforces.com/problemset/problem/1734/F">CF1734F Zeros and Ones</a><br>为什么我想不到QAQ<br><a href="https://zhuanlan.zhihu.com/p/567630176">Solution from Zhihu</a>  </p>
<h3 id="2022-10-5"><a href="#2022-10-5" class="headerlink" title="2022.10.5"></a>2022.10.5</h3><p><a href="https://codeforces.com/contest/1712/problem/F">CF1712F Triameter</a><br><a href="https://codeforces.com/contest/1712/submission/174760486">My Submission</a>  </p>
<h3 id="2022-10-8"><a href="#2022-10-8" class="headerlink" title="2022.10.8"></a>2022.10.8</h3><p><a href="https://atcoder.jp/contests/agc009/tasks/agc009_d">AGC009D Uninity</a><br>题意实际上是求最大深度最小的点分树的深度。<br>考虑正常点分治下层数已经是 $ \mathcal{O}(\log n) $ 的，那么最优状态下一定小于正常点分治的深度，即深度状态可以状态压缩。<br>将节点按 $ 0, 1, 2, \dots, k $ 编号表示节点的Uninity值，其中叶子节点编号为 $ 0 $ 。<br>根据点分树的性质，任意两个编号相同的节点路径上一定存在编号比它们大的节点。<br>每个节点存状态数组 $ ned[u] $ ，表示 $ u $ 节点的子树内未完成成对匹配的编号，按位存储。对于 $ u $ ，假设有两个不同的子节点 $ v, w $ ，若 $ \exist x, 2^{x} \in ned[v] \and ned[w] $ ，则 $ u $ 节点编号要大于 $ x $ ，否则 $ u $ 子树下编号为 $ x $ 将无法完成匹配。同时，若 $ \exist x, 2^{x} \in ned[v] $ ，则 $ u $ 也不能选 $ x $ ，否则 $ u $ 会与 $ v $ 子树内的同编号点无法匹配。<br>$ u $ 的编号从小到大贪心取即可。通过位运算骚操作可以让复杂度变为 $ \mathcal{O}(n) $ 。<br>[My Submission])(<a href="https://atcoder.jp/contests/agc009/submissions/35453858">https://atcoder.jp/contests/agc009/submissions/35453858</a>)  </p>
<h3 id="2022-10-9"><a href="#2022-10-9" class="headerlink" title="2022.10.9"></a>2022.10.9</h3><p>突然发现自己构造能力很差，再不补就是弱鸡水平了。<br>今天看到一个构造，要求构造一个 不存在长度大于等于3的等差子序列 的排列。方法大概是先将奇偶分开，奇数在前，偶数在后，这样不存在既有奇数又有偶数的等差子序列。再将奇数列和偶数列递归构造。这种方法同样适用于构造已知元素的数列，使它等差子序列个数尽可能少。<br>补了一下ICPC2022网络赛第一场的K题（可以在pintia上看）。可以发现最多不能击败 $ 2 \sqrt{\max{x_i}} $ ，因为可以先花 $ \sqrt{max{x_i}} $ 的时间叠buff，再花同样的时间将buff叠战力，然后无敌。同样，buff最多叠 $ \sqrt{max{x_i}} $ 层，因为多叠的一层的时间将它用来叠战力，到无敌时始终更优。然后dp，$ f[i][j][k] $ 表示干了第i个，没干掉j个，buff层数为k的最大战力。<br>这周戒题，准备期中考。  </p>
<h3 id="2022-10-18"><a href="#2022-10-18" class="headerlink" title="2022.10.18"></a>2022.10.18</h3><p><a href="https://atcoder.jp/contests/agc023/tasks/agc023_f">AGC023F 01 on Tree</a><br>观察不难发现，父亲节点一定先于儿子节点取，对于每个儿子向父亲合并时，最优策略一定是儿子的序列进行归并（每个儿子的子序列保持不变）。这有了递归的基础。<br>此外，我们还可以发现，假如当前有0，则能取尽取；如果有1，则取尽可能少的1去获得足量的0。考虑对于一个01序列，假如取了前面的一串1，则后面紧跟着的一串0都要跟着取，也就是类似11…100…0这样的取法是绑定的，不会在归并时改变。考虑取法的优先级。设这样的序列$a, b$ ，其中 $a_0, a_1, b_0, b_1$ 分别表示各自0、1的个数，比较相对位置，若$ a_1 \times b_0 &lt; b_1 \times a_0 $ ，则 $ a $ 在前更优。<br>此时已经可以直接dfs并用set维护11…100…0序列并暴力启发式合并了，不过这代码难度。。。<br>与其直接dfs，不如考虑一个序列如何直接接上父亲。如果这个序列是整棵树上最优的，那他可以直接接在父亲所在的序列后，然后合并成新的序列，虽然不满足11…100…0的形式，但是合并的贡献计算方式一致。用并查集和优先队列维护即可。<br><a href="https://atcoder.jp/contests/agc023/submissions/35758187">My Submission</a><br>（啊，这是凌晨写的）<br><a href="https://www.luogu.com.cn/blog/luotianze/solution-p5496#">PAM（回文自动机）</a>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2100010</span>;</span><br><span class="line"><span class="type">int</span> n, id[N];</span><br><span class="line"><span class="type">char</span> s[N]; <span class="type">int</span> len[N], fail[N], tot, sz[N], ch[N][<span class="number">26</span>], cur;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	len[<span class="number">0</span>] = <span class="number">0</span>, len[<span class="number">1</span>] = <span class="number">-1</span>, fail[<span class="number">0</span>] = <span class="number">1</span>, fail[<span class="number">1</span>] = <span class="number">0</span>, tot = <span class="number">1</span>, cur = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gfail</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(; now - len[x] - <span class="number">1</span> &lt; <span class="number">1</span> || s[now - len[x] - <span class="number">1</span>] != s[now]; x = fail[x]);</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> pos = <span class="built_in">gfail</span>(cur, now);</span><br><span class="line">	<span class="keyword">if</span>(!ch[pos][c]) &#123;</span><br><span class="line">		++tot;</span><br><span class="line">		fail[tot] = ch[<span class="built_in">gfail</span>(fail[pos], now)][c];</span><br><span class="line">		ch[pos][c] = tot, len[tot] = len[pos] + <span class="number">2</span>, sz[tot] = sz[fail[tot]] + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cur = ch[pos][c];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>), n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">		s[i] = (s[i] - <span class="number">97</span> + ans) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">		<span class="built_in">insert</span>(i, s[i] - <span class="number">97</span>), ans = sz[cur];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2022-10-26"><a href="#2022-10-26" class="headerlink" title="2022.10.26"></a>2022.10.26</h3><p>少年不知mt19937 rnd(time(0))贵，错把srand(time(0)) 当宝贝。  </p>
<h3 id="2022-11-6"><a href="#2022-11-6" class="headerlink" title="2022.11.6"></a>2022.11.6</h3><p>被各种事情搞得焦头烂额，又要大一年度项目又要思政实践项目又要考试又要竞赛，感觉再搞下去离大学ICPC&#x2F;CCPC退役都不远了。<br>今天下午是我的第一场ICPC，不奢求有多好的成绩吧，只希望能够尽可能好地发挥吧，最近状态极度不稳，水平在幼儿园和红名之间剧烈波动，构造题、思维题依旧是我的弱项。<br>铁了  </p>
<h3 id="2022-11-9"><a href="#2022-11-9" class="headerlink" title="2022.11.9"></a>2022.11.9</h3><p><a href="https://codeforces.com/gym/103428/problem/G">G. Shinyruo and KFC</a> 值域根号分治<br><a href="https://codeforces.com/gym/103428/problem/M">M. 810975</a> 隔板法  </p>
<h3 id="2022-11-12"><a href="#2022-11-12" class="headerlink" title="2022.11.12"></a>2022.11.12</h3><p>关于某个质数的剩余系的题原根是真的好用。原根可以把数的乘法变成原根上指数的加法，这样也可以快速计算二次剩余。对于每个质数都有原根。<br><a href="https://codeforces.com/gym/103428/problem/C">C. Assign or Multiply</a>利用原根把乘法变加法，用数组标记某个数是否出现过，每加入一个数，进行循环移位，找到循环移位后值不同的位置并修改，这个操作总共是不超过n次的，利用二分和树状数组维护的哈希来找到这些位置并修改。  </p>
<h3 id="2022-11-13"><a href="#2022-11-13" class="headerlink" title="2022.11.13"></a>2022.11.13</h3><p>假如不能比较两个数的两两关系（拓扑图而非竞赛图）的话还是不要用sort了吧。。。<br><a href="https://atcoder.jp/contests/abc277/tasks/abc277_h">Ex - Constrained Sums</a><br>约束 $ L \leq a + b, a \in [0, M], b \in [0, M] $ 等价于 $ \forall x \in [0, M], x \leq a \or L - x + 1 \leq b $ 成立，证明显然。如果是 $ a + b \leq R $ 的用互补律即可 $ (a \or b &#x3D; \overline{\overline{a} \and \overline{b}}) $ 。<br>然后2-sat，按照关系连边，详见代码<a href="https://atcoder.jp/contests/abc277/submissions/36472137">My Submission</a>  </p>
]]></content>
      <tags>
        <tag>口胡</tag>
      </tags>
  </entry>
  <entry>
    <title>【luogu5245】【模板】多项式快速幂</title>
    <url>/2025/07/27/luogu5245-duo-xiang-shi-kuai-su-mi/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problemnew/show/P5245">【luogu5245】【模板】多项式快速幂</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>这道题直接套快速幂被针对了。。。<br>考虑将多项式求 $ \ln $ 后乘上原指数再 $ \exp $ 回去等同于求幂。<br>直接放多项式全家桶了。。。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">		<span class="keyword">return</span> ss;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Add</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(Max(a.size(), b.size()))</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &lt; a.<span class="built_in">size</span>()) res[i] = <span class="built_in">add</span>(res[i], a[i]);</span><br><span class="line">			<span class="keyword">if</span>(i &lt; b.<span class="built_in">size</span>()) res[i] = <span class="built_in">add</span>(res[i], b[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(A[<span class="number">0</span>])), res;</span><br><span class="line">		res = <span class="built_in">Inv</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++)</span><br><span class="line">			res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Sqrt</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res;</span><br><span class="line">		res = <span class="built_in">Sqrt</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		res.<span class="built_in">resize</span>(sz), res = <span class="built_in">Add</span>(res, <span class="built_in">Mul</span>(tmp, <span class="built_in">Inv</span>(res)));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++)</span><br><span class="line">			res[i] = (res[i] &amp; <span class="number">1</span>) ? ((res[i] + mod) / <span class="number">2</span>) : (res[i] / <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Div</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B, vector&lt;<span class="type">int</span>&gt; &amp;D, vector&lt;<span class="type">int</span>&gt; &amp;R)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(B.<span class="built_in">size</span>() &gt; A.<span class="built_in">size</span>()) <span class="keyword">return</span> (<span class="type">void</span>)(D.<span class="built_in">clear</span>(), D.<span class="built_in">pb</span>(<span class="number">0</span>), R = A);</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; a = A, b = B, iB; <span class="type">int</span> n = A.<span class="built_in">size</span>(), m = B.<span class="built_in">size</span>();</span><br><span class="line">		<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">		b.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), iB = <span class="built_in">Inv</span>(b, n - m + <span class="number">1</span>);</span><br><span class="line">		D = <span class="built_in">Mul</span>(a, iB), D.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), <span class="built_in">reverse</span>(D.<span class="built_in">begin</span>(), D.<span class="built_in">end</span>());</span><br><span class="line">		R = <span class="built_in">Mul</span>(B, D);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) R[i] = (mod + A[i] - R[i]) % mod;</span><br><span class="line">		R.<span class="built_in">resize</span>(m - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ln</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; f, g = <span class="built_in">Inv</span>(A); f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; f.<span class="built_in">size</span>(); i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, A[i]);</span><br><span class="line">		f[f.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="number">0</span>, f = <span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = f.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) f[i] = <span class="built_in">mul</span>(f[i - <span class="number">1</span>], <span class="built_in">ksm</span>(i));</span><br><span class="line">		f[<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> f;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Exp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res;</span><br><span class="line">		res = <span class="built_in">Exp</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>), res.<span class="built_in">resize</span>(sz); vector&lt;<span class="type">int</span>&gt; tmp = <span class="built_in">Ln</span>(res);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); i++) tmp[i] = <span class="built_in">add</span>(<span class="built_in">sub</span>(<span class="number">0</span>, tmp[i]), A[i]);</span><br><span class="line">		tmp[<span class="number">0</span>] = <span class="built_in">add</span>(<span class="number">1</span>, tmp[<span class="number">0</span>]), res = <span class="built_in">Mul</span>(res, tmp);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;K)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res = <span class="built_in">Ln</span>(A); <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; K.<span class="built_in">size</span>(); i++) k = <span class="built_in">add</span>(<span class="built_in">mul</span>(k, <span class="number">10</span>), K[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) res[i]= <span class="built_in">mul</span>(res[i], k);</span><br><span class="line">		res = <span class="built_in">Exp</span>(res), res.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()); <span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a, b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, ed = <span class="built_in">strlen</span>(s); i &lt; ed; i++) b.<span class="built_in">pb</span>(s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, x; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), a.<span class="built_in">pb</span>(x);</span><br><span class="line">	a = Poly::<span class="built_in">Ksm</span>(a, b);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]); <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 533A】Berland Miners</title>
    <url>/2025/07/27/%E3%80%90Codeforces%20533A%E3%80%91Berland%20Miners/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://codeforces.com/problemset/problem/533/A">【Codeforces 533A】Berland Miners</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>先判定不修改是否合法。对于一个点 $ i $ ，它的价值为它到根节点 $ 1 $ 的路径上的最小值 $ mn[i] $（存在修改可能为次小值 $ nxt[i] $ ），将所有人的高度和 $ mn[i] $ 排序，山洞权值为 $ 1 $ ，人的权值为 $ -1 $ ，若任意前缀和都不小于 $ 0 $ ，则无需修改。<br>如果存在修改，那么一定要使得最后一个前缀和小于 $ 0 $ 的位置不小于 $ 0 $ ，这样处理就不需要二分了。<br>记录有多少个节点是取了 $ i $ 节点的 $ h_i $ ， $ i $ 节点的修改会影响到这些节点的值。用线段树维护前缀和（需要实现离散化权值）即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> multiset&lt;pii&gt;::iterator IT;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, h[N], m, a[N], lb[N], ans = INF, pos;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], chs[N];</span><br><span class="line"><span class="type">int</span> mn[N], nxt[N];</span><br><span class="line">multiset&lt;pii&gt; st;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123; <span class="type">int</span> mn, lz; &#125;; P tr[N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> pii &amp;x, <span class="type">const</span> pii &amp;y)</span> </span>&#123; <span class="keyword">return</span> x.fst &gt; y.fst; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	st.<span class="built_in">insert</span>(<span class="built_in">mp</span>(h[u], u)); IT it = st.<span class="built_in">begin</span>();</span><br><span class="line">	mn[u] = it-&gt;fst, chs[it-&gt;snd].<span class="built_in">pb</span>(u);</span><br><span class="line">	++it;</span><br><span class="line">	<span class="keyword">if</span>(it != st.<span class="built_in">end</span>()) nxt[u] = it-&gt;fst; <span class="keyword">else</span> nxt[u] = INF;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff) <span class="built_in">dfs</span>(v, u);</span><br><span class="line">	st.<span class="built_in">erase</span>(st.<span class="built_in">find</span>(<span class="built_in">mp</span>(h[u], u)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; tr[u].mn = <span class="built_in">Min</span>(tr[u * <span class="number">2</span>].mn, tr[u * <span class="number">2</span> + <span class="number">1</span>].mn); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123; tr[u].mn = -(m - l + <span class="number">1</span>); <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(u * <span class="number">2</span>, l, mid), <span class="built_in">build</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> w)</span> </span>&#123; tr[u].mn += w, tr[u].lz += w; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u].lz) &#123;</span><br><span class="line">		<span class="built_in">pushtag</span>(u * <span class="number">2</span>, tr[u].lz), <span class="built_in">pushtag</span>(u * <span class="number">2</span> + <span class="number">1</span>, tr[u].lz);</span><br><span class="line">		tr[u].lz = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &gt; R) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(l == L &amp;&amp; r == R) &#123; <span class="built_in">pushtag</span>(u, w); <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(R &lt;= mid) <span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, L, R, w);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(L &gt; mid) <span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, w);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, L, mid, w);</span><br><span class="line">		<span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, R, w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> tr[u].mn;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">return</span> x &lt;= mid ? <span class="built_in">qry</span>(u * <span class="number">2</span>, l, mid, x) : <span class="built_in">qry</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>), <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		lb[i] = <span class="built_in">upper_bound</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>, mn[i]) - a - <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, m, <span class="number">1</span>, lb[i], <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tr[<span class="number">1</span>].mn &gt;= <span class="number">0</span>) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="keyword">for</span>(pos = m; pos &gt;= <span class="number">1</span>; pos--) <span class="keyword">if</span>(<span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, m, pos) &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(lb[i] &gt;= pos || nxt[i] &lt; a[pos] || chs[i].<span class="built_in">size</span>() &lt; -tr[<span class="number">1</span>].mn)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : chs[i]) &#123;</span><br><span class="line">			<span class="type">int</span> x = <span class="built_in">Min</span>(a[pos], nxt[v]);</span><br><span class="line">			x = <span class="built_in">upper_bound</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>, x) - a - <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, m, lb[v] + <span class="number">1</span>, x, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tr[<span class="number">1</span>].mn &gt;= <span class="number">0</span>) ans = <span class="built_in">Min</span>(ans, a[pos] - h[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : chs[i]) &#123;</span><br><span class="line">			<span class="type">int</span> x = <span class="built_in">Min</span>(a[pos], nxt[v]);</span><br><span class="line">			x = <span class="built_in">upper_bound</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>, x) - a - <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, m, lb[v] + <span class="number">1</span>, x, <span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(ans == INF) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>「雅礼集训 2017 Day11」PATH</title>
    <url>/2025/07/27/ya-li-ji-xun-2017-day11-path/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/6051">「雅礼集训 2017 Day11」PATH</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$$<br>概率 &#x3D; \frac{合法方案数}{总方案数}\\<br>m &#x3D; \sum_{i &#x3D; 1}^{n} a_i\\<br>总方案数 &#x3D; \frac{m!}{\prod a_i!}\\<br>合法方案数 &#x3D; \frac{m!}{\prod hook(i, j)} &#x3D; \prod_{1 \leq k \leq i \leq n} \prod_{a_{i + 1} &lt; j \leq a_i} (a_k - k + i - j + 1)\\<br>&#x3D; \prod_{1 \leq j \leq i \leq n} \frac{(a_j - a_{i + 1} + i - j)!}{(a_j - a_i + i - j)!}\\<br>&#x3D; \frac{\prod_{i &#x3D; 1}^{n}(n - i + a_i)}{\prod_{1 \leq i &lt; j \leq n}((a_i - i) - (a_j - j))}<br>$$</p>
<p>$$<br>概率 &#x3D; (\prod_{i &#x3D; 1}^n \frac{a_i!}{(n + a_i - i)!})(\prod_{1 \leq i &lt; j \leq n} ((a_i - i) - (a_j - j)))<br>$$<br>我们可以快速处理左边的式子，对于右边的式子，令 $ b_i &#x3D; a_i - i $ 。  </p>
<p>$$<br>\prod_{1 \leq i \leq j \leq n} ((a_i - i) - (a_j - j)) &#x3D; \prod_{1 \leq i &lt; j \leq n} (b_i - b_j)<br>$$</p>
<p>将括号展开发现 $ b_i - b_j &gt; 0 (i &lt; j) $  ，所以当 $ i \geq j $ 时贡献记为负数，可以忽略。  </p>
<p>令 $ \prod_{1 \leq i &lt; j \leq n} (b_i - b_j) &#x3D; \sum x^{f(x)} $ ，显然可以通过卷积求出 $ \sum  x^{f(x)} $ 。  </p>
<p>注意根据费马小定理 $ f(x) $ 应由 $ mod - 1 $ 取模，所以不能写 $ ntt $ ，由于答案不会爆 $ long~long $ ，所以可以写 $ fft $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">double</span> ld;</span><br><span class="line"><span class="type">const</span> ld pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1004535809</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], b[N], ans = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> fac[N], ifac[N];</span><br><span class="line">vector&lt;ll&gt; f, g;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, ll y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y /= <span class="number">2</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y % <span class="number">2</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &lt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mul</span>(fac[x], <span class="built_in">mul</span>(ifac[y], ifac[x - y]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> M = <span class="number">32768</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">cp</span> &#123; ld x, y; <span class="built_in">cp</span>(ld X = <span class="number">0</span>, ld Y = <span class="number">0</span>) : <span class="built_in">x</span>(X), <span class="built_in">y</span>(Y) &#123;&#125; &#125;;</span><br><span class="line">	<span class="keyword">inline</span> cp <span class="keyword">operator</span>+(cp a, cp b) &#123; <span class="keyword">return</span> <span class="built_in">cp</span>(a.x + b.x, a.y + b.y); &#125;</span><br><span class="line">	<span class="keyword">inline</span> cp <span class="keyword">operator</span>-(cp a, cp b) &#123; <span class="keyword">return</span> <span class="built_in">cp</span>(a.x - b.x, a.y - b.y); &#125;</span><br><span class="line">	<span class="keyword">inline</span> cp <span class="keyword">operator</span>*(cp a, cp b) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">cp</span>(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dft</span><span class="params">(vector&lt;cp&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;cp&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="built_in">cp</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">			cp wn = <span class="built_in">cp</span>(<span class="built_in">cos</span>(opt * pi / mid), <span class="built_in">sin</span>(opt * pi / mid));</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = w[j - <span class="number">1</span>] * wn;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					cp x = A[j + k], y = A[j + mid + k] * w[k];</span><br><span class="line">					A[j + k] = x + y, A[j + mid + k] = x - y;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>) <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i].x /= lmt, A[i].x += <span class="number">0.5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;ll&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;ll&gt; &amp;A, <span class="type">const</span> vector&lt;ll&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		vector&lt;cp&gt; a, b; vector&lt;ll&gt; res;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) a.<span class="built_in">pb</span>(<span class="built_in">cp</span>(A[i], <span class="number">0</span>));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; B.<span class="built_in">size</span>(); i++) b.<span class="built_in">pb</span>(<span class="built_in">cp</span>(B[i], <span class="number">0</span>));</span><br><span class="line">		<span class="built_in">dft</span>(a, lmt, <span class="number">1</span>), <span class="built_in">dft</span>(b, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) a[i] = a[i] * b[i];</span><br><span class="line">		<span class="built_in">dft</span>(a, lmt, <span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>(); i++) res.<span class="built_in">pb</span>((ll)a[i].x);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), b[i] = a[i] + n - i;</span><br><span class="line">	fac[<span class="number">1</span>] = fac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = ifac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; i++) fac[i] = <span class="built_in">mul</span>(fac[i - <span class="number">1</span>], i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; i++) ifac[i] = <span class="built_in">mul</span>(mod - mod / i, ifac[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; i++) ifac[i] = <span class="built_in">mul</span>(ifac[i - <span class="number">1</span>], ifac[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = <span class="built_in">mul</span>(ans, <span class="built_in">mul</span>(fac[a[i]], ifac[b[i]]));</span><br><span class="line">	<span class="keyword">if</span>(n &lt;= <span class="number">3000</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">				ans = <span class="built_in">mul</span>(ans, a[i] - a[j] + j - i);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	f.<span class="built_in">resize</span>(N), g.<span class="built_in">resize</span>(N);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ++f[a[i] - i + n], ++g[i - a[i] + a[<span class="number">1</span>]];</span><br><span class="line">	<span class="keyword">for</span>(; !f.<span class="built_in">back</span>(); f.<span class="built_in">pop_back</span>()); <span class="keyword">for</span>(; !g.<span class="built_in">back</span>(); g.<span class="built_in">pop_back</span>());</span><br><span class="line">	f = Poly::<span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(N);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = a[<span class="number">1</span>] + n + <span class="number">1</span>; i &lt;= (a[<span class="number">1</span>] + n) * <span class="number">2</span>; i++)</span><br><span class="line">		ans = <span class="built_in">mul</span>(ans, <span class="built_in">ksm</span>(i - a[<span class="number">1</span>] - n, f[i]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title>【libreoj573】单枪匹马</title>
    <url>/2025/07/27/%E3%80%90libreoj573%E3%80%91dan-qiang-pi-ma/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/573">【libreoj573】单枪匹马</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>可以证明直接计算不需要约分，可以直接取模。<br>证明：若 $ \frac{x}{y} $ 中 $ x, y $ 互质，则 $ a + \frac{x}{y} &#x3D; \frac{ay + x}{y} $ 中 $ ay + x, y $ 互质（考虑辗转相除法中 <code>gcd(X, Y) = gcd(Y, X % Y) (Y = y, X = ax + y)</code> ）。<br>这样可以得到 $ 35 pts $ 。<br>设 $ f[a_0 \dots a_n] &#x3D; \frac{x[a_0 \dots a_n]}{y[a_0 \dots a_n]} $ ，则：<br>$$<br>\frac{x[a_0 \dots a_n]}{y[a_0 \dots a_n]} &#x3D; a_0 + \frac{y[a_1 \dots a_n]}{x[a_1 \dots a_n]} &#x3D; \frac{y[a_1 \dots a_n] + a_0 x[a_1 \dots a_n]}{x[a_1 \dots a_n]}<br>$$<br>由于这些都是最简分数，所以：<br>$$<br>x[a_0 \dots a_n] &#x3D; y[a_1 \dots a_n] + a_0x[a_1 \dots a_n]\\<br>y[a_0 \dots a_n] &#x3D; x[a_1 \dots a_n]<br>$$<br>可以得到：<br>$$<br>x[a_0 \dots a_n] &#x3D; x[a_2 \dots a_n] + a_0x[a_1 \dots a_n]\\<br>y[a_0 \dots a_n] &#x3D; y[a_2 \dots a_n] + a_0y[a_1 \dots a_n]<br>$$<br>考虑在图上的意义。在一个由 $ n $ 个节点的有向图，$ i $ 向 $ i + 1 $ 连边权为 $ a_i $ 的边，向 $ i + 2 $ 连边权为 $ 1 $ 的边。最后的值为 $ 1 $ 到 $ n $ 的路径边权乘积之和。显然这些边可以反向。可以得到：<br>$$<br>x[a_0 \dots a_n] &#x3D; a_nx[a_0 \dots a_{n-1}] + x[a_0 \dots a_{n - 2}]\\<br>y[a_0 \dots a_n] &#x3D; a_ny[a_0 \dots a_{n-1}] + y[a_0 \dots a_{n - 2}]<br>$$<br>然后这个东西可以矩阵转移。<br>$$<br>A_i &#x3D; \left[<br>\begin{matrix}<br>a_i&amp;1\\<br>1&amp;0<br>\end{matrix}<br>\right],<br>inv_i &#x3D; \left[<br>\begin{matrix}<br>0&amp;1\\<br>1&amp;mod - a_i<br>\end{matrix}<br>\right]\\<br>\left[<br>\begin{matrix}<br>ansx\\<br>ansy<br>\end{matrix}<br>\right] &#x3D; \prod_{i &#x3D; l}^{r} A_i &#x3D; (\prod_{i &#x3D; 1}^{r}A_i) \times (\prod_{i &#x3D; 1}^{l - 1}inv_i)<br>$$<br>维护前缀积即可。<br>时间复杂度 $ O(n + m) $ （矩阵乘法常数堪比一个 $ \log $ ） 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, m, type, ansx, ansy;</span><br><span class="line"><span class="type">int</span> a[N], len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mtrx</span> &#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">2</span>][<span class="number">2</span>]; <span class="built_in">mtrx</span>() &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)); &#125;</span><br><span class="line">	<span class="keyword">inline</span> mtrx <span class="keyword">operator</span>*(<span class="type">const</span> mtrx &amp;yy)<span class="type">const</span> &#123;</span><br><span class="line">		mtrx res = <span class="built_in">mtrx</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">				res.a[i][j] = <span class="built_in">add</span>(res.a[i][j], <span class="built_in">mul</span>(a[i][k], yy.a[k][j]));</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; mtrx sum[N], inv[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	++len; mtrx mu; mu.a[<span class="number">1</span>][<span class="number">0</span>] = mu.a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	mu.a[<span class="number">0</span>][<span class="number">0</span>] = x, sum[len] = sum[len - <span class="number">1</span>] * mu;</span><br><span class="line">	mu.a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>, mu.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">sub</span>(<span class="number">0</span>, x), inv[len] = mu * inv[len - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;type);</span><br><span class="line">	sum[<span class="number">0</span>].a[<span class="number">0</span>][<span class="number">0</span>] = sum[<span class="number">0</span>].a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	inv[<span class="number">0</span>].a[<span class="number">0</span>][<span class="number">0</span>] = inv[<span class="number">0</span>].a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), <span class="built_in">insert</span>(x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> opt, x, y; m; --m) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); <span class="keyword">if</span>(type) x = x ^ ansx ^ ansy;</span><br><span class="line">			<span class="built_in">insert</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">			<span class="keyword">if</span>(type) x = x ^ ansx ^ ansy, y = y ^ ansx ^ ansy;</span><br><span class="line">			ans = inv[x - <span class="number">1</span>] * sum[y];</span><br><span class="line">			ansx = ans.a[<span class="number">0</span>][<span class="number">0</span>], ansy = ans.a[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ansx, ansy);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>Video Depth Anything</title>
    <url>/2025/07/27/video-depth-anything/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>Depth Anything 的问题：处理视频时遭受时间不一致性（temporal inconsistency）。  </p>
<p>作者提出了Video Depth Anything，能够对长视频高效地生成高质量持续的深度估计。  </p>
<p>Video Depth Anything 基于 Depth Anything v2 ，将它的 head 替换为高效的 spatial-temporal<br>head。  </p>
<p>作者设计了直接且高效的时间一致性损失函数，通过约束时间深度梯度，消除了额外的几何先验的需求。  </p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>特别地，作者先设计了轻量的 spatial-temporal head (STH) 去替换 DPT head ，然后使得时间信息能够交流。STH包含四个时间注意力层 (temporal attention layers) , 应用在每个空间位置的时间维度。只在 head 引入 时间注意力防止了已经学习过的表示（representation）被有限的视频数据破坏。  </p>
<p>接着，作者提出了时间梯度匹配损失函数，去约束沿着时间维度的深度估计梯度，匹配从ground truth 计算得到的值。这个损失函数同时用尺度平移不变损失和空间梯度匹配损失优化了。  </p>
<p>为了能够做长视频的推断，作者开发了新的分段处理策略（segment-wise processing strategy）。每一个新的段都用 8 个重叠的帧和之前视频片段的两个关键帧连接，共形成 32 帧。然后，为了保证平滑性，重叠的帧将逐步在两个连续的窗口插值。  </p>
<h1 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h1><p>略  </p>
<h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><p><img src="/2025/07/27/video-depth-anything/video_depth_anything_pipeline.jpg">  </p>
<h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p>由于缺少足够的视频资源，作者从预训练的 Depth Anything v2 开始，采用共同训练策略，同时用图像和视频数据。  </p>
<h3 id="Depth-Anything-Encoder"><a href="#Depth-Anything-Encoder" class="headerlink" title="Depth Anything Encoder"></a>Depth Anything Encoder</h3><p>用了 Depth Anything Encoder 作为模型的 encoder。为了减少训练损耗和保护训练好的特征，这个encoder要冻结参数。  </p>
<p>为了用image encoder提取视频帧里的特征，作者将视频片段中的时间维度折叠到批次（batch）维度中。  </p>
<p>输入：$ {X} \in \mathbb{R}^{(B \times N) \times C \times H \times W} $ ，B为batch大小，N为视频片段帧数，C为通道数。  </p>
<p>通过encoder后得到中间特征图 $ {F_{i}} \in \mathbb{R}^{(B \times N) \times (\frac{H}{p} \times \frac{W}{p}) \times C_i} $ ，p为encoder的patch大小。  </p>
<p>image encoder忽略了两帧之间时间信息，需要spatiotemporal head。  </p>
<h3 id="Spatiotemporal-Head-STH"><a href="#Spatiotemporal-Head-STH" class="headerlink" title="Spatiotemporal Head(STH)"></a>Spatiotemporal Head(STH)</h3><p>STH在DPT（Vision transformers for dense prediction） head的基础上多插入了一个时间层来捕获时间信息。一个时间层包含多头自注意力模型和前馈网络（feed-forward network）。当时间层输入一个特征 $ {F_{i}} $ ，时间维度N孤立，自注意力只在时间维度进行，以促进时间特征的交互。为了捕捉不同帧之间的时序位置关系，我们利用绝对位置嵌入来编码视频序列中的时序位置信息。  </p>
<p>STH在 $ {F_i} $ 均匀采样了4个特征图（包含最终特征，记为 $ {F_4} $）作为输入，预测深度图 $ {D} \in \mathbb{R}^{H \times W} $ 。选中的 $ {F_i} $ 输入reassemble layer生成特征金字塔。然后，特征从低分辨率到高分辨率通过fusion layer进行融合。reassemble layer和fusion layer由DPT提出。最终融合得到的高分辨率特征图通过输出层生成深度图 $ {D} $ 。为了减少计算量，作者在一些特征分辨率低的地方插入了temporal layer。  </p>
<h2 id="Temporal-Gradient-Matching-Loss"><a href="#Temporal-Gradient-Matching-Loss" class="headerlink" title="Temporal Gradient Matching Loss"></a>Temporal Gradient Matching Loss</h2><h3 id="OPW-Optical-Flow-Based-Warping-loss"><a href="#OPW-Optical-Flow-Based-Warping-loss" class="headerlink" title="OPW(Optical Flow Based Warping) loss"></a>OPW(Optical Flow Based Warping) loss</h3><p>为了约束时间一致性，之前的视频模型假定相邻帧对应位置的深度一致，通过光流检验。  </p>
<p>对于两个深度预测结果， $ p_{i}, p_{i + 1} $ ，根据从光流推出的扭曲关系， $ p_{i + 1} $ 被扭曲成 $ \hat{p}_{i} $ ，则损失函数为  </p>
<p>$$<br>\mathcal{L}<em>{OPW}&#x3D;\frac{1}{N - 1}\sum</em>{i &#x3D; 2}^{N} || p_{i} - \hat{p}_{i} ||<br>$$</p>
<p>N为视频窗口长度， $ ||\cdot || $ 为 $ l1 $ 距离。  </p>
<p>OPW的严重问题：相邻帧对应点的深度不是不变的。  </p>
<p>作者提出新的方式。  </p>
<h3 id="Temporal-gradient-matching-loss-TGM"><a href="#Temporal-gradient-matching-loss-TGM" class="headerlink" title="Temporal gradient matching loss(TGM)"></a>Temporal gradient matching loss(TGM)</h3><p>我们假设相邻预测帧中对应点的深度变化应与在ground truth中观察到的变化保持一致。  </p>
<p>$$<br>\mathcal{L}<em>{SE} &#x3D; \frac{1}{N - 1} \sum</em>{i &#x3D; 2}^{N}|| \  |\hat{d}_i - d_i| - |\hat{g}_i - g_i| \  ||<br>$$</p>
<p>这里d, g都是预测值和ground truth缩放和平移后的版本。  </p>
<p>然而，生成光流会带来额外的开销。  </p>
<p>事实上，不需要用光流得到对应点来使用，可以直接用相邻帧同一坐标系的深度计算损失。假设是相邻帧同一个 图像位置 的深度应当与ground truth一致。这个过程和在时间维度计算梯度一致。  </p>
<p>$$<br>\mathcal{L}<em>{TGM} &#x3D; \frac{1}{N - 1} \sum</em>{i &#x3D; 1}^{N - 1}|| \  |d_{i + 1} - d_i| - |g_{i + 1} - g_{i}| \  ||<br>$$</p>
<p>实践中，参考的点在ground truth里在相邻帧深度变化较小，$ |g_{i + 1} - g_i| &lt; 0.05 $ ，避免边缘、动态物体等因素对深度图产生突然变化使得训练不稳定。  </p>
<h3 id="总损失"><a href="#总损失" class="headerlink" title="总损失"></a>总损失</h3><p>$$<br>\mathcal{L}<em>{all}&#x3D;\alpha\mathcal{L}</em>{TGM}+\beta\mathcal{L}_{ssi}<br>$$</p>
<p>$ \mathcal{L}_{ssi} $ 是尺度和平移不变损失函数（见MiDaS）。$ \alpha, \beta $ 用于平衡时空一致性和单帧的空间结构。  </p>
<h2 id="Inference-strategy-for-super-long-sequence"><a href="#Inference-strategy-for-super-long-sequence" class="headerlink" title="Inference strategy for super-long sequence"></a>Inference strategy for super-long sequence</h2><p>提出了关键帧参考（key-frame referencing），继承之前预测的尺度和平移信息，将插值重叠保证平滑变化。  </p>
<h3 id="key-frame-referencing"><a href="#key-frame-referencing" class="headerlink" title="key-frame referencing"></a>key-frame referencing</h3><p><img src="/2025/07/27/video-depth-anything/inference_strategy_for_long_videos.jpg"></p>
<p>将一段视频分成三段：$ N - T_o - T_k $ 张未来的帧，$ T_o $ 张重叠的帧（之前的帧），$ T_k $ 张关键帧（之前的帧）。关键帧从之前的帧里子采样，间隔大小为 $ \Delta k $ 。这种方法将早期窗口的内容最小化计算量，融入当前窗口。根据实验结果，这种简单的策略可以显著减少累积的尺度漂移，特别是对于长视频。  </p>
<h3 id="Depth-clip-stitching"><a href="#Depth-clip-stitching" class="headerlink" title="Depth clip stitching"></a>Depth clip stitching</h3><p>相邻窗口的 $ T_o $ 张重叠的帧对避免深度图像闪烁很重要。  </p>
<ol>
<li><p>通过共享部分帧特征，连续窗口间的尺度和平移将更加相似。  </p>
</li>
<li><p>重叠帧的深度预测是通过在两个片段之间进行插值来更新的。</p>
</li>
</ol>
<p>假设之前的段第 $ o_i $ 张重叠帧的深度为 $ {D}<em>{o_i} ^{pre} $ ，当前的段深度为 $ {D}</em>{o_i}^{cur} $ ，则最终深度为 $ {D}<em>{o_i} &#x3D; {D}</em>{o_i}^{pre} \cdot w_i + {D}_{o_i}^{cur} \cdot (1 - w_i) $ ， $ w_i $ 大小从1到0、长度为 $ T_o $ 的线性衰减函数。  </p>
<h1 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h1><p>略  </p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>略  </p>
]]></content>
      <tags>
        <tag>Monocular Depth Estimation</tag>
      </tags>
  </entry>
</search>
