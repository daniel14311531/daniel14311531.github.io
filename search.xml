<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSP2019 游记</title>
    <url>/2025/07/27/CSP2019-you-ji/</url>
    <content><![CDATA[<span id="more"></span>  

<p>这是高中倒数第二年的机会，天已入秋，一片片枯黄的叶离开了它的大树，我的时间也不多了。<br>经过一年的磨练，总想着 Day1 AK。。。<br>时间一分一秒地流过，赶 T3 的手不停地抖动。。。<br>来不及了。<br>冷汗直逼颈部，耳中回荡着不停滞的时间滴答声和追求满分的欲望，眼前的屏幕字符变成一团团扭动的蛆虫。<br>我试图上厕所冷静一下，可是小脑发晕，跌倒在路障上，精神如同粉尘一般湮没在空气中。<br>啊啊啊，这便是我的绝望啊！<br>冥冥中仿佛回到了机位前，不知谁的声音在呼唤。<br>“就这样放弃吗？”<br>“不。我还要写题。”<br>“那再给你最后一次机会吧。”<br>待我醒转过来，已经过了 5 分钟。<br>知道比赛结束，我最后一题一分未得，第二题还面临被卡常的风险。<br>真是不长记性啊。。。<br>时至今日，我经常在梦中看到自己FST，猛然惊醒，然而天未亮。<br>能够在黑暗中给予我安慰的，恐怕只有我自己了吧。<br><img src="/2025/07/27/CSP2019-you-ji/%5C1.png" alt="photo">  </p>
]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title>【APIO2019】桥梁</title>
    <url>/2025/07/27/APIO2019-qiao-liang/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P5443">【APIO2019】桥梁</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑对询问分块，选择块大小为 $ S $ ，每次对块内的操作进行处理。因此对于之前的修改可以预处理出来。<br>对于块内询问，将所有没有在这个块内修改的边按权值大到小排序，将询问按权值大到小排序，然后用两个指针维护。若此时指向边权大于询问的权值，则加入一条边；否则询问。<br>考虑加入可能被修改的边。按照时间将边进行修改，然后将边权权不小于询问权值的边加入，在进行询问。这部分可以暴力进行。考虑做完后需要撤销操作，所以需要用按秩合并的并查集。<br>这样询问的复杂度为 $ O(S^3 \log n + m \log n) $ 。<br>考虑对边修改后进行排序。暴力排序时间复杂度 $ O(n \sqrt{n} \log n) $ ，而分类后归并排序时间复杂度 $ O(n \sqrt{n \log n}) $ ，此时 $ S &#x3D; \sqrt{n \log n} $ 最优。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, BLO = <span class="number">700</span>;</span><br><span class="line"><span class="type">int</span> n, m, q, fa[N], sz[N], ans[N], pos[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y, w, id; <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> w &gt; yy.w; &#125;</span><br><span class="line">&#125;; Edge e[N], a1[N], a2[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Q</span> &#123;</span><br><span class="line">	<span class="type">int</span> opt, x, y, id; <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Q &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> y &gt; yy.y; &#125;</span><br><span class="line">&#125;; Q qry[N], qq[N]; <span class="type">int</span> len, pre[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">S</span> &#123;</span><br><span class="line">	<span class="type">int</span> id, fa, sz; <span class="built_in">S</span>(<span class="type">int</span> x = <span class="number">0</span>, <span class="type">int</span> y = <span class="number">0</span>, <span class="type">int</span> z = <span class="number">0</span>) : <span class="built_in">id</span>(x), <span class="built_in">fa</span>(y), <span class="built_in">sz</span>(z) &#123;&#125;</span><br><span class="line">&#125;; S sta[N]; <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> used[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gi</span><span class="params">(<span class="type">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(); <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : <span class="built_in">Find</span>(fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	x = <span class="built_in">Find</span>(x), y = <span class="built_in">Find</span>(y); <span class="keyword">if</span>(x == y) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(sz[x] &gt; sz[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">	sta[++top] = <span class="built_in">S</span>(x, fa[x], sz[x]), fa[x] = y, sz[y] += sz[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	S u = sta[top--]; sz[fa[u.id]] -= u.sz, fa[u.id] = u.fa, sz[u.id] = u.sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n), <span class="built_in">gi</span>(m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i, sz[i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">gi</span>(e[i].x), <span class="built_in">gi</span>(e[i].y), <span class="built_in">gi</span>(e[i].w), e[i].id = i;</span><br><span class="line">	<span class="built_in">gi</span>(q);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">		<span class="built_in">gi</span>(qry[i].opt), <span class="built_in">gi</span>(qry[i].x), <span class="built_in">gi</span>(qry[i].y), qry[i].id = i;</span><br><span class="line">	<span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>); <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) pos[e[i].id] = i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">1</span>, r; l &lt;= q; l += BLO) &#123;</span><br><span class="line">		r = <span class="built_in">min</span>(q, l + BLO - <span class="number">1</span>), len = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) used[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(qry[i].opt == <span class="number">2</span>) qq[++len] = qry[i]; <span class="keyword">else</span> used[qry[i].x] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">stable_sort</span>(qq + <span class="number">1</span>, qq + len + <span class="number">1</span>);</span><br><span class="line">		<span class="type">int</span> p1 = <span class="number">1</span>, p2 = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; p1 &lt;= m || p2 &lt;= len;) &#123;</span><br><span class="line">			<span class="keyword">for</span>(; p1 &lt;= m &amp;&amp; used[e[p1].id]; ++p1);</span><br><span class="line">			<span class="keyword">if</span>(p1 &gt; m &amp;&amp; p2 &gt; len) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(p2 &gt; len || (p1 &lt;= m &amp;&amp; e[p1].w &gt;= qq[p2].y)) <span class="built_in">Union</span>(e[p1].x, e[p1].y), ++p1;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="type">int</span> cur = top, ps = l - <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r &amp;&amp; i &lt;= qq[p2].id; i++) &#123;</span><br><span class="line">					ps = i;</span><br><span class="line">					<span class="keyword">if</span>(qry[i].opt == <span class="number">1</span>)</span><br><span class="line">						pre[qry[i].id] = e[pos[qry[i].x]].w, e[pos[qry[i].x]].w = qry[i].y;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">					<span class="keyword">if</span>(qry[i].opt == <span class="number">1</span> &amp;&amp; e[pos[qry[i].x]].w &gt;= qq[p2].y)</span><br><span class="line">						<span class="built_in">Union</span>(e[pos[qry[i].x]].x, e[pos[qry[i].x]].y);</span><br><span class="line">				ans[qq[p2].id] = sz[<span class="built_in">Find</span>(qq[p2].x)];</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = ps; i &gt;= l; i--)</span><br><span class="line">					<span class="keyword">if</span>(qry[i].opt == <span class="number">1</span>) e[pos[qry[i].x]].w = pre[qry[i].id];</span><br><span class="line">				<span class="keyword">for</span>(; top &gt; cur; <span class="built_in">Undo</span>()); ++p2;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(; top; <span class="built_in">Undo</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i++) <span class="keyword">if</span>(qry[i].opt == <span class="number">1</span>) e[pos[qry[i].x]].w = qry[i].y;</span><br><span class="line">		<span class="type">int</span> len1 = <span class="number">0</span>, len2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(used[e[i].id]) a1[++len1] = e[i]; <span class="keyword">else</span> a2[++len2] = e[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(a1 + <span class="number">1</span>, a1 + len1 + <span class="number">1</span>), p1 = p2 = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(p2 &gt; len2 || (p1 &lt;= len1 &amp;&amp; a1[p1] &lt; a2[p2])) e[i] = a1[p1++];</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(p2 &lt;= len2) e[i] = a2[p2++];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) pos[e[i].id] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) <span class="keyword">if</span>(ans[i]) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title>【BZOJ3160】万径人踪灭</title>
    <url>/2025/07/27/BZOJ3160-wan-jing-ren-zong-mie/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3160">【BZOJ3160】万径人踪灭</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>不包含连续下标的回文子序列 &#x3D; 所有回文子序列 - 连续下标的回文子序列。<br>对于连续下标的回文子序列，可以用 $ Manacher $ 算法快速计算。<br>对于所有回文子序列，考虑枚举对称中心 $ r $ ， 若有 $ k $ 组 $ (x, y) $ 满足 $ x \not&#x3D; y $ 且 $ x + y &#x3D; 2r $ 且 $ s_x &#x3D; s_y $ ，那么方案数为 $ 2^{k + 1} - 1 $ （$ k $ 组 $ (x, y) $ 加上 $ r $）。若对称中心在 $ r $ 和 $ r + 1 $ 之间，此时 $(x, y)$ 应当满足 $ x + y &#x3D; 2r + 1 $ ， 方案数为 $ 2^k - 1 $ 。<br>发现寻找 $ s_x, s_y $ 可以用卷积来写，就直接 $ NTT $ 了。<br>时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, m, RL[N + N], cnt[N + N], ba[N];</span><br><span class="line"><span class="type">char</span> s[N], t[N + N];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a, b, res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="type">int</span>)((ll) x * y % mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> ss = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">		<span class="keyword">return</span> ss;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		a.<span class="built_in">resize</span>(lmt);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(a[i], a[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; mid; i++) w[i] = <span class="built_in">mul</span>(w[i - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; lmt; j += mid &lt;&lt; <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = a[j + k], y = <span class="built_in">mul</span>(a[j + mid + k], w[k]);</span><br><span class="line">					a[j + k] = <span class="built_in">add</span>(x, y), a[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++)</span><br><span class="line">				a[i] = <span class="built_in">mul</span>(a[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; a = A, b = B; <span class="type">int</span> lmt = <span class="built_in">Get</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(a, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(b, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) a[i] = <span class="built_in">mul</span>(a[i], b[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(a, lmt, <span class="number">-1</span>); <span class="keyword">return</span> a.<span class="built_in">resize</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">1</span>), a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> mx = <span class="number">0</span>, pos = <span class="number">0</span>; RL[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		RL[i] = mx &gt; i ? <span class="built_in">Min</span>(RL[pos * <span class="number">2</span> - i], mx - i) : <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; t[i - RL[i]] == t[i + RL[i]]; ++RL[i]);</span><br><span class="line">		<span class="keyword">if</span>(i + RL[i] &gt; mx) mx = i + RL[i], pos = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) ans = (ans - RL[i] / <span class="number">2</span> + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s), n = <span class="built_in">strlen</span>(s);</span><br><span class="line">	t[m++] = <span class="string">&#x27;*&#x27;</span>; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) t[m++] = <span class="string">&#x27;#&#x27;</span>, t[m++] = s[i];</span><br><span class="line">	t[m++] = <span class="string">&#x27;#&#x27;</span>, <span class="built_in">Manacher</span>();</span><br><span class="line">	ba[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ba[i] = (ba[i - <span class="number">1</span>] + ba[i - <span class="number">1</span>]) % mod;</span><br><span class="line">	<span class="comment">//solve a</span></span><br><span class="line">	a.<span class="built_in">clear</span>(), b.<span class="built_in">clear</span>(), res.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) a.<span class="built_in">pb</span>(s[i] == <span class="string">&#x27;a&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">	b = a, res = Poly::<span class="built_in">Mul</span>(a, b), res.<span class="built_in">resize</span>(n + n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(s[i] == <span class="string">&#x27;a&#x27;</span>) --res[i + i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + n - <span class="number">2</span>; i++) cnt[i] += res[i] / <span class="number">2</span>;</span><br><span class="line">	<span class="comment">//solve b</span></span><br><span class="line">	a.<span class="built_in">clear</span>(), b.<span class="built_in">clear</span>(), res.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) a.<span class="built_in">pb</span>(s[i] == <span class="string">&#x27;b&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">	b = a, res = Poly::<span class="built_in">Mul</span>(a, b), res.<span class="built_in">resize</span>(n + n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(s[i] == <span class="string">&#x27;b&#x27;</span>) --res[i + i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + n - <span class="number">2</span>; i++) cnt[i] += res[i] / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//	for(int i = 0; i &lt;= n + n - 2; i++)</span></span><br><span class="line"><span class="comment">//		printf(&quot;&gt;&gt;&gt; %d -&gt; %d : %d\n&quot;, i / 2, (i + 1) / 2, cnt[i]);</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + n - <span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(i &amp; <span class="number">1</span>) ans = ((ans + ba[cnt[i]]) % mod + mod - <span class="number">1</span>) % mod;</span><br><span class="line">		<span class="keyword">else</span> ans = ((ans + ba[cnt[i] + <span class="number">1</span>]) % mod + mod - <span class="number">1</span>) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>【APIO2018】新家</title>
    <url>/2025/07/27/APIO2018-xin-jia/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2585">【APIO2018】新家</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>对于这种区间修改、单点询问的题目，可以将询问离线再扫描线。<br>考虑对于一个答案 $ ans_i $ 合法，当且仅当 $ (l_i + ans_i, INF) $ 中每种店上一次出现的位置不小于 $ l_i + ans_i $ 。对于每种店都开一个 multiset 即可维护前驱。<br>这样每一次加入&#x2F;删除会需要区间修改前驱，代码难度大，考虑 $ (l_i + ans_i, INF) $ 中每种店上一次出现的位置不小于 $ l_i + ans_i $ 的另一种解释，即 $ (l_i + ans_i, INF) $ 每个位置中每种店每个位置上一次出现的位置最小值不小于 $ l_i + ans_i $ ，然后就可以单点修改了。用线段树维护前驱最小值。<br>询问可以二分答案，更优秀的做法是在线段树上二分。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> multiset&lt;<span class="type">int</span>&gt;::iterator IT;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">600010</span>, LG = <span class="number">20</span>, INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="type">int</span> n, k, m, ans[N], clr;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Q</span> &#123;</span><br><span class="line">	<span class="type">int</span> opt, pos, type, pri;</span><br><span class="line">	<span class="built_in">Q</span>(<span class="type">int</span> Opt = <span class="number">0</span>, <span class="type">int</span> Pos = <span class="number">0</span>, <span class="type">int</span> Type = <span class="number">0</span>, <span class="type">int</span> Pri = <span class="number">0</span>) :</span><br><span class="line">		<span class="built_in">opt</span>(Opt), <span class="built_in">pos</span>(Pos), <span class="built_in">type</span>(Type), <span class="built_in">pri</span>(Pri) &#123;&#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Q &amp;yy)<span class="type">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> pri == yy.pri ? opt &lt; yy.opt : pri &lt; yy.pri;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; Q q[N + N]; <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; pp[N], st[N * LG];</span><br><span class="line"><span class="type">int</span> rt, tot, cnt, lf[N * LG], rf[N * LG], mn[N * LG], id[N * LG];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> ad, <span class="type">int</span> dl)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) u = ++tot;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!id[u]) id[u] = ++cnt;</span><br><span class="line">		multiset&lt;<span class="type">int</span>&gt; &amp;s = st[id[u]];</span><br><span class="line">		<span class="keyword">if</span>(ad) s.<span class="built_in">insert</span>(ad);</span><br><span class="line">		<span class="keyword">if</span>(dl) s.<span class="built_in">erase</span>(s.<span class="built_in">find</span>(dl));</span><br><span class="line">		mn[u] = s.<span class="built_in">size</span>() ? *s.<span class="built_in">begin</span>() : INF; <span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= mid) <span class="built_in">mdy</span>(lf[u], l, mid, x, ad, dl);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">mdy</span>(rf[u], mid + <span class="number">1</span>, r, x, ad, dl);</span><br><span class="line">	mn[u] = <span class="built_in">Min</span>(mn[lf[u]], mn[rf[u]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Q x)</span> </span>&#123;</span><br><span class="line">	multiset&lt;<span class="type">int</span>&gt; &amp;s = pp[x.type];</span><br><span class="line">	IT itr = s.<span class="built_in">upper_bound</span>(x.pos), itl = itr; --itl;</span><br><span class="line">	<span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, *itr, x.pos, *itl), <span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, x.pos, *itl, <span class="number">0</span>);</span><br><span class="line">	s.<span class="built_in">insert</span>(x.pos); <span class="keyword">if</span>(s.<span class="built_in">size</span>() == <span class="number">3</span>) ++clr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(Q x)</span> </span>&#123;</span><br><span class="line">	multiset&lt;<span class="type">int</span>&gt; &amp;s = pp[x.type]; s.<span class="built_in">erase</span>(s.<span class="built_in">find</span>(x.pos));</span><br><span class="line">	IT itr = s.<span class="built_in">upper_bound</span>(x.pos), itl = itr; --itl;</span><br><span class="line">	<span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, *itr, *itl, x.pos), <span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, x.pos, <span class="number">0</span>, *itl);</span><br><span class="line">	<span class="keyword">if</span>(s.<span class="built_in">size</span>() == <span class="number">2</span>) --clr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(Q x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(clr &lt; k) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>, r = INF, mid, t, tt = INF, u = rt;</span><br><span class="line">	<span class="keyword">for</span>(; l &lt; r;) &#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>, t = <span class="built_in">Min</span>(tt, mn[rf[u]]);</span><br><span class="line">		<span class="keyword">if</span>(x.pos &lt;= mid &amp;&amp; t + mid &gt;= x.pos * <span class="number">2</span>)</span><br><span class="line">			tt = t, r = mid, u = lf[u];</span><br><span class="line">		<span class="keyword">else</span> u = rf[u], l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l - x.pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;m), mn[<span class="number">0</span>] = INF;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">		pp[i].<span class="built_in">insert</span>(-INF), pp[i].<span class="built_in">insert</span>(INF), <span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, INF, -INF, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, t, a, b; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x, &amp;t, &amp;a, &amp;b);</span><br><span class="line">		q[++len] = <span class="built_in">Q</span>(<span class="number">1</span>, x, t, a), q[++len] = <span class="built_in">Q</span>(<span class="number">2</span>, x, t, b + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= m; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), q[++len] = <span class="built_in">Q</span>(<span class="number">3</span>, x, i, y);</span><br><span class="line">	<span class="built_in">sort</span>(q + <span class="number">1</span>, q + len + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) <span class="built_in">add</span>(q[i]);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(q[i].opt == <span class="number">2</span>) <span class="built_in">del</span>(q[i]);</span><br><span class="line">		<span class="keyword">else</span> ans[q[i].type] = <span class="built_in">ask</span>(q[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>CS188人工智能课程翻译</title>
    <url>/2025/07/27/CS188/</url>
    <content><![CDATA[<p><a href="https://www.zhihu.com/column/c_1099720701925302272">前文内容</a>  </p>
<p><a href="https://www.bilibili.com/video/BV1M24y1x7mM?p=56&vd_source=ae5e67f6772cc15652faf9cbf1b41d59">英文实在看不下去了</a></p>
<p>[TOC]</p>
<h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note09.pdf">RL I notes</a>  </p>
<p>在前面的笔记中，我们讨论了马尔可夫决策过程(Markov decision processes, MDP)，即通过值迭代(value iteration)和决策迭代(policy iteration)的方式去计算状态的最优价值(optimal value of states)并得到最优策略(optimal policy)。解决马尔可夫决策过程是 <strong>离线规划(offline planning)</strong> 的一个例子，此时 agent 知道每一处的转换函数(transition function)和奖励函数(reward function)，所有用来预处理最有价值的信息都不需要任何操作(action)来获取。在这节中，我们将讨论 <strong>在线规划(online planning)</strong> ，此时 agent 对任何一处的转换函数和奖励函数都一无所知。在在线规划中，agent 必须尝试 <strong>探索(exploration)</strong> ，在探索中它进行操作(actions)并在后继状态(successor states)得到反馈(feedbacks)并得到相应的奖励(rewards)。agent用反馈的信息去估计(estimate)最优策略，这个过程被称作 <strong>强化学习(reinforcement learning)</strong> ，再用估计过的最优策略去探索或者说使奖励最大化(reward maximization)。</p>
<p>先从基本的术语开始。在在线规划的每一步，agent 从状态 $ s $ 出发，然后通过操作 $ a $ 最后到达后继状态 $ s’ $ ，获得奖励 $ r $ 。每一个多元组 $ (s, a, s’, r) $ 被称作 <strong>样本(sample)</strong> 。 agent 持续地进行操作并在后继状态收集样本直到到达结束状态(terminal state)。像这样的一组样本(a collection of sample)称作一个周期(episode)。agents会进行多个周期以得到足够的数据进行学习。</p>
<p>有两种强化学习的类型——基于模型的学习(model-based learning)和不基于模型的学习(model-free learning)。基于模型的学习尝试用样本去估计转换和奖励函数，再用这些估计进行MDP（值迭代、策略迭代）。不基于模型的学习尝试去直接估计状态的 Q 值(Q-values of states)，而不用空间去构造MDP中转换函数和奖励函数的模型。</p>
<h3 id="基于模型的学习"><a href="#基于模型的学习" class="headerlink" title="基于模型的学习"></a>基于模型的学习</h3><p>用某个策略 $ \pi_{explore} $ 探索。</p>
<p>agent 生成转换函数的近似值 $ \hat{T}(s, a, s’) $ ，通过记录从 Q 状态 $ (s, a) $ 转换到状态 $ s’ $ 的次数，并规范化（即古典概率， $ \hat{T}(s, a, s’) &#x3D; \frac{count((s, a) \rightarrow s’)}{count((s, a))} $ ）。根据大数定律，收集的样本越多， $ \hat{T} $ 越接近真实值。</p>
<p>agent 生成奖励函数 $ \hat{R} $ ，通过不断探索未知的多元组 $ (s, a, s’) $ 。</p>
<p>当我们觉得合适的时候，我们结束 agent 的训练(training)，通过值迭代或者策略迭代在当前的模型（包含 $ \hat{T}, \hat{R} $ ）生成开发策略 $ \pi_{exploit} $ ，目标是使奖励最大化。我们将要讨论如何有效地在探索(exloration)和开发(exploitation)之间分配时间的方法。</p>
<p>基于模型的学习简单易懂且高效，但是维护所有收集的多元组 $ (s, a, s’) $ 的成本昂贵（空间、时间），所以在下一节——不基于模型的学习，我们将开发一种方法，免于多元组 $ (s, a, s’) $ 的维护，避免基于模型学习的内存开销。</p>
<h3 id="不基于模型的学习"><a href="#不基于模型的学习" class="headerlink" title="不基于模型的学习"></a>不基于模型的学习</h3><p>有很多不基于模型的学习算法，我们将讲以下三种：直接估值(direct evaluation)，时间差异学习(temporal difference learning)和 Q-learning 。直接估值和时间差异学习属于 <strong>被动强化学习(passive reinforcement learning)</strong> 的一类算法。在被动强化学习中，agent 遵循已知的策略操作并在过程中得到状态的值，这正是在 $ T $ 和 $ R $ 已知时 MDP 的策略评估所做的。 Q-learning 属于另一类不基于模型的学习—— <strong>主动强化学习(active reinforcement learning)</strong>，即agent在学习过程中可以通过反馈多次更新策略并最后经历足够多的探索后决定最优策略。</p>
<h4 id="直接估值"><a href="#直接估值" class="headerlink" title="直接估值"></a>直接估值</h4><p>先确定一个策略 $ \pi $ ，然后让 agent 遵循策略 $ \pi $ 进行多个周期。在 agent 收集样本的同时也维护每个状态下得到的价值和(counts of the total utility)以及 agent 访问到每个状态的次数(the number of times it visited the state)。任何时候，我们可以计算任意状态 $ s $ 的价值（即期望收益）：状态 $ s $ 的价值和除以状态 $ s $ 的访问次数。</p>
<p>例子：</p>
<p>策略 $ \pi $ 如下，衰减系数 $ \gamma &#x3D; 1 $ ，每条边奖励函数为 $ -1 $ 。</p>
<p><img src="/2025/07/27/CS188/fig1.png" alt="fig1.png"></p>
<p>状态 C 有概率走向状态 A 和状态 D，在探索次数较少时，从状态 B 出发和从状态 E 出发可能导致计算出的期望收益不同。在探索次数增多后会收敛成同一个值，但是这将会花费大量的时间。这个问题可以通过另一个被动强化学习——时间差异学习(temporal difference learning)来减轻。</p>
<h4 id="时间差异学习"><a href="#时间差异学习" class="headerlink" title="时间差异学习"></a>时间差异学习</h4><p>时间差异学习(temporal difference learning， TD learning)用了<code>从每一次经历中学习</code>的想法，而不是像直接估值那样先对状态价值和以及访问次数统计再做学习。在策略评估中，我们用固定的策略生成的方程组和 Bellman 方程组决定状态的值（或者迭代更新，像值迭代一样）。</p>
<p>$$<br>V^{\pi}(s) &#x3D; \sum_{s’}T(s, \pi(s), s’)[R(s, \pi(s), s’) + \gamma V^{\pi}(s’)]<br>$$</p>
<p>TD learning 尝试去解决如何在没有权重的情况下计算加权平均值的问题，用 <strong>指数滑动平均(exponential moving average)</strong> 的方式。</p>
<p>步骤：</p>
<ol>
<li>初始化：</li>
</ol>
<p>$$<br>\forall s, V^{\pi}(s) &#x3D; 0<br>$$</p>
<ol start="2">
<li>对于每一步，agent 进行操作 $ \pi(s) $ ，从状态 $ s $ 转移到状态 $ s’ $ ，获得奖励 $ R(s, \pi(s), s’) $ 。我们可以得到样本值(sample value)：</li>
</ol>
<p>$$<br>sample &#x3D; R(s, \pi(s), s’) + \gamma V^{\pi}(s’)<br>$$</p>
<p>$ \space \space \space \space \space \space $ 这是对 $ V^{\pi}(s) $ 的新的估计。</p>
<ol start="3">
<li>将样本值用指数滑动平均的方式纳入对 $ V^{\pi}(s) $ 的估计，对 $ V^{\pi}(s) $ 进行更新 ：</li>
</ol>
<p>$$<br>V^{\pi}(s) \leftarrow (1 - \alpha)V^{\pi}(s) + \alpha \cdot sample<br>$$</p>
<p>$ \space \space \space \space \space \space $ 其中 $ \alpha (0 \leq \alpha \leq 1) $ 被称为 <strong>学习速率(learning rate)</strong> 。</p>
<p>由这个更新规则可知，越旧的样本的权重指数级减小，这正是我们更新 $ V^{\pi}(s) $ 所需要的（因为越旧的样本往往意味着较劣的策略，也意味着错误）！这就是 TD learning 的美妙之处——用一个简单直接的更新规则，我们能够：</p>
<ul>
<li>在每一步学习，因此没得到状态的值的信息可以直接使用。</li>
<li>给较旧的、不太准确的样本给予指数级减小的权重。</li>
<li>相比于直接估值，可以在更少的周期内更快地向正确的状态的值收敛。</li>
</ul>
<h4 id="Q-learning"><a href="#Q-learning" class="headerlink" title="Q-learning"></a>Q-learning</h4><p>无论是直接估值还是 TD learning ，它们都会在所遵循的策略下得到真实的状态的值。但是，它们都有一个固有的问题——我们想要找一个最优的策略，这需要知道每个状态的 Q 值。为了计算 Q 值，我们需要转换函数和奖励函数并用 Bellman 方程表示。</p>
<p>$$<br>Q^{<em>}(s, a) &#x3D; \sum_{s’}T(s, a, s’)[R(s, a, s’) + \gamma V^{</em>}(s’)]<br>$$</p>
<p>因此，为了高效地更新 agent 的策略，TD learning 和直接估值通常与一些基于模型的学习一起使用，以获得 $ T $ 和 $ R $ 的估计。这种情况可以通过 Q-learning 的思想避免，即绕过对转换函数、奖励函数的需要，直接对 Q 值进行学习。因此，Q-learning 是完全不基于模型的。Q-learning 用了 Q 值迭代进行更新：</p>
<p>$$<br>Q_{k + 1}(s, a) \leftarrow \sum_{s’}T(s, a, s’)[R(s, a, s’) + \gamma \max_{a’} Q(s’, a’)]<br>$$</p>
<p>有了这个新的更新规则，和 TD learning 一样，用指数滑动平均：</p>
<p>$$<br>sample &#x3D; R(s, a, s’) + \gamma \max_{a’} Q(s’, a’)\<br>Q(s, a) \leftarrow (1 - \alpha) Q(s, a) + \alpha \cdot sample<br>$$</p>
<p>只要我们花足够多的时间去探索，并且用恰当的速率去减小 $ \alpha $ ，Q-learning 会对每个 Q 状态得到最优的 Q 值。这使得 Q-learning 具有革命性的意义——当 TD learning 和直接估值在某个策略下得到状态的值再用其他技巧决定最优策略时，Q-learning 可以直接得到最优策略，即使做出的次优或者随机的操作。这就是所谓的 <strong>离线策略学习(off-policy learning)</strong> （相较于直接估值和 TD learning 作为 <strong>在线策略学习(on-policy learning)</strong> 的例子）。</p>
<h4 id="Approximate-Q-learning"><a href="#Approximate-Q-learning" class="headerlink" title="Approximate Q-learning"></a>Approximate Q-learning</h4><p>Q-learning 还有进步的空间。Q-learning 将所有的状态以表格的形式存储，当状态数很多时，Q-learning 的效率并不高。这意味着我们不能访问所有状态并且不能存储所有的 Q 值，因为空间不够。</p>
<p>假如一个局势下 Q-learning 判断出是不利的，那么对于类似的情况 Q-learning 无法判断也是不利的。Approximate Q-learning 尝试去学习一些一般的情况并外推到许多类似的情况来解释这一点。生成学习经验的关键是对状态的 <strong>基于特征的表示(feature-based representation)</strong> ，即用一个 <strong>特征向量(feature vector)</strong> 来表示状态。例如，吃豆人的特征向量可以编码为：</p>
<ul>
<li>距离最近的幽灵的距离</li>
<li>距离最近的食物的距离</li>
<li>幽灵的个数</li>
<li>吃豆人是否被困(True&#x2F;False)</li>
</ul>
<p>使用特征向量，我们可以将状态的值和 Q 值视为线性函数：</p>
<p>$$<br>\begin{aligned}<br>    V(s) &amp;&#x3D; \sum_{k &#x3D; 1}^{n} w_{k} \cdot f_{k}(s) &#x3D; \vec{w} \cdot \vec{f}(s)\<br>    Q(s, a) &amp;&#x3D; \vec{w} \cdot \vec{f}(s, a)<br>\end{aligned}<br>$$</p>
<p>其中 $ \vec{f}(s) $ 表示状态的特征向量，$ \vec{f}(s, a) $ 表示 Q-状态 $ (s, a) $ 的特征向量，$ \vec{w} $ 表示权重向量。定义偏差(difference)为：</p>
<p>$$<br>difference &#x3D; [R(s, a, s’) + \gamma \max_{a’} Q(s’, a’)] - Q(s, a)<br>$$</p>
<p>Approximate Q-learning 的更新规则和 Q-learning 完全一致（实际上是最小二乘，不知道为什么笔记里写的是和 Q-learning 更新方式一致的）：</p>
<p>$$<br>w_{k} \leftarrow w_{k} + \alpha \cdot difference \cdot f_{k}(s, a)<br>$$</p>
<p>放弃对每个状态的 Q 值存储，使用 Approximate Q-learning 我们只需要存储一个权重向量就可以计算需要的 Q 值。因此，这不仅给了我们一个更泛用的 Q-learning 版本，并且显著提升了存储效率。</p>
<p>用偏差来重写 Q-learning 的更新规则：</p>
<p>$$<br>Q(s, a) \leftarrow Q(s, a) + \alpha \cdot difference<br>$$</p>
<p>这个更新规则和 $ w_{k} \leftarrow w_{k} + \alpha \cdot difference \cdot f_{k}(s, a) $ 略有不同但同样具有价值：它计算估计值和当前值的偏差，然后往估计值方向趋近，幅度和偏差值成正比。</p>
<h4 id="策略搜索-policy-search"><a href="#策略搜索-policy-search" class="headerlink" title="策略搜索(policy search)"></a>策略搜索(policy search)</h4><p>（note 里没写，PPT 里讲地不清楚，视频里一笔带过，以下内容疑似 PPT 内容的机翻）</p>
<p>问题：通常，运行良好的基于特征的策略（能赢，最大化得分）不是去选 V 值或者 Q 值最好的策略。</p>
<p>解决方案：学习奖励最大化的策略，而不是预测的值。</p>
<p>策略搜索：从一个不错的策略开始（例如：Q-learning 生成的策略），然后（在特征权重(feature weights)上）用爬山微调。</p>
<p>最简单的策略搜索：</p>
<ul>
<li>从线性的初始状态值或者 Q 值开始。</li>
<li>稍稍增加或者减小每个特征的权重，然后观察策略是否更优。</li>
</ul>
<p>问题：</p>
<ul>
<li>我们怎样认为这个策略更好？</li>
<li>这需要运行很多次样例的周期！</li>
<li>当特征很多时，这种方法就显得不实用。</li>
</ul>
<p>更好的方法利用前瞻性结构(lookahead structure)，聪明地取样，改变多个参数等等。</p>
<p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note10.pdf">RL II notes</a></p>
<p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/lectures/cs188-fa22-lec10.pdf">RL II slides</a></p>
<h3 id="探索和开发-exploration-and-exploitation"><a href="#探索和开发-exploration-and-exploitation" class="headerlink" title="探索和开发(exploration and exploitation)"></a>探索和开发(exploration and exploitation)</h3><h4 id="如何去探索？"><a href="#如何去探索？" class="headerlink" title="如何去探索？"></a>如何去探索？</h4><p>最简单的方式：随机操作( $ \varepsilon $ - greedy)</p>
<ul>
<li>每一步，进行两种选择。</li>
<li>一个较小的概率 $ \varepsilon $ ，随机操作。</li>
<li>一个较大的概率 $ 1 - \varepsilon $ ，按当前策略操作。</li>
</ul>
<p>随机操作的问题：</p>
<ul>
<li>最终会探索整个空间，但一旦完成了学习，就会到处乱走。</li>
<li>一个解决方法： $ \varepsilon $ 随时间减小。</li>
<li>另一个解决办法：用探索函数(exploration functions)。</li>
</ul>
<h4 id="探索函数-exploration-functions"><a href="#探索函数-exploration-functions" class="headerlink" title="探索函数(exploration functions)"></a>探索函数(exploration functions)</h4><p>对于随机操作，可以探索一定次数后结束。</p>
<p>更好的想法是，去探索访问次数少的点，最后停止探索(explore areas whose badness is not (yet) established, eventually stop exlporing)。</p>
<p>用估计的值 $ u $ 和访问次数 $ n $ 来定义探索函数，返回一个乐观的估计，例如 $ f(u, n) &#x3D; u + k &#x2F; n $ 。</p>
<p>对 Q 值更新规则进行修改：</p>
<p>$$<br>\begin{aligned}<br>    sample &amp;&#x3D; R(s, a, s’) + \gamma \max_{a’}f(Q(s’, a’), N(s’, a’))\<br>    Q(s, a) &amp;\leftarrow (1 - \alpha) Q(s, a) + \alpha \cdot sample<br>\end{aligned}<br>$$</p>
<h4 id="反悔-regret"><a href="#反悔-regret" class="headerlink" title="反悔(regret)"></a>反悔(regret)</h4><p>即使你能找到最优策略，在过程中你依旧可能会犯错误。</p>
<p>反悔值是你衡量错误成本的指标：最优（期望）的奖励和你（期望）的奖励（包括早期的次优选）的差。</p>
<p>最大限度地减少反悔不仅仅是为了得到最优策略，它还需要最优化学习以达到最优策略。</p>
<p>例如：随机探索和用探索函数探索都能得到最优策略，但是随机探索有更高的反悔值。</p>
<h2 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/lectures/cs188-fa22-lec11.pdf">Probability slides</a></p>
<p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note11.pdf">Probability notes</a></p>
<p>条件独立：事件A，B关于事件C条件独立（只要C事件发生，A、B相互独立），当且仅当：</p>
<p>$$<br>P(A | BC) &#x3D; P(A | C)\<br>or \<br>P(AB | C) &#x3D; P(A | C)P(B | C)<br>$$</p>
<p>记作：</p>
<p>$$<br>A \perp B \vert {C}<br>$$</p>
<p>推导：</p>
<p>$$<br>\begin{aligned}<br>    P(A | BC) &amp;&#x3D; \frac{P(ABC)}{P(BC)} \<br>    &amp;&#x3D; \frac{P(ABC)}{P(C)} \frac{P(C)}{P(BC)} \<br>    &amp;&#x3D; \underline{P(AB | C)} \frac{P(C)}{P(BC)} \<br>    &amp;&#x3D; \underline{P(A | C) P(B | C)} \frac{P(C)}{P(BC)} \<br>    &amp;&#x3D; P(A | C) \frac{P(BC)}{P(C)} \frac{P(C)}{P(BC)} \<br>    &amp;&#x3D; P(A | C)<br>\end{aligned}<br>$$</p>
<h2 id="贝叶斯网络"><a href="#贝叶斯网络" class="headerlink" title="贝叶斯网络"></a>贝叶斯网络</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/lectures/cs188-fa22-lec12.pdf">BN: Representation slides</a></p>
<p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note12.pdf">BN: Representation notes</a></p>
<h3 id="贝叶斯网络表达-Bayesian-Network-Representation"><a href="#贝叶斯网络表达-Bayesian-Network-Representation" class="headerlink" title="贝叶斯网络表达(Bayesian Network Representation)"></a>贝叶斯网络表达(Bayesian Network Representation)</h3><p>虽然枚举可以计算我们所有想要知道的概率，在计算机中用内存存储所有的联合分布(joint distribution)对于实际问题是不切实际的——假如有 n 个变量，每个变量有 d 个取值，那联合分布表会有 d^n^ 个条目，呈指数级。</p>
<p>贝叶斯网络通过条件概率(conditional probility)避免了这个问题。概率被存储在一些小的条件概率表并用有向无环图(directed acyclic graph, DAG)描述变量之间的关系。本地的概率表和DAG一起将信息存储，并足以计算任何条件概率分布。</p>
<p>我们定义贝叶斯网络包含：</p>
<ul>
<li>一个DAG，一个节点表示一个变量 $ X $ 。</li>
<li>对于每个节点有一个条件概率分布 $ P(X | A_1 \dots A_n) $ ，其中 $ A_i $ 表示 $ X $ 的第 $ i $ 个父亲，用条件概率表(conditional probability table, CPT)存储。每个CPT含有 $ n + 2 $ 列：$ n $ 个父亲，一个 $ X $ ，还有一个条件概率。</li>
</ul>
<p>贝叶斯网络的结构对不同节点间条件独立关系进行编码。这些条件独立性使我们可以存储多个小表，而非一个大表。</p>
<p>很重要的一点是贝叶斯网络节点之间的边并非表示两者之间存在相关性，不是因果关系。</p>
<p>例如，假设有一个模型，包含5个二进制随机变量：</p>
<ul>
<li>B：发生盗窃</li>
<li>A：警报响起</li>
<li>E：发生地震</li>
<li>J：John报警</li>
<li>M：Mary报警</li>
</ul>
<p>它们的关系可以用下图表示。</p>
<p><img src="/2025/07/27/CS188/fig2.png" alt="fig2.png"></p>
<p>在贝叶斯网络里，我们存储概率表 $ P(B), P(E), P(A | BE), P(J | A), P(M | A) $ 。</p>
<p>我们可以计算概率：</p>
<p>$$<br>P(X_1 X_1 \dots X_n) &#x3D; \prod_{i &#x3D; 1}^{n} P(X_i | parents(X_i))<br>$$</p>
<p>例如：</p>
<p>$$<br>P(-b, -e, +a, +j, -m) &#x3D; P(-b) \cdot P(-e) \cdot P(+a | -b, -e) \cdot P(+j | +a) \cdot P(-m | +a)<br>$$</p>
<h3 id="贝叶斯网络结构-Structure-of-Bayes-Nets"><a href="#贝叶斯网络结构-Structure-of-Bayes-Nets" class="headerlink" title="贝叶斯网络结构(Structure of Bayes Nets)"></a>贝叶斯网络结构(Structure of Bayes Nets)</h3><p>$$<br>P(x_i | x_1 x_2 \dots x_{i - 1}) &#x3D; P(x_i | parents(x_i))\<br>\Rightarrow P(x_1 x_2 \dots x_{i - 1}) &#x3D; \prod_{i &#x3D; 1}^{n} P(x_i | parents(x_i))<br>$$</p>
<p>即 $ x_i $ 与 $ x_1, x_2, \dots x_{i - 1} &#x2F; parents(x_i) $ 在 $ parents(x_i) $ 下条件独立。</p>
<p>例如：</p>
<p><img src="/2025/07/27/CS188/fig2.png" alt="fig2.png"></p>
<p>$$<br>\begin{aligned}<br>    P(BEAJM) &amp;&#x3D; P(B) P(B | E)P(A | BE) P(J | BEA) P(M | BEAJ) \<br>    &amp;&#x3D; P(B) P(E) P(A | BE) P(J | A) P(M | A)<br>\end{aligned}<br>$$</p>
<p>一一对应可得条件独立关系。</p>
<p>每个节点与其马尔可夫覆盖(Markov blanket)之外的点条件独立。</p>
<p>一个变量的马尔可夫覆盖包含它的父亲、儿子和儿子的其他父亲（因为是DAG）。</p>
<h3 id="D分离-D-Seperation"><a href="#D分离-D-Seperation" class="headerlink" title="D分离(D-Seperation)"></a>D分离(D-Seperation)</h3><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note13.pdf">Slides</a></p>
<p>D分离（D-Separation）又被称作有向分离，是一种用来判断变量是否条件独立的图形化方法。相比于非图形化方法，D-Separation更加直观且计算简单。对于一个DAG（有向无环图），D-Separation方法可以快速的判断出两个节点之间是否是条件独立的。</p>
<p>查询：$ x_i \perp x_j \vert {x_{k_1}, x_{k_2}, \dots x_{k_n}} $</p>
<p>检查所有连接 $ x_i $ 和 $ x_j $ 的路径。如果一条或者多条路径是 <strong>激活</strong> 的，那么，条件独立性不成立。</p>
<p>否则，条件独立性成立： $ x_i \perp x_j \vert {x_{k_1}, x_{k_2}, \dots x_{k_n}} $ 。</p>
<p>如果路径中所有的三元组都是 <strong>激活</strong> 的，则该路径是 <strong>激活</strong> 的。</p>
<p>三元组的三种形式（又或者没有证据变量）：</p>
<ul>
<li>因果链条</li>
</ul>
<blockquote>
<p>A(0) -&gt; B(1) -&gt; C(0)</p>
</blockquote>
<p>$$<br>P(ABC) &#x3D; P(A)P(B | A)P(C | B) \<br>A \perp C ? \space (P(AC) &#x3D; P(A)P(C) ?) \<br>No. \<br>A \perp C | B ? \space (P(AC | B) &#x3D; P(A | B)P(C | B) ? )\<br>Yes. \<br>P(AC | B) &#x3D; \frac{P(ABC)}{P(B)}\<br>&#x3D; \frac{P(A)P(B|A)P(C|B)}{P(B)}<br>\&#x3D; \frac{P(AB)}{P(A)} \times P(C|B)\<br>&#x3D; P(A|B)P(C|B)<br>$$</p>
<p>链上的中间变量可以阻隔影响传播。</p>
<ul>
<li>共同原因<blockquote>
<p>A(0) &lt;- B(1) -&gt; C(0)</p>
</blockquote>
</li>
</ul>
<p>$$<br>P(ABC) &#x3D; P(B)P(A|B)P(C|B) \<br>A \perp C ? \space (P(AC) &#x3D; P(A)P(C) ?) \<br>No. \<br>A \perp C | B ? \space (P(AC | B) &#x3D; P(A | B)P(C | B) ? )\<br>Yes. \<br>P(AC|B) &#x3D; \frac{P(ABC)}{P(B)}\<br>&#x3D; \frac{P(B)P(A|B)P(C|B)}{P(B)}\<br>&#x3D; P(A|B)P(C|B)<br>$$</p>
<ul>
<li>共同结果<blockquote>
<p>A(0) -&gt; B(1) &lt;- C(0)</p>
</blockquote>
</li>
</ul>
<p>$$<br>P(ABC) &#x3D; P(A)P(C)P(B|AC)\<br>P(A)P(C) &#x3D; P(AC)\<br>A \perp C | B ? \space (P(AC | B) &#x3D; P(A | B)P(C | B) ? )\<br>No. \<br>P(A) &#x3D; P(C) &#x3D; \frac{1}{2}\<br>P(B) &#x3D; A \space or \space C\<br>P(AC|B) &#x3D; \frac{1}{3}\<br>P(A|B) &#x3D; P(C|B) &#x3D; \frac{2}{3}<br>$$</p>
<p>如果路径中某三元组是非激活的，那么这条路径就是非激活的。</p>
<h4 id="贝叶斯网络独立性问题的形式化定义"><a href="#贝叶斯网络独立性问题的形式化定义" class="headerlink" title="贝叶斯网络独立性问题的形式化定义"></a>贝叶斯网络独立性问题的形式化定义</h4><ul>
<li><p>问题：给定证据变量(evidence variables) $ {Z} $ ， $ X $ 是否条件独立于 $ Y $ ?</p>
</li>
<li><p>D-分离：在贝叶斯网络中寻找关联路径，并基于路径作独立性判断。</p>
</li>
</ul>
<ol>
<li>列出所有连接 $ X $ 和 $ Y $ 的路径。</li>
<li>没有激活路径 &#x3D; 独立性，有激活路径 &#x3D; 独立性不成立。</li>
</ol>
<ul>
<li>路径的独立性判断：将路径拆解为多个三元组，检查三元组的独立性。</li>
</ul>
<h4 id="激活-非激活路径"><a href="#激活-非激活路径" class="headerlink" title="激活 &#x2F; 非激活路径"></a>激活 &#x2F; 非激活路径</h4><p>如果每个三元组都是激活的，那这条路径就是激活的。</p>
<ul>
<li>因果链条：若 $ B $ 未被观察， $ A $ 和 $ C $ 不相互独立；否则相互独立。</li>
<li>共同原因：若 $ B $ 未被观察， $ A $ 和 $ C $ 不相互独立；否则相互独立。</li>
<li>共同结果：若 $ B $ 或者其子孙节点未被观察， $ A $ 和 $ C $ 相互独立；否则不相互独立。</li>
</ul>
<p>出现不独立的情况，这个三元组就被激活。</p>
<p>如果任一三元组不激活，这条路径就不激活。</p>
<h4 id="贝叶斯网络中的条件独立性"><a href="#贝叶斯网络中的条件独立性" class="headerlink" title="贝叶斯网络中的条件独立性"></a>贝叶斯网络中的条件独立性</h4><p>给定贝叶斯网络，运用 D-分离 方法，可以得到所有形式的条件独立性。</p>
<p>$$<br>x_i \perp x_j | {x_{k_1}, \dots, x_{k_n}}<br>$$</p>
<p>基于得到的条件独立列表，可以确定贝叶斯网络能够表达的所有概率分布。</p>
<h3 id="贝叶斯网络的独立性隐含关系"><a href="#贝叶斯网络的独立性隐含关系" class="headerlink" title="贝叶斯网络的独立性隐含关系"></a>贝叶斯网络的独立性隐含关系</h3><p>给定贝叶斯网络，只有特定的联合分布能够被表达。</p>
<p>贝叶斯网络中的某些（条件）独立性，确立了能被表达的联合分布。</p>
<p>表达扩充：在贝叶斯网络中增加边，可以扩充能表达的分布范围。</p>
<p>极端情况：节点不存在独立性，能表达任意分布。</p>
<h3 id="概率推断"><a href="#概率推断" class="headerlink" title="概率推断"></a>概率推断</h3><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/lectures/cs188-fa22-lec14.pdf">Slides</a></p>
<p>询问</p>
<p>$$<br>P(Q | e_1 e_2 \dots e_k)<br>$$</p>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>通常情况：</p>
<ul>
<li>证据变量： $ e_1, e_2, \dots , e_k $</li>
<li>询问变量： $ Q $</li>
<li>隐藏变量： $ H_1, \dots , H_r $</li>
</ul>
<p>步骤：</p>
<ol>
<li>选出包含证据变量的条件概率表的条目。</li>
<li>将 $ H $ 相加：</li>
</ol>
<p>$$<br>P(Q \space e_1 \dots e_k) &#x3D; \sum_{h_1, h_2, \dots , h_r} P(Q \space h_1 \dots h_r \space e_1 \dots e_k)<br>$$</p>
<ol start="3">
<li>规范化</li>
</ol>
<p>$$<br>Z &#x3D; \sum_{q} P(Q \space e_1 \dots e_k) \<br>P(Q | e_1 \dots e_k) &#x3D; \frac{P(Q \space e_1 \dots e_k)}{Z}<br>$$</p>
<p>时间复杂度是指数级的，能够得到准确的答案。</p>
<h4 id="消元法"><a href="#消元法" class="headerlink" title="消元法"></a>消元法</h4><p>联合分布 $ P(x y) $ 的和为 $ 1 $ 。</p>
<p>选定几个节点固定： $ P(x Y) $ 。这是联合分布的一部分，其和为 $ P(x) $ 。</p>
<p>大写字母（未确定变量）的个数即概率表的维数。</p>
<p>单个条件概率： $ P(Y | x) $ 。</p>
<ul>
<li>包含所有 $ P(y | x) $ 的固定 $ x $ 的条目。</li>
<li>和为 $ 1 $ 。</li>
</ul>
<p>条件概率组： $ P(Y | X) $ ：</p>
<ul>
<li>包含所有 $ P(y | x) $ 的所有条目。</li>
<li>和为 $ X $ 的集合大小 $ |X| $ 。</li>
</ul>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>一个一个消除隐藏变量。要消除隐藏变量 $ X $ ，我们要：</p>
<ol>
<li>将包含 $ X $ 的因子(factor)乘起来。</li>
<li>加起来消除 $ X $ 。</li>
</ol>
<p>一个因子定义为未被规范化的概率。在变量消除期间的所有时候，每个因子都将与其对应的概率成正比，但每个因子的基础分布不一定像概率分布那样总和 $ 1 $ 。伪代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">elimination</span>(<span class="params">X, e, bn</span>): <span class="comment"># returns a distribution of X</span></span><br><span class="line">    <span class="comment"># X : query variable.</span></span><br><span class="line">    <span class="comment"># e : observed values for variables E(evidence variables).</span></span><br><span class="line">    <span class="comment"># bn : a Bayesian network specifying joint distribution</span></span><br><span class="line">    <span class="comment"># P(x1, ..., xn).</span></span><br><span class="line">    factors = []</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> ORDER(var, e):</span><br><span class="line">        factors = [MAKE_FACTOR(var, e) | factors]</span><br><span class="line">        <span class="keyword">if</span> var <span class="keyword">is</span> hidden variable:</span><br><span class="line">            factors = SUM_OUT(var, factors)</span><br><span class="line">    <span class="keyword">return</span> NORMALIZE(POINTWISE_PRODUCT(factors))</span><br></pre></td></tr></table></figure>

<p>（CS188 Notes 里写得和天书一样）</p>
<p>举个例子：</p>
<p><img src="/2025/07/27/CS188/fig3.png" alt="fig3.png"></p>
<p>这个贝叶斯网络给定了 $ P(C), P(C | T), P(S | T), P(E | CS) $ 的联合分布。</p>
<p>假设我们要求 $ P(T | +e) $ 。假如用枚举的方法我们需要 16 行的概率分布函数 $ P(T, C, S, E) $ ，选择包含 $ +e $ 的行，对 $ C, S $ 求和最后规范化。</p>
<p>用消元法就先将 $ C $ 消掉，再把 $ S $ 消掉。</p>
<ol>
<li>将包含 $ C $ 的因子乘起来， $  f_1(C, +e, T, S) &#x3D; P(C | T) \cdot P(+e | C, S)  $ ，也写作 $ P(C, +e | T, S) $ 。</li>
<li>在这个新的因子里将 $ C $ 求和，得到新的因子 $ f_2(+e, T, S) $ ，也写作 $ P(+e | T, S) $ 。</li>
<li>将包含 $ S $ 的因子乘起来， $  f_3(+e, T, S) &#x3D; P(S | T) \cdot f_2(+e, T, S) $ ，也写作 $ P(+e, S | T) $ 。</li>
<li>将 $ S $ 求和，得到新的因子 $ f_4(+e, T) $ ，也写作 $ P(+e | T) $ 。</li>
<li>将剩下的因子乘起来，$ f_5(+e, T) &#x3D; f_4(+e, T) \cdot P(T) $ 。</li>
</ol>
<p>消元的顺序也会影响复杂度。如图：</p>
<p><img src="/2025/07/27/CS188/fig4.png" alt="fig4.png"></p>
<p>我们在进行变量消除的过程中，会进行多次乘法，这就可能会产生各种尺寸的因子，如果最大的因子中有 $ w $ 个变量，那么，单次消元的代码复杂度为 $ O(2^w) $ 。我们把 $ w $ 这个数字称为消除顺序 (Elimination Order) 的宽度 (Width)，这是衡量一个消除顺序的重要指标，我们希望能找到一个具备最小宽度的消除顺序，也就是希望最大因子的尺寸尽可能小。</p>
<h3 id="概率推断是-NPC-问题"><a href="#概率推断是-NPC-问题" class="headerlink" title="概率推断是 NPC 问题"></a>概率推断是 NPC 问题</h3><p>Slides 提到了一种用贝爷斯网络构造 3-sat 问题的方法。众所周知 3-sat 是无法在多项式时间复杂度内解决的问题，所以概率推断是 np-hard 的。</p>
<h3 id="取样-sampling"><a href="#取样-sampling" class="headerlink" title="取样(sampling)"></a>取样(sampling)</h3><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><ul>
<li>从分布 S 中取 N 个样本。</li>
<li>计算后验概率。</li>
<li>体现这个概率收敛于真实概率 P 。</li>
</ul>
<h4 id="先验采样-Prior-Sampling"><a href="#先验采样-Prior-Sampling" class="headerlink" title="先验采样(Prior Sampling)"></a>先验采样(Prior Sampling)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">For i = 1, 2, ..., n</span><br><span class="line">    Sample x_i from P(X_i | Parents(X_i))</span><br><span class="line">return (x_1, x_2, ..., x_n)</span><br></pre></td></tr></table></figure>

<ul>
<li>这个过程生成样本，其中有 $ P(x_1, \dots, x_n) $ 的概率生成样本 $ (x_1, \dots, x_n) $ 。</li>
<li>令一个事件的样本数量为 $ N_{PS}(x_1, \dots, x_n) $ 。</li>
<li></li>
</ul>
<p>$$<br>\begin{aligned}<br>    \lim_{N \rightarrow \infin} \hat{P}(x_1, \dots, x_n) &amp;&#x3D; \lim_{N \rightarrow \infin} N_{PS}(x_1, \dots, x_n) &#x2F; N \<br>    &amp;&#x3D; P(x_1, \dots, x_n)<br>\end{aligned}<br>$$</p>
<h4 id="拒绝采样-Rejection-Sampling"><a href="#拒绝采样-Rejection-Sampling" class="headerlink" title="拒绝采样(Rejection Sampling)"></a>拒绝采样(Rejection Sampling)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: evidence instantiation</span><br><span class="line">For i = 1, 2, ..., n</span><br><span class="line">    Sample x_i from P(X_i | Parents(X_i))</span><br><span class="line">    if x_i not consistent with evidence</span><br><span class="line">        return: reject this sample</span><br><span class="line">return (x_1, x_2, ..., x_n)</span><br></pre></td></tr></table></figure>

<p>在 Prior Sampling 的基础上把不符合条件（不满足证据变量条件）的样本直接在采样的时候删去。</p>
<h4 id="Likelihood-Weighting"><a href="#Likelihood-Weighting" class="headerlink" title="Likelihood Weighting"></a>Likelihood Weighting</h4><ul>
<li>rejection sampling 的问题：当证据变量的概率很小时，会拒绝很多样本。</li>
<li>Idea：直接固定证据变量(要赋予一定的权重，大小为得到证据变量的条件概率)。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: evidence instantiation</span><br><span class="line">w = 1.0</span><br><span class="line">For i = 1, 2, ..., n</span><br><span class="line">    if x_i is an evidence variable</span><br><span class="line">        X_i = observation x_i for X_i</span><br><span class="line">        set w = w * P(x_i | Parents(X_i))</span><br><span class="line">    else</span><br><span class="line">        sample x_i from P(x_i | Parents(X_i))</span><br><span class="line">return (x_1, x_2, ..., x_n), w</span><br></pre></td></tr></table></figure>

<ul>
<li>Likelihood Weighting 的问题：Evidence influences the choice of downstream variables, but not upstream ones (C isn’t more<br>likely to get a value matching the evidence) （没看懂，大概是拓扑序前面的节点会影响后面的节点，但是后面的节点不会对前面的节点有影响，但这怎么成了问题）（哦，大概是条件概率表不构成拓扑关系，这时候就不能用之前的方式）</li>
</ul>
<h4 id="吉布斯采样-Gibbs-Sampling"><a href="#吉布斯采样-Gibbs-Sampling" class="headerlink" title="吉布斯采样(Gibbs Sampling)"></a>吉布斯采样(Gibbs Sampling)</h4><p>假设有一随机向量 $ (x_1,x_2,\dots,x_n) $ ，每一维是一随机变量。</p>
<p>显然想要从多元分布的联合概率分布中直接抽样是相当困难的。</p>
<p>先从任意一个初始状态 $ (x_1^{(0)}, \dots, x_n^{(0)}) $ 开始，每一维度单独采样，迭代多次。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for t = 1, 2, ..., T</span><br><span class="line">    for i = 1, 2, ..., n</span><br><span class="line">        if x_i is not an evident variable</span><br><span class="line">            sample x_i^&#123;(t)&#125; from P(x_i | (x_1^&#123;(t - 1)&#125;, ..., x_n^&#123;(t - 1)&#125;) \ x_i^&#123;(t - 1)&#125;)</span><br><span class="line">        else</span><br><span class="line">            x_i^&#123;(t)&#125; = x_i^&#123;(t - 1)&#125; (remain the evident value)</span><br><span class="line">    cnt[(x_1^&#123;(T)&#125;, ..., x_n^&#123;(T)&#125;)] += 1</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>「CTSC2018」暴力写挂</title>
    <url>/2025/07/27/CTSC2018-bao-li-xie-gua/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2553">「CTSC2018」暴力写挂</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$$<br>dep(x) + dep(y) - dep(LCA(x, y)) - dep’(LCA’(x, y))\\<br> &#x3D; \frac{1}{2} (dep(x) + dep(y) - 2dep(LCA(x, y)) + dep(x) + dep(y) - 2dep’(LCA’(x, y)))\\<br> &#x3D; \frac{1}{2}(dis(x, y) + dep(x) + dep(y) - 2dep’(LCA’(x, y)))<br>$$</p>
<p>考虑对第一棵树边分治。设当前分治重心为 $ U, V $ ，选择 $ U $ 侧节点 $ X $ ，选择 $ V $ 侧节点 $ Y $ ，则令 $ X $ 为一类节点，贡献为 $ e1(X) &#x3D; dep(X) + dis(V, X) $ ；令 $ Y $ 为二类节点，贡献为 $ e2(Y) &#x3D; dep(Y) + dis(V, Y) $ 。枚举第二颗树的 $ LCA $ ，设 $ X, Y $ 在第二颗树中的 $ LCA $ 为 $ lca $ ，则对答案的贡献为 $ \frac{1}{2}(e1(X) + e2(Y) - 2dep(lca)) $ 。由于需要正确的时间复杂度，所以需要对第二颗树建虚树进行 $ DP $ 。<br>不优秀的实现会导致时间复杂度为 $ O(n \log^2 n) $ ，由于每次建虚树的时间复杂度应为 $ O(k) $ ，所以需要用 $ RMQ $ 实现 $ O(1) $ 的 $ LCA $ ；另外每次建虚树需要将点排序，将排序放在分治之前，然后按照分治将数列分成两段，每次建虚树直接调用数组（或者先分治下去再归并排序然后建虚树）。更改后时间复杂度为 $ O(n \log n) $ 。<br>注意 $ x $ 可以与 $ y $ 相同，而边分治未考虑这一点，所以还要考虑 $ x &#x3D; y $ 的情况。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, ll&gt; pil;</span><br><span class="line"><span class="type">const</span> ll INF = <span class="number">1e17</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">800010</span>;</span><br><span class="line"><span class="type">int</span> n, m; ll ans = -INF, w[N], fw[N];</span><br><span class="line">vector&lt;pil&gt; e1[N], e2[N]; vector&lt;<span class="type">int</span>&gt; E[N]; <span class="type">int</span> ar[N], len;</span><br><span class="line"><span class="type">int</span> dep[N], dfn[N], idx, a[N], st[<span class="number">20</span>][N], lg[N]; ll Dep[N];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>, to[N + N], nxt[N + N], hed[N]; ll val[N + N]; <span class="type">bool</span> used[N + N];</span><br><span class="line"><span class="type">int</span> size, rte, mn, sz[N], tot;</span><br><span class="line">ll value[N], f1[N], f2[N]; <span class="type">int</span> flag[N], sta[N], top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(), pre = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; pre = c, c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = x * <span class="number">10ll</span> + (c ^ <span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(pre == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, ll z)</span> </span>&#123;</span><br><span class="line">	to[++cnt] = y, nxt[cnt] = hed[x], hed[x] = cnt, val[cnt] = z;</span><br><span class="line">	to[++cnt] = x, nxt[cnt] = hed[y], hed[y] = cnt, val[cnt] = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> dfn[x] &lt; dfn[y]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getdfn</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	dfn[u] = ++idx, a[idx] = u, dep[u] = dep[ff] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e2[u]) <span class="keyword">if</span>(v.fst != ff) Dep[v.fst] = Dep[u] + v.snd, <span class="built_in">getdfn</span>(v.fst, u), a[++idx] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	x = dfn[x], y = dfn[y]; <span class="keyword">if</span>(x &gt; y) <span class="built_in">swap</span>(x, y); <span class="type">int</span> k = y - x + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> dep[st[lg[k]][x]] &lt;= dep[st[lg[k]][y - (<span class="number">1</span> &lt;&lt; lg[k]) + <span class="number">1</span>]] ? st[lg[k]][x] : st[lg[k]][y - (<span class="number">1</span> &lt;&lt; lg[k]) + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ar[l];</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, u = ++m, ls = <span class="built_in">build</span>(l, mid), rs = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">	<span class="keyword">if</span>(ls) <span class="built_in">addedge</span>(u, ls, fw[ls]); <span class="keyword">if</span>(rs) <span class="built_in">addedge</span>(u, rs, fw[rs]); <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rebuild</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	len = <span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">auto</span> v : e1[u]) <span class="keyword">if</span>(v.fst != ff) ar[++len] = v.fst, fw[v.fst] = v.snd;</span><br><span class="line">	<span class="type">int</span> mid = (<span class="number">1</span> + len) &gt;&gt; <span class="number">1</span>, ls = <span class="built_in">build</span>(<span class="number">1</span>, mid), rs = <span class="built_in">build</span>(mid + <span class="number">1</span>, len);</span><br><span class="line">	<span class="keyword">if</span>(ls) <span class="built_in">addedge</span>(u, ls, fw[ls]); <span class="keyword">if</span>(rs) <span class="built_in">addedge</span>(u, rs, fw[rs]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e1[u]) <span class="keyword">if</span>(v.fst != ff) w[v.fst] = w[u] + v.snd, <span class="built_in">rebuild</span>(v.fst, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getrt</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> ed)</span> </span>&#123;</span><br><span class="line">	sz[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] != ff &amp;&amp; !used[i])</span><br><span class="line">		<span class="built_in">getrt</span>(to[i], u, i), sz[u] += sz[to[i]];</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">abs</span>(size - <span class="number">2</span> * sz[u]) &lt; mn) mn = <span class="built_in">abs</span>(size - <span class="number">2</span> * sz[u]), rte = ed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> opt, ll d)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u &lt;= n) value[u] = d + w[u], flag[u] = opt;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] != ff &amp;&amp; !used[i]) <span class="built_in">Find</span>(to[i], u, opt, d + val[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	f1[u] = f2[u] = -INF;</span><br><span class="line">	<span class="keyword">if</span>(flag[u] == <span class="number">1</span>) f1[u] = <span class="built_in">max</span>(f1[u], value[u]);</span><br><span class="line">	<span class="keyword">if</span>(flag[u] == <span class="number">2</span>) f2[u] = <span class="built_in">max</span>(f2[u], value[u]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : E[u]) &#123;</span><br><span class="line">		<span class="built_in">Dfs</span>(v);</span><br><span class="line">		ans = <span class="built_in">max</span>(ans, <span class="built_in">max</span>(f1[u] + f2[v], f2[u] + f1[v]) - Dep[u] - Dep[u]);</span><br><span class="line">		f1[u] = <span class="built_in">max</span>(f1[u], f1[v]), f2[u] = <span class="built_in">max</span>(f2[u], f2[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	E[u].<span class="built_in">clear</span>(), flag[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">(vector&lt;<span class="type">int</span>&gt; p)</span> </span>&#123;</span><br><span class="line">	sta[top = <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : p) &#123;</span><br><span class="line">		<span class="keyword">if</span>(v == <span class="number">1</span>) <span class="keyword">continue</span>; <span class="type">int</span> lca = <span class="built_in">LCA</span>(v, sta[top]);</span><br><span class="line">		<span class="keyword">if</span>(lca == sta[top]) &#123; sta[++top] = v; <span class="keyword">continue</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span>(; top &gt; <span class="number">1</span> &amp;&amp; dep[sta[top - <span class="number">1</span>]] &gt;= dep[lca]; --top) E[sta[top - <span class="number">1</span>]].<span class="built_in">pb</span>(sta[top]);</span><br><span class="line">		<span class="keyword">if</span>(lca != sta[top]) E[lca].<span class="built_in">pb</span>(sta[top]), sta[top] = lca;</span><br><span class="line">		sta[++top] = v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(; top &gt; <span class="number">1</span>; --top) E[sta[top - <span class="number">1</span>]].<span class="built_in">pb</span>(sta[top]); <span class="built_in">Dfs</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u, vector&lt;<span class="type">int</span>&gt; p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u == <span class="number">-1</span> || used[u]) <span class="keyword">return</span> ;</span><br><span class="line">	used[u] = used[u ^ <span class="number">1</span>] = <span class="number">1</span>; <span class="type">int</span> rt1 = to[u], rt2 = to[u ^ <span class="number">1</span>], t1, t2;</span><br><span class="line">	<span class="built_in">Find</span>(rt1, rt2, <span class="number">1</span>, val[u]), <span class="built_in">Find</span>(rt2, rt1, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; ls, rs; <span class="keyword">for</span>(<span class="keyword">auto</span> v : p) flag[v] == <span class="number">1</span> ? ls.<span class="built_in">pb</span>(v) : rs.<span class="built_in">pb</span>(v);</span><br><span class="line">	<span class="built_in">Solve</span>(p);</span><br><span class="line">	size = ls.<span class="built_in">size</span>(), mn = m + <span class="number">1</span>, <span class="built_in">getrt</span>(rt1, rt2, <span class="number">-1</span>), <span class="built_in">solve</span>(rte, ls);</span><br><span class="line">	size = rs.<span class="built_in">size</span>(), mn = m + <span class="number">1</span>, <span class="built_in">getrt</span>(rt2, rt1, <span class="number">-1</span>), <span class="built_in">solve</span>(rte, rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n), m = n;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y; ll z; <span class="built_in">gi</span>(x), <span class="built_in">gi</span>(y), <span class="built_in">gi</span>(z), e1[x].<span class="built_in">pb</span>(<span class="built_in">mp</span>(y, z)), e1[y].<span class="built_in">pb</span>(<span class="built_in">mp</span>(x, z)); &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y; ll z; <span class="built_in">gi</span>(x), <span class="built_in">gi</span>(y), <span class="built_in">gi</span>(z), e2[x].<span class="built_in">pb</span>(<span class="built_in">mp</span>(y, z)), e2[y].<span class="built_in">pb</span>(<span class="built_in">mp</span>(x, z)); &#125;</span><br><span class="line">	<span class="built_in">getdfn</span>(<span class="number">1</span>, <span class="number">0</span>); <span class="built_in">rep</span>(i, <span class="number">1</span>, idx) st[<span class="number">0</span>][i] = a[i];</span><br><span class="line">	lg[<span class="number">0</span>] = <span class="number">-1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, idx) lg[i] = lg[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= idx; j++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= idx - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; i++)</span><br><span class="line">			st[j][i] = dep[st[j - <span class="number">1</span>][i]] &lt;= dep[st[j - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)]] ? st[j - <span class="number">1</span>][i] : st[j - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)];</span><br><span class="line">	<span class="built_in">rebuild</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; p; <span class="built_in">rep</span>(i, <span class="number">1</span>, n) p.<span class="built_in">pb</span>(i); <span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), cmp);</span><br><span class="line">	size = m, mn = m + <span class="number">1</span>, <span class="built_in">getrt</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>), <span class="built_in">solve</span>(rte, p), ans /= <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) ans = <span class="built_in">max</span>(ans, w[i] - Dep[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>虚树</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>【CodeChef】Count on a Treap</title>
    <url>/2025/07/27/CodeChef-Count-on-a-Treap/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.codechef.com/problems/COT5">【CodeChef】Count on a Treap</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>将元素按权值排序，再按键值建笛卡尔树，得到的树就是原 $ Treap $ 。<br>树上两个点的距离等于两个点的深度之和减去它们 $ LCA $ 深度的两倍。<br>考虑如何计算两个点的 $ LCA $。根据笛卡尔树的性质，任意点对 $ x, y (x \leq y) $ 的 $ LCA $ 为序列 $ [x, y] $ 中的键值最大值所在点的编号。<br>考虑如何计算一个点的深度。一个点的深度等于从他开始的前缀&#x2F;后缀键值最大值个数，可以用线段树维护（update 时间复杂度会因在线段树中二分查找前缀&#x2F;后缀键值最大值个数而多一个 $ \log $ ）。<br>时间复杂度为 $ O(n \log^2 n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">400010</span>;</span><br><span class="line"><span class="type">int</span> n, lca; ll value;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>, rt = <span class="number">0</span>, lf[N * <span class="number">2</span>], rf[N * <span class="number">2</span>], lx[N * <span class="number">2</span>], rx[N * <span class="number">2</span>];</span><br><span class="line">ll mx[N * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Opt</span> &#123; <span class="type">int</span> opt; ll x, y; &#125;; Opt q[N];</span><br><span class="line">ll p[N]; <span class="type">int</span> lp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Max</span><span class="params">(<span class="type">const</span> ll &amp;x, <span class="type">const</span> ll &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	u = ++tot; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">build</span>(lf[u], l, mid), <span class="built_in">build</span>(rf[u], mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">glx</span><span class="params">(<span class="type">int</span> u, ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!lf[u]) <span class="keyword">return</span> x &lt; mx[u];</span><br><span class="line">	<span class="keyword">return</span> x &lt; mx[rf[u]] ? (lx[u] + <span class="built_in">glx</span>(rf[u], x)) : <span class="built_in">glx</span>(lf[u], x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">grx</span><span class="params">(<span class="type">int</span> u, ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!lf[u]) <span class="keyword">return</span> x &lt; mx[u];</span><br><span class="line">	<span class="keyword">return</span> x &lt; mx[lf[u]] ? (rx[u] + <span class="built_in">grx</span>(lf[u], x)) : <span class="built_in">grx</span>(rf[u], x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	mx[u] = <span class="built_in">Max</span>(mx[lf[u]], mx[rf[u]]);</span><br><span class="line">	lx[u] = <span class="built_in">glx</span>(lf[u], mx[rf[u]]), rx[u] = <span class="built_in">grx</span>(rf[u], mx[lf[u]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, ll w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123; mx[u] = w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	x &lt;= mid ? <span class="built_in">mdy</span>(lf[u], l, mid, x, w) : <span class="built_in">mdy</span>(rf[u], mid + <span class="number">1</span>, r, x, w);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gmx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(L == l &amp;&amp; r == R) &#123;</span><br><span class="line">		<span class="keyword">if</span>(mx[u] &lt; value) <span class="keyword">return</span> ;</span><br><span class="line">		value = mx[u]; <span class="keyword">if</span>(l &gt;= r) &#123; lca = l; <span class="keyword">return</span> ; &#125;</span><br><span class="line">		<span class="built_in">gmx</span>(lf[u], l, mid, L, mid), <span class="built_in">gmx</span>(rf[u], mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, R);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(R &lt;= mid) <span class="built_in">gmx</span>(lf[u], l, mid, L, R);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(L &gt; mid) <span class="built_in">gmx</span>(rf[u], mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">gmx</span>(lf[u], l, mid, L, mid), <span class="built_in">gmx</span>(rf[u], mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">asklx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &gt;= r) &#123;</span><br><span class="line">		ss = <span class="built_in">glx</span>(u, value); value = <span class="built_in">Max</span>(value, mx[u]); <span class="keyword">return</span> ss;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(mid &lt; x) ss += <span class="built_in">asklx</span>(rf[u], mid + <span class="number">1</span>, r, x);</span><br><span class="line">	ss += <span class="built_in">asklx</span>(lf[u], l, mid, x); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">askrx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= l) &#123;</span><br><span class="line">		ss = <span class="built_in">grx</span>(u, value); value = <span class="built_in">Max</span>(value, mx[u]); <span class="keyword">return</span> ss;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(mid &gt;= x) ss += <span class="built_in">askrx</span>(lf[u], l, mid, x);</span><br><span class="line">	ss += <span class="built_in">askrx</span>(rf[u], mid + <span class="number">1</span>, r, x); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dep</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">-1</span>;</span><br><span class="line">	value = <span class="number">0</span>, ss += <span class="built_in">asklx</span>(rt, <span class="number">1</span>, lp, x);</span><br><span class="line">	value = <span class="number">0</span>, ss += <span class="built_in">askrx</span>(rt, <span class="number">1</span>, lp, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	value = <span class="number">0</span>; <span class="keyword">if</span>(x &gt; y) <span class="built_in">swap</span>(x, y); <span class="built_in">gmx</span>(rt, <span class="number">1</span>, lp, x, y); <span class="keyword">return</span> lca;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dis</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">dep</span>(x) + <span class="built_in">dep</span>(y) - <span class="number">2</span> * <span class="built_in">dep</span>(<span class="built_in">LCA</span>(x, y)); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;q[i].opt, &amp;q[i].x);</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt ^ <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;q[i].y);</span><br><span class="line">		<span class="keyword">if</span>(!q[i].opt) p[++lp] = q[i].x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>), lp = <span class="built_in">unique</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>) - p - <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(rt, <span class="number">1</span>, lp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		q[i].x = <span class="built_in">lower_bound</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>, q[i].x) - p;</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">0</span>) <span class="built_in">mdy</span>(rt, <span class="number">1</span>, lp, q[i].x, q[i].y);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) <span class="built_in">mdy</span>(rt, <span class="number">1</span>, lp, q[i].x, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			q[i].y = <span class="built_in">lower_bound</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>, q[i].y) - p;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">dis</span>(q[i].x, q[i].y));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>笛卡尔树</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces809E】Surprise me</title>
    <url>/2025/07/27/Codeforces-809E-Surprise-me/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://codeforces.com/problemset/problem/809/E">【Codeforces809E】Surprise me</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>已知 $ \phi(xy) &#x3D; \frac{ \phi(x) \phi(y) \gcd(x, y) }{ \phi(gcd(x, y)) } $<br>代入并莫比乌斯反演得：<br>$$ n(n - 1) Ans &#x3D; \sum_{ T &#x3D; 1 }^{ n } \sum_{ d | T } \frac{ d \mu(\frac{ T }{ d }) }{ \phi(d) } \sum_{ d | a_i } \sum_{ d | a_j } \phi(a_i) \phi(a_j) dist(i, j) $$<br>发现 $ \sum_{ T &#x3D; 1 }^{ n } \sum_{ d | T } \frac{ d \mu(\frac{ T }{ d }) }{ \phi(d) } $ 可以调和级数， $ \sum_{ d | a_i } \sum_{ d | a_j } \phi(a_i) \phi(a_j) dist(i, j) $ 建的虚树点数总数也是调和级数。<br>可以用 RMQ_LCA 实现复杂度 $ O(n \log n) $ 。<br><del>作为一个懒汉我写树剖LCA。</del>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], id[N], inv[N], ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> p[N], mu[N], phi[N], lp; <span class="type">bool</span> pri[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], E[N];</span><br><span class="line"><span class="type">int</span> fa[N], sz[N], son[N], dep[N], top[N], dfn[N], idx = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> s[N], f[N], g[N], ss[N];</span><br><span class="line"><span class="type">int</span> pp[N], len, sta[N], Top = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> flag[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> dfn[x] &lt; dfn[y]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>, phi[<span class="number">1</span>] = mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) inv[i] = <span class="built_in">mul</span>(mod - mod / i, inv[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!pri[i]) p[++lp] = i, mu[i] = mod - <span class="number">1</span>, phi[i] = i - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; p[j] * i &lt;= n; j++) &#123;</span><br><span class="line">			pri[p[j] * i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i % p[j] == <span class="number">0</span>) &#123; phi[p[j] * i] = phi[i] * p[j]; <span class="keyword">break</span>; &#125;</span><br><span class="line">			mu[p[j] * i] = <span class="built_in">sub</span>(<span class="number">0</span>, mu[i]);</span><br><span class="line">			phi[p[j] * i] = phi[i] * (p[j] - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt;= n; j += i)</span><br><span class="line">		s[j] = <span class="built_in">add</span>(s[j], <span class="built_in">mul</span>(<span class="built_in">mul</span>(i, mu[j / i]), inv[phi[i]]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	fa[u] = ff, dep[u] = dep[ff] + <span class="number">1</span>, sz[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v ^ ff) &#123;</span><br><span class="line">		<span class="built_in">dfs1</span>(v, u), sz[u] += sz[v]; <span class="keyword">if</span>(sz[son[u]] &lt; sz[v]) son[u] = v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> tp)</span> </span>&#123;</span><br><span class="line">	top[u] = tp, dfn[u] = ++idx; <span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u], tp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(!top[v]) <span class="built_in">dfs2</span>(v, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(; top[x] != top[y]; x = fa[top[x]])</span><br><span class="line">		<span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">	<span class="keyword">return</span> dep[x] &lt; dep[y] ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> lca = <span class="built_in">LCA</span>(x, sta[Top]);</span><br><span class="line">	<span class="keyword">if</span>(Top == <span class="number">1</span> || lca == sta[Top]) &#123; sta[++Top] = x; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="keyword">for</span>(; Top &gt; <span class="number">1</span> &amp;&amp; dfn[sta[Top - <span class="number">1</span>]] &gt;= dfn[lca]; --Top)</span><br><span class="line">		E[sta[Top - <span class="number">1</span>]].<span class="built_in">pb</span>(sta[Top]);</span><br><span class="line">	<span class="keyword">if</span>(lca != sta[Top]) E[lca].<span class="built_in">pb</span>(sta[Top]), sta[Top] = lca;</span><br><span class="line">	sta[++Top] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	ss[u] = flag[u] * phi[a[u]], f[u] = g[u] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : E[u]) &#123;</span><br><span class="line">		<span class="built_in">dp</span>(v); <span class="type">int</span> w = dep[v] - dep[u];</span><br><span class="line">		g[u] = <span class="built_in">add</span>(g[v], <span class="built_in">add</span>(<span class="built_in">add</span>(g[u], <span class="built_in">mul</span>(ss[v], <span class="built_in">add</span>(<span class="built_in">mul</span>(w, ss[u]), f[u]))), <span class="built_in">mul</span>(ss[u], f[v])));</span><br><span class="line">		ss[u] = <span class="built_in">add</span>(ss[u], ss[v]), f[u] = <span class="built_in">add</span>(f[u], <span class="built_in">add</span>(f[v], <span class="built_in">mul</span>(ss[v], w)));</span><br><span class="line">	&#125;</span><br><span class="line">	E[u].<span class="built_in">clear</span>(), flag[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	len = <span class="number">0</span>; <span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= n; i += x) pp[++len] = id[i];</span><br><span class="line">	<span class="built_in">sort</span>(pp + <span class="number">1</span>, pp + len + <span class="number">1</span>, cmp), sta[Top = <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">		flag[pp[i]] = <span class="number">1</span>; <span class="keyword">if</span>(pp[i] != <span class="number">1</span>) <span class="built_in">insert</span>(pp[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(; Top &gt; <span class="number">1</span>; --Top) E[sta[Top - <span class="number">1</span>]].<span class="built_in">pb</span>(sta[Top]);</span><br><span class="line">	<span class="built_in">dp</span>(<span class="number">1</span>); <span class="keyword">return</span> g[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), <span class="built_in">Sieve</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), id[a[i]] = i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(<span class="built_in">calc</span>(i), s[i]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">mul</span>(<span class="built_in">add</span>(ans, ans), <span class="built_in">mul</span>(inv[n], inv[n - <span class="number">1</span>])));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>虚树</tag>
        <tag>DP</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 923E】Perpetual Subtraction</title>
    <url>/2025/07/27/Codeforces-923E-Perpetual-Subtraction/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://codeforces.com/problemset/problem/923/E">【Codeforces 923E】Perpetual Subtraction</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>设当前取到 $ i \in [0, n] $ 的概率生成函数为 $ f(x) $ ， 下一步后为 $ F(x) $ ，则：<br>$$ F(x) &#x3D; \sum_{ i &#x3D; 0 }^{ n }{ x^i \sum_{ j &#x3D; 0 }^{ n }{ \frac{ [x^j] f(x) }{ j + 1 } } } $$<br>$$ &#x3D; \sum_{ j &#x3D; 0 }^{ n }{ \frac{ [x^j] f(x) }{ j + 1 } \frac{ x^{ j + 1 } - 1 }{ x - 1 } } $$<br>$$ &#x3D; \frac{ 1 }{ x-1 } { \sum_{ j &#x3D; 0 }^{ n } [x^j] f(x) \int_{ 1 }^{ x } t^j { \rm d } t } $$<br>$$ &#x3D; \frac{ \int_{ 1 }^{ x } f(t) { \rm d } t }{ x - 1 } $$<br>令 $ g(x) &#x3D; f(x + 1) $ ，则：<br>$$ G(x) &#x3D; F(x + 1) &#x3D; \frac{ \int_{ 0 }^{ x } g(t) { \rm d } t }{ x } $$<br>$$ [x^i] G(x) &#x3D; \frac{ [x^i] g(x) }{ i + 1 } $$<br>$ m $ 次操作后 $ [x^i] G(x) &#x3D; \frac{ [x^i] g(x) }{ (i + 1)^m } $<br>已知 $ [x^i] f(x) $ 求 $ [x^i] g(x) $ ：<br>$$ \sum_{ i &#x3D; 0 }^{ n }{ g_i x^i } &#x3D; \sum_{ i &#x3D; 0 }^{ n }{ f_j (x + 1)^j } &#x3D; \sum_{ j &#x3D; 0 }^{ n }{ f_j \sum_{ i &#x3D; 0 }{ j }{ C(j, i) x^i } } $$<br>$$ g_i &#x3D; \sum_{ j &#x3D; i }^{ n }{ C(j, i)f_j } $$<br>$$ i! g_i &#x3D; \sum_{ j &#x3D; i }^{ n }{ \frac{ j! f_j }{ (j - i)! } } $$<br>已知 $ [x^i] g(x) $ 求 $ [x^i] f(x) $ ：<br>$$ i! f_i &#x3D; \sum_{ j&#x3D;1 }^{ n }{ \frac{ j! f_j }{ (-1)^{ j - i }( j - i )! } } $$<br>$ NTT $ 卷积即可。时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>, N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span>(<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, ll y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y /= <span class="number">2</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y % <span class="number">2</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; lmt; j += mid &lt;&lt; <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> inv = <span class="built_in">ksm</span>(lmt), i = <span class="number">0</span>; i &lt; lmt; i++)</span><br><span class="line">				A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n; ll m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f, g;</span><br><span class="line"><span class="type">int</span> fa[N], fb[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%I64d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	fa[<span class="number">0</span>] = fa[<span class="number">1</span>] = fb[<span class="number">0</span>] = fb[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fa[i] = <span class="built_in">mul</span>(fa[i - <span class="number">1</span>], i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fb[i] = <span class="built_in">mul</span>(mod - mod / i, fb[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fb[i] = <span class="built_in">mul</span>(fb[i - <span class="number">1</span>], fb[i]);</span><br><span class="line">	f.<span class="built_in">resize</span>(n + <span class="number">1</span>), g.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;f[n - i]), f[n - i] = <span class="built_in">mul</span>(f[n - i], fa[i]), g[i] = fb[i];</span><br><span class="line">	g = Poly::<span class="built_in">Mul</span>(f, g), g.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) g[n - i] = <span class="built_in">mul</span>(g[n - i], <span class="built_in">ksm</span>(<span class="built_in">ksm</span>(i + <span class="number">1</span>, m)));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) f[i] = (i &amp; <span class="number">1</span>) ? (mod - fb[i]) : fb[i];</span><br><span class="line">	f = Poly::<span class="built_in">Mul</span>(f, g);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">mul</span>(f[n - i], fb[i]));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
        <tag>积分</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 1109F】 Sasha and Algorithm of Silence&#39;s Sounds</title>
    <url>/2025/07/27/Codeforces-1109F-Sasha-and-Algorithm-of-Silence&#39;s-Sounds/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://codeforces.com/problemset/problem/1109/F">【Codeforces 1109F】 Sasha and Algorithm of Silence’s Sounds</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>当区间 $ [l, r] $ 中不存在环且点数与边数之差为 $ 1 $ 时是一棵树。当 $ r $ 增加时， $ l $ 也会增加，所以只要维护两个端点。<br>对于环的部分，可以用 $ LCT $ 快速维护（ $ findroot $ 后要 $ splay $ 一下，否则会 $ T $）。<br>对于维护点数与边数之差，可以用线段树维护针对当前询问左端点为某个位置时点数与边数之差， $ r $ 增加时直接继承上一个 $ r $ 。若新加的点 $ r $ ，则线段树区间 $ [l, r] $ 的权值加一；若新加的点 $ r $ 对 $ k \in [l, r] $ 有边，则线段树区间 $ [l, k] $ 的权值减一。然后数线段树中权值为 $ 1 $ 的位置的个数即可。<br>复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc ch[0][u]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc ch[1][u]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N= <span class="number">1010</span>, M = <span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> n, m, lb = <span class="number">1</span>, rb = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> a[N][N], idx[M], idy[M];</span><br><span class="line"><span class="type">int</span> fa[M], ch[<span class="number">2</span>][M], sta[M], top; <span class="type">bool</span> rv[M];</span><br><span class="line"><span class="type">int</span> tr[M * <span class="number">4</span>], sum[M * <span class="number">4</span>], lz[M * <span class="number">4</span>], fst, snd;</span><br><span class="line">ll ans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">nroot</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="keyword">return</span> ch[<span class="number">0</span>][fa[u]] == u || ch[<span class="number">1</span>][fa[u]] == u; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Rev</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; rv[u] ^= <span class="number">1</span>, <span class="built_in">swap</span>(lc, rc); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="keyword">if</span>(rv[u]) <span class="built_in">Rev</span>(lc), <span class="built_in">Rev</span>(rc), rv[u] = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> y = fa[u], z = fa[y], k = ch[<span class="number">1</span>][y] == u, w = ch[k ^ <span class="number">1</span>][u];</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) ch[ch[<span class="number">1</span>][z] == y][z] = u; ch[k][y] = w, ch[k ^ <span class="number">1</span>][u] = y;</span><br><span class="line">	<span class="keyword">if</span>(w) fa[w] = y; fa[u] = z, fa[y] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> y = u, z; <span class="keyword">for</span>(sta[top = <span class="number">1</span>] = y; <span class="built_in">nroot</span>(y); sta[++top] = y = fa[y]);</span><br><span class="line">	<span class="keyword">for</span>(; top; <span class="built_in">pd</span>(sta[top--]));</span><br><span class="line">	<span class="keyword">for</span>(; <span class="built_in">nroot</span>(u); <span class="built_in">rotate</span>(u)) &#123;</span><br><span class="line">		y = fa[u], z = fa[y];</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) <span class="built_in">rotate</span>((ch[<span class="number">0</span>][y] == u) ^ (ch[<span class="number">0</span>][z] == y) ? u : y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">0</span>; u; u = fa[y = u]) <span class="built_in">splay</span>(u), rc = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="built_in">access</span>(u), <span class="built_in">splay</span>(u), <span class="built_in">Rev</span>(u); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="built_in">makeroot</span>(x), <span class="built_in">access</span>(y), <span class="built_in">splay</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">findroot</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">access</span>(u), <span class="built_in">splay</span>(u); <span class="keyword">for</span>(; lc; <span class="built_in">pd</span>(u), u = lc); <span class="built_in">splay</span>(u); <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">lnk</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="built_in">makeroot</span>(x), fa[x] = y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="built_in">split</span>(x, y), fa[x] = ch[<span class="number">0</span>][y] = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	sum[u] = <span class="number">0</span>, tr[u] = <span class="built_in">Min</span>(tr[u * <span class="number">2</span>], tr[u * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">if</span>(tr[u] == tr[u * <span class="number">2</span>]) sum[u] += sum[u * <span class="number">2</span>];</span><br><span class="line">	<span class="keyword">if</span>(tr[u] == tr[u * <span class="number">2</span> + <span class="number">1</span>]) sum[u] += sum[u * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!lz[u]) <span class="keyword">return</span> ;</span><br><span class="line">	lz[u * <span class="number">2</span>] += lz[u], lz[u * <span class="number">2</span> + <span class="number">1</span>] += lz[u];</span><br><span class="line">	tr[u * <span class="number">2</span>] += lz[u], tr[u * <span class="number">2</span> + <span class="number">1</span>] += lz[u];</span><br><span class="line">	lz[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	tr[u] = <span class="number">0</span>, sum[u] = r - l + <span class="number">1</span>; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(u * <span class="number">2</span>, l, mid), <span class="built_in">build</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123; tr[u] += w, lz[u] += w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= mid) <span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, L, R, w);</span><br><span class="line">	<span class="keyword">if</span>(R &gt; mid) <span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, w);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">		<span class="keyword">if</span>(fst &gt; tr[u]) fst = tr[u], snd = <span class="number">0</span>; <span class="keyword">if</span>(fst == tr[u]) snd += sum[u];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= mid) <span class="built_in">ask</span>(u * <span class="number">2</span>, l, mid, L, R);</span><br><span class="line">	<span class="keyword">if</span>(R &gt; mid) <span class="built_in">ask</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> tmp[<span class="number">5</span>]; <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x = idx[rb + <span class="number">1</span>] + dir[i][<span class="number">0</span>], y = idy[rb + <span class="number">1</span>] + dir[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span>(!x || !y || x &gt; n || y &gt; m || a[x][y] &lt; lb || a[x][y] &gt; rb)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		tmp[++len] = <span class="built_in">findroot</span>(a[x][y]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(tmp + <span class="number">1</span>, tmp + len + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) <span class="keyword">if</span>(tmp[i] == tmp[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]), idx[a[i][j]] = i, idy[a[i][j]] = j;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n * m), <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, n * m, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(; rb &lt; n * m;) &#123;</span><br><span class="line">		<span class="keyword">for</span>(; lb &lt; rb &amp;&amp; !<span class="built_in">check</span>(); ++lb) <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> x = idx[lb] + dir[i][<span class="number">0</span>], y = idy[lb] + dir[i][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span>(!x || !y || x &gt; n || y &gt; m || a[x][y] &lt; lb || a[x][y] &gt; rb)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">cut</span>(lb, a[x][y]);</span><br><span class="line">		&#125;</span><br><span class="line">		++rb, <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, n * m, lb, rb, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> x = idx[rb] + dir[i][<span class="number">0</span>], y = idy[rb] + dir[i][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span>(!x || !y || x &gt; n || y &gt; m || a[x][y] &lt; lb || a[x][y] &gt; rb)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">lnk</span>(rb, a[x][y]), <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, n * m, lb, a[x][y], <span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		fst = M, snd = <span class="number">0</span>, <span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n * m, lb, rb); <span class="keyword">if</span>(fst == <span class="number">1</span>) ans += snd;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%I64d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 908H】 New year and Boolean Bridges</title>
    <url>/2025/07/27/Codeforces-908H-New-year-and-Boolean-Bridges/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://codeforces.com/problemset/problem/908/H">【Codeforces 908H】 New year and Boolean Bridges</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>发现 $ f(u, v)<del>OR</del>f(v, u) $ 满足当且仅当 $ f(u, v)<del>AND</del>f(v, u) $ 和  $ f(u, v)<del>XOR</del>f(v, u) $ 满足，故 $ f(u, v)<del>OR</del>f(v, u) $ 不予考虑。<br>若 $ f(u, v)<del>AND</del>f(v, u) $ 满足，则 $ u, v $ 在同一联通块；若 $ f(u, v)<del>XOR</del>f(v, u) $ 满足，则 $ u, v $ 不在同一联通块，所以可能产生矛盾，需要判无解。<br>最后的图一定是个弱连通块，即至少有 $ n - 1 $ 条边，由于一个大小为 $ 1 $ 的独立点对答案贡献为 $ 1 $ ，所以我们要最小化大小 $ \geq 2 $ 的连通块数目，而这样的连通块数目最多有 $ m &#x3D; \lfloor \frac{ n }{ 2 } \rfloor &#x3D; 23 $ 个。<br>考虑状压。令 $ fb[i] $ 表示 $ i $ 号点不能与那些点作为一个强连通块， $ le[i] $ 表示选择状态为 $ i $ 的点作为一个强联通块的合法性，可以通过 $ lowbit $ 从 $ fb[i] $ 推出 $ le[i] $ 。<br>每新加入一条边，弱连通块合法性满足 $ F[i] &#x3D; \sum_{ j | k &#x3D; i }{ F’[j] \times le[k] } $ ， $ F’[j] $ 表示上一次操作的 $ F[j] $ 。<br>这样可以 $ FWT $ 优化，最多进行 $ m $ 次，时间复杂度 $ O(m^2 2^{m}) $ ，并不能过去。<br>考虑我们 $ FWT $ 后不需要 $ IFWT $ 回去，每次求单点系数。 $ FWT $ 的过程可以理解为一个行向量右乘一个矩阵得到新的行向量，这个矩阵就是我们想要的系数，可以证明：  </p>
<blockquote>
<p>mu[x][y] &#x3D; (x &amp; y) !&#x3D; x ? 0 : ksm(-1, popcount(ksm(x, y));  </p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50</span>, M = <span class="number">10000000</span>;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">int</span> n, f[N], ans;</span><br><span class="line"><span class="type">int</span> sz[N], id[N], lg[M], len, cnt = <span class="number">0</span>, fb[N], le[M];</span><br><span class="line"><span class="type">int</span> nw[M], mu[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span>(<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">find</span>(f[x]); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fwt</span><span class="params">(<span class="type">int</span> *A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; lmt; j += mid &lt;&lt; <span class="number">1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(opt == <span class="number">1</span>) A[j + mid + k] = <span class="built_in">add</span>(A[j + mid + k], A[j + k]);</span><br><span class="line">				<span class="keyword">else</span> A[j + mid + k] = <span class="built_in">sub</span>(A[j + mid + k], A[j + k]);</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i] + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;A&#x27;</span>) f[<span class="built_in">find</span>(i)] = <span class="built_in">find</span>(j);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">			<span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;X&#x27;</span> &amp;&amp; <span class="built_in">find</span>(i) == <span class="built_in">find</span>(j)) &#123; <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	ans = n - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ++sz[<span class="built_in">find</span>(i)];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">find</span>(i) == i &amp;&amp; sz[i] &gt; <span class="number">1</span>) id[i] = cnt, lg[<span class="number">1</span> &lt;&lt; cnt] = cnt, ++cnt;</span><br><span class="line">	<span class="keyword">if</span>(!cnt) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	len = (<span class="number">1</span> &lt;&lt; cnt);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(g[i][j] != <span class="string">&#x27;X&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(sz[<span class="built_in">find</span>(i)] &gt; <span class="number">1</span> &amp;&amp; sz[<span class="built_in">find</span>(j)] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">				fb[id[<span class="built_in">find</span>(i)]] |= (<span class="number">1</span> &lt;&lt; id[<span class="built_in">find</span>(j)]);</span><br><span class="line">				fb[id[<span class="built_in">find</span>(j)]] |= (<span class="number">1</span> &lt;&lt; id[<span class="built_in">find</span>(i)]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	le[<span class="number">0</span>] = <span class="number">1</span>; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) le[<span class="number">1</span> &lt;&lt; i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(le[i]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="type">int</span> x = lg[i &amp; -i], y = i - (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">		<span class="keyword">if</span>(le[y] &amp;&amp; (fb[x] &amp; y) == <span class="number">0</span>) le[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fwt</span>(le, len, <span class="number">1</span>);</span><br><span class="line">	mu[<span class="number">0</span>] = (cnt &amp; <span class="number">1</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) mu[i] = <span class="built_in">sub</span>(<span class="number">0</span>, mu[i ^ (i &amp; -i)]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) nw[i] = le[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;; i++) &#123;</span><br><span class="line">		<span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) z = <span class="built_in">add</span>(z, <span class="built_in">mul</span>(mu[j], nw[j]));</span><br><span class="line">		<span class="keyword">if</span>(z) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans + i); <span class="keyword">break</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) nw[j] = <span class="built_in">mul</span>(nw[j], le[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FWT</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces水题选做</title>
    <url>/2025/07/27/Codeforces-shui-ti-xuan-zuo/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />
    <label for="pass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>CF</tag>
      </tags>
  </entry>
  <entry>
    <title>「HNOI2017」单旋</title>
    <url>/2025/07/27/HNOI2017-dan-xuan/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2018">「HNOI2017」单旋</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>对于 $ splay $ 操作，模拟发现整棵树的形态不变且深度加一（除了 $ splay $ 的节点的子树深度不变）， $ splay $ 的点深度变为 $ 1 $ 。<br>用线段树维护每个权值深度。<br>对于操作 $ 1 $ ，用 $ set $ 维护已经存在的节点，新插入的节点父亲一定为它前驱、后继中的一个。<br>对于操作 $ 2, 3, 4, 5 $ ，模拟 $ splay $ 第一次和最后一次旋转子树操作，用线段树维护深度即可。<br>时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> m, p[N], lp;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Q</span> &#123; <span class="type">int</span> opt, x; &#125;; Q q[N];</span><br><span class="line"><span class="type">int</span> tr[N * <span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> rt, fa[N], ch[<span class="number">2</span>][N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(), pre = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; pre = c, c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = x * <span class="number">10ll</span> + (c ^ <span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(pre == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u]) tr[u * <span class="number">2</span>] += tr[u], tr[u * <span class="number">2</span> + <span class="number">1</span>] += tr[u], tr[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123; tr[u] = w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	x &lt;= mid ? <span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, x, w) : <span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, x, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123; tr[u] += w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= mid) <span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, L, R, w);</span><br><span class="line">	<span class="keyword">if</span>(R &gt; mid) <span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> tr[u];</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">return</span> x &lt;= mid ? <span class="built_in">qry</span>(u * <span class="number">2</span>, l, mid, x) : <span class="built_in">qry</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt;::iterator it = s.<span class="built_in">insert</span>(x).fst;</span><br><span class="line">	<span class="keyword">if</span>(!rt) &#123; rt = x, <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x, <span class="number">1</span>); <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="keyword">if</span>(it != s.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">		--it; <span class="keyword">if</span>(!ch[<span class="number">1</span>][*it]) ch[<span class="number">1</span>][*it] = x, fa[x] = *it; ++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!fa[x]) ++it, ch[<span class="number">0</span>][*it] = x, fa[x] = *it;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, lp, fa[x]) + <span class="number">1</span>; <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x, dep); <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">splaymin</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x); <span class="keyword">if</span>(x == rt) <span class="keyword">return</span> dep;</span><br><span class="line">	<span class="keyword">if</span>(x + <span class="number">1</span> &lt;= fa[x] - <span class="number">1</span>) <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x + <span class="number">1</span>, fa[x] - <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">	++tr[<span class="number">1</span>], <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x, <span class="number">1</span>);</span><br><span class="line">	ch[<span class="number">0</span>][fa[x]] = ch[<span class="number">1</span>][x], fa[ch[<span class="number">1</span>][x]] = fa[x];</span><br><span class="line">	fa[rt] = x, fa[x] = <span class="number">0</span>, ch[<span class="number">1</span>][x] = rt, rt = x; <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">splaymax</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x); <span class="keyword">if</span>(x == rt) <span class="keyword">return</span> dep;</span><br><span class="line">	<span class="keyword">if</span>(x - <span class="number">1</span> &gt;= fa[x] + <span class="number">1</span>) <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, fa[x] + <span class="number">1</span>, x - <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">	++tr[<span class="number">1</span>], <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x, <span class="number">1</span>);</span><br><span class="line">	ch[<span class="number">1</span>][fa[x]] = ch[<span class="number">0</span>][x], fa[ch[<span class="number">0</span>][x]] = fa[x];</span><br><span class="line">	fa[rt] = x, fa[x] = <span class="number">0</span>, ch[<span class="number">0</span>][x] = rt, rt = x; <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erasemin</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">splaymin</span>(x); --tr[<span class="number">1</span>];</span><br><span class="line">	rt = ch[<span class="number">1</span>][x], fa[rt] = <span class="number">0</span>, ch[<span class="number">1</span>][x] = <span class="number">0</span>, s.<span class="built_in">erase</span>(x); <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erasemax</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">splaymax</span>(x); --tr[<span class="number">1</span>];</span><br><span class="line">	rt = ch[<span class="number">0</span>][x], fa[rt] = <span class="number">0</span>, ch[<span class="number">0</span>][x] = <span class="number">0</span>, s.<span class="built_in">erase</span>(x); <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(m);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123; <span class="built_in">gi</span>(q[i].opt); <span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) <span class="built_in">gi</span>(q[i].x), p[++lp] = q[i].x; &#125;</span><br><span class="line">	<span class="built_in">sort</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>), lp = <span class="built_in">unique</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>) - p - <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m)</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) q[i].x = <span class="built_in">lower_bound</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>, q[i].x) - p;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">insert</span>(q[i].x));</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">splaymin</span>(*s.<span class="built_in">begin</span>()));</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">splaymax</span>(*(--s.<span class="built_in">end</span>())));</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">erasemin</span>(*s.<span class="built_in">begin</span>()));</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">erasemax</span>(*(--s.<span class="built_in">end</span>())));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOISC 2016 Day 3」电报</title>
    <url>/2025/07/27/JOISC-2016-Day-3-dian-bao/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2737">「JOISC 2016 Day 3」电报</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑形成环的条件是将若干环和基环內向树拆成若干条链，然后依次拼接成环（特判给出的图已经是完整一个环的情况）。<br>枚举每一个连通块。若该联通块是一个环，则断开代价最小的边；否则进行拓扑排序。<br>先考虑不在环上的部分。假如一个点他有若干入度，显然只有其中一个入度能够保留，贪心地保留代价最大的入度。如此化简后得到一个环（环上每个点可能有一条不在环上的链）。<br>然后在环上DP。由于环一定要断开，令 $ f[i][0&#x2F;1][0&#x2F;1] $ 表示环上第 $ i $ 个点，环有&#x2F;没有被断开过，这个点选择的是断开环上的边还是链上的边。<br>时间复杂度 $ O(n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, to[N], c[N], In[N], tmp[N], val[N]; ll ans, f[<span class="number">2</span>][<span class="number">2</span>][N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], a, cir, hv[N];</span><br><span class="line"><span class="type">bool</span> vis[N], used[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> u = <span class="number">1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123; <span class="keyword">if</span>(vis[u]) <span class="keyword">return</span> <span class="number">0</span>; vis[u] = <span class="number">1</span>, u = to[u]; &#125;</span><br><span class="line">	<span class="keyword">if</span>(u == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	vis[x] = <span class="number">1</span>, a.<span class="built_in">pb</span>(x); <span class="keyword">if</span>(!vis[to[x]]) <span class="built_in">Find</span>(to[x]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[x]) <span class="keyword">if</span>(!vis[v]) <span class="built_in">Find</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	a.<span class="built_in">clear</span>(), cir.<span class="built_in">clear</span>(), <span class="built_in">Find</span>(x); <span class="type">int</span> lst = a[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : a) tmp[v] = In[v];</span><br><span class="line">	<span class="keyword">for</span>(; !q.<span class="built_in">empty</span>(); q.<span class="built_in">pop</span>()); <span class="keyword">for</span>(<span class="keyword">auto</span> v : a) <span class="keyword">if</span>(!In[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">	<span class="keyword">if</span>(q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> mn = <span class="number">2e9</span>; <span class="keyword">for</span>(<span class="keyword">auto</span> v : a) mn = <span class="built_in">min</span>(mn, c[v]); ans += mn; <span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> u; !q.<span class="built_in">empty</span>();) &#123;</span><br><span class="line">		u = q.<span class="built_in">front</span>(), q.<span class="built_in">pop</span>(), used[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(hv[u].<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">sort</span>(hv[u].<span class="built_in">begin</span>(), hv[u].<span class="built_in">end</span>());</span><br><span class="line">			<span class="built_in">rep</span>(i, <span class="number">0</span>, (<span class="type">int</span>)hv[u].<span class="built_in">size</span>() - <span class="number">2</span>) ans += hv[u][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(In[to[u]] &gt; <span class="number">1</span>) hv[to[u]].<span class="built_in">pb</span>(c[u]);</span><br><span class="line">		lst = to[u], --tmp[to[u]]; <span class="keyword">if</span>(!tmp[to[u]]) q.<span class="built_in">push</span>(to[u]);</span><br><span class="line">	&#125;</span><br><span class="line">	cir.<span class="built_in">pb</span>(lst); <span class="keyword">for</span>(<span class="type">int</span> u = to[lst]; u != lst; u = to[u]) cir.<span class="built_in">pb</span>(u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : cir) &#123;</span><br><span class="line">		<span class="built_in">sort</span>(hv[v].<span class="built_in">begin</span>(), hv[v].<span class="built_in">end</span>());</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">0</span>, (<span class="type">int</span>)(hv[v].<span class="built_in">size</span>() - <span class="number">2</span>)) ans += hv[v][i];</span><br><span class="line">		<span class="keyword">if</span>(hv[v].<span class="built_in">size</span>()) val[v] = hv[v].<span class="built_in">back</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = c[cir.<span class="built_in">back</span>()], f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = val[cir[<span class="number">0</span>]];</span><br><span class="line">	f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>] = (ll)<span class="number">1e14</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, (<span class="type">int</span>)(cir.<span class="built_in">size</span>() - <span class="number">1</span>)) &#123;</span><br><span class="line">		f[<span class="number">0</span>][<span class="number">0</span>][i] = <span class="built_in">min</span>(f[<span class="number">1</span>][<span class="number">1</span>][i - <span class="number">1</span>], <span class="built_in">min</span>(f[<span class="number">0</span>][<span class="number">1</span>][i - <span class="number">1</span>], f[<span class="number">0</span>][<span class="number">0</span>][i - <span class="number">1</span>])) + c[cir[i - <span class="number">1</span>]];</span><br><span class="line">		f[<span class="number">0</span>][<span class="number">1</span>][i] = <span class="built_in">min</span>(f[<span class="number">0</span>][<span class="number">1</span>][i - <span class="number">1</span>], f[<span class="number">0</span>][<span class="number">0</span>][i - <span class="number">1</span>]) + val[cir[i]];</span><br><span class="line">		f[<span class="number">1</span>][<span class="number">0</span>][i] = (ll)<span class="number">1e14</span>;</span><br><span class="line">		f[<span class="number">1</span>][<span class="number">1</span>][i] = f[<span class="number">1</span>][<span class="number">1</span>][i - <span class="number">1</span>] + val[cir[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	ans += <span class="built_in">min</span>(f[<span class="number">0</span>][<span class="number">0</span>][(<span class="type">int</span>)(cir.<span class="built_in">size</span>() - <span class="number">1</span>)], f[<span class="number">0</span>][<span class="number">1</span>][(<span class="type">int</span>)(cir.<span class="built_in">size</span>() - <span class="number">1</span>)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;to[i], &amp;c[i]), e[to[i]].<span class="built_in">pb</span>(i), ++In[to[i]];</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">check</span>()) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(!vis[i]) <span class="built_in">solve</span>(i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOISC 2017 Day 1」开荒者</title>
    <url>/2025/07/27/JOISC-2017-Day-1-kai-huang-zhe/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2390">「JOISC 2017 Day 1」开荒者</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>单独一个点，假如固定每个操作的数目，则得到的草呈矩形，且形状不会应操作顺序变化而变化。所以最后的结果与操作顺序无关。同时发现当向上、下次数总和一定时，若无上下边界，则草地形状一样。<br>考虑枚举向上、向下次数，可以通过差分扫描线的方式维护出草地的形状（由于一个点只会被加入一次，删除一次，所以扫描线点数 $ O(n) $ 级别）。<br>考虑对于每一行对答案的贡献，设第 $ i $ 每一株草的位置时 $ a_1 \dots a_m $ ，则向左向右对答案的贡献为 $ f_i &#x3D; \max(a_1 - 1, c - a_n, \max_{i &#x3D; 1}^{m - 1}(a_{i + 1} - a_{i}) $ ，现在考虑上下的边界，答案为 $ \min_{i}(\max_{i \leq j \leq i + r - 1} f_j) $ ，可以用单调队列维护。<br>时间复杂度 $ O(n^3) $ ，常数略大。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">910</span>;</span><br><span class="line"><span class="type">int</span> r, c, n, smn, wmn, swmn; ll ans;</span><br><span class="line">pii a[N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s, w, All;</span><br><span class="line">pii b[N]; <span class="type">int</span> tot, len[N], ex[N][N], lmt[N][<span class="number">3</span>]; ll sum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(); <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &gt; <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; x = x * <span class="number">10ll</span> + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> pii &amp;x, <span class="type">const</span> pii &amp;y)</span> </span>&#123; <span class="keyword">return</span> x.snd &lt; y.snd; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> lst = <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(ex[x][i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!lst) lmt[x][<span class="number">0</span>] = a[i].snd - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> mx = <span class="built_in">max</span>(mx, a[i].snd - a[lst].snd - <span class="number">1</span>);</span><br><span class="line">		lst = i;</span><br><span class="line">	&#125;</span><br><span class="line">	lmt[x][<span class="number">1</span>] = c - a[lst].snd, lmt[x][<span class="number">2</span>] = mx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) b[++tot] = <span class="built_in">mp</span>(a[i].fst - x, -i), b[++tot] = <span class="built_in">mp</span>(a[i].fst + <span class="number">1</span>, i);</span><br><span class="line">	<span class="built_in">sort</span>(b + <span class="number">1</span>, b + tot + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, tot - <span class="number">1</span>) &#123;</span><br><span class="line">		len[i] = b[i + <span class="number">1</span>].fst - b[i].fst; <span class="built_in">rep</span>(j, <span class="number">1</span>, n) ex[i][j] = ex[i - <span class="number">1</span>][j];</span><br><span class="line">		b[i].snd &lt; <span class="number">0</span> ? (ex[i][-b[i].snd] = <span class="number">1</span>) : (ex[i][b[i].snd] = <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">calc</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">swap</span>(b[x], b[y]);</span><br><span class="line">	<span class="built_in">rep</span>(i, x, y) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n) ex[i][j] = ex[i - <span class="number">1</span>][j];</span><br><span class="line">		b[i].snd &lt; <span class="number">0</span> ? (ex[i][-b[i].snd] = <span class="number">1</span>) : (ex[i][b[i].snd] = <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">calc</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, tot) <span class="keyword">if</span>(b[i].snd &lt; <span class="number">0</span>) b[i].fst -= x;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(; flag;) &#123; flag = <span class="number">0</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, tot - <span class="number">1</span>) <span class="keyword">if</span>(b[i + <span class="number">1</span>] &lt; b[i]) <span class="built_in">Swap</span>(i, i + <span class="number">1</span>), flag = <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, tot - <span class="number">1</span>) len[i] = b[i + <span class="number">1</span>].fst - b[i].fst;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, tot) sum[i] = sum[i - <span class="number">1</span>] + len[i - <span class="number">1</span>];</span><br><span class="line">	deque&lt;<span class="type">int</span>&gt; q[<span class="number">3</span>]; <span class="type">int</span> res = c + c - <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; j &lt;= tot; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(; j &lt; tot &amp;&amp; sum[j] - sum[i] &lt; r; ++j)</span><br><span class="line">			<span class="keyword">if</span>(len[j]) &#123;</span><br><span class="line">				<span class="built_in">rep</span>(k, <span class="number">0</span>, <span class="number">2</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span>(; !q[k].<span class="built_in">empty</span>() &amp;&amp; lmt[q[k].<span class="built_in">back</span>()][k] &lt;= lmt[j][k]; q[k].<span class="built_in">pop_back</span>());</span><br><span class="line">					q[k].<span class="built_in">push_back</span>(j);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">if</span>(sum[j] - sum[i] &lt; r) <span class="keyword">break</span>;</span><br><span class="line">		<span class="type">int</span> x = lmt[q[<span class="number">0</span>].<span class="built_in">front</span>()][<span class="number">0</span>], y = lmt[q[<span class="number">1</span>].<span class="built_in">front</span>()][<span class="number">1</span>], z = lmt[q[<span class="number">2</span>].<span class="built_in">front</span>()][<span class="number">2</span>];</span><br><span class="line">		res = <span class="built_in">min</span>(res, <span class="built_in">max</span>(x + y, z));</span><br><span class="line">		<span class="built_in">rep</span>(k, <span class="number">0</span>, <span class="number">2</span>) <span class="keyword">if</span>(q[k].<span class="built_in">front</span>() == i) q[k].<span class="built_in">pop_front</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(r), <span class="built_in">gi</span>(c), <span class="built_in">gi</span>(n), ans = r + c - <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">gi</span>(a[i].fst), <span class="built_in">gi</span>(a[i].snd); <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">	smn = a[<span class="number">1</span>].fst - <span class="number">1</span>, wmn = r - a[n].fst, swmn = smn + wmn;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n - <span class="number">1</span>) swmn = <span class="built_in">max</span>(swmn, a[i + <span class="number">1</span>].fst - a[i].fst - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">		s.<span class="built_in">insert</span>(a[i].fst - <span class="number">1</span>), w.<span class="built_in">insert</span>(r - a[i].fst);</span><br><span class="line">		<span class="built_in">rep</span>(j, i, n) <span class="keyword">if</span>(a[j].fst - a[i].fst - <span class="number">1</span> &gt;= swmn) All.<span class="built_in">insert</span>(a[j].fst - a[i].fst - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i : s) <span class="keyword">for</span>(<span class="keyword">auto</span> j : w) <span class="keyword">if</span>(i + j &gt;= swmn) All.<span class="built_in">insert</span>(i + j);</span><br><span class="line">	<span class="built_in">init</span>(*All.<span class="built_in">begin</span>()); <span class="type">int</span> lst = *All.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i : All) ans = <span class="built_in">min</span>(ans, i + <span class="built_in">solve</span>(i - lst)), lst = i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOISC 2017 Day 1」港口设施</title>
    <url>/2025/07/27/JOISC-2017-Day-1-gang-kou-she-shi/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2391">「JOISC 2017 Day 1」港口设施</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑两个箱子如果进出栈时间呈<strong>嵌套关系</strong>，则这两个箱子就<strong>不能</strong>在同一个栈中。<br>考虑对于这种嵌套关系的两个箱子连一条边，最后的图中的二分图的方案数即总方案数。<br>如果暴力连边，那么边数可达 $ n^2 $ 个，显然过不去。<br>观察我们目前的连边方案：对于一个物品 $ u $ ，它会和之前物品序列中一段连续的物品 $ v1, v2, \dots, vk $ 连边。此时 $ v1, v2, \dots, vk $ 都是<strong>连通且同色</strong>的。<br>那么如果下一轮的连边的范围和 $ v1, v2, \dots, vk $ 有交，那么由连通性，这些边其实只连一条就够了。<br>具体地，对于每个左端点，我们对其维护一个 $ nxt $ ，表示如果现在再对它进行连边，应该跳到哪里。这样连边的数量就会减少很多，且不改变二分性和连通性。<br>最后 $ dfs $ 染色即可。时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2000010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], b[N], ar[N], ans = <span class="number">1</span>, fa1[N], fa2[N], nxt[N];</span><br><span class="line"><span class="type">int</span> clr[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> *fa, <span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> fa[x] == x ? x : fa[x] = <span class="built_in">find</span>(fa, fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(clr[v] == <span class="number">-1</span>) clr[v] = clr[u] ^ <span class="number">1</span>, <span class="built_in">dfs</span>(v);</span><br><span class="line">		<span class="keyword">if</span>(clr[v] == clr[u]) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), ans = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + n + <span class="number">1</span>) fa1[i] = fa2[i] = i;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i], &amp;b[i]), clr[i] = <span class="number">-1</span>;</span><br><span class="line">		ar[a[i]] = ar[b[i]] = i, fa1[b[i]] = b[i] + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + n) <span class="keyword">if</span>(b[ar[i]] == i) &#123;</span><br><span class="line">		<span class="type">int</span> lst = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="built_in">find</span>(fa1, a[ar[i]] + <span class="number">1</span>); j &lt;= i; j = <span class="built_in">find</span>(fa1, j + <span class="number">1</span>)) &#123;</span><br><span class="line">			j = <span class="built_in">find</span>(fa2, j), e[ar[i]].<span class="built_in">pb</span>(ar[j]), e[ar[j]].<span class="built_in">pb</span>(ar[i]);</span><br><span class="line">			<span class="keyword">if</span>(lst) fa2[lst] = j; lst = j;</span><br><span class="line">		&#125;</span><br><span class="line">		fa1[a[ar[i]]] = a[ar[i]] + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(clr[i] == <span class="number">-1</span>) clr[i] = <span class="number">0</span>, <span class="built_in">dfs</span>(i), ans = ans * <span class="number">2</span> % mod;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Image Quality Assessment</title>
    <url>/2025/07/27/IQA/</url>
    <content><![CDATA[<p>参考资料：</p>
<p><a href="https://zhuanlan.zhihu.com/p/210887209">图像质量评价（一）：IQA介绍</a></p>
<p><a href="https://github.com/chaofengc/Awesome-Image-Quality-Assessment">Awesome Image Quality Assessment (IQA)</a></p>
<p>DeepSeek</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>Image Quality Assessment (IQA)</strong>，即<strong>图像质量评估</strong>，是计算机视觉和图像处理领域的一个重要研究方向，旨在通过算法自动评估图像的质量，模拟人类视觉系统（HVS）对图像的主观感知。其核心任务是量化图像的失真程度或感知质量，广泛应用于图像压缩、传输、增强、修复等场景。</p>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="全参考-Full-Reference-FR-IQA"><a href="#全参考-Full-Reference-FR-IQA" class="headerlink" title="全参考 (Full-Reference, FR-IQA)"></a><strong>全参考 (Full-Reference, FR-IQA)</strong></h2><p>需要完整的原始无失真图像作为参考，通过对比失真图像与参考图像的差异来量化质量。</p>
<h3 id="典型方法"><a href="#典型方法" class="headerlink" title="典型方法"></a>典型方法</h3><h4 id="PSNR（峰值信噪比）"><a href="#PSNR（峰值信噪比）" class="headerlink" title="PSNR（峰值信噪比）"></a><strong>PSNR（峰值信噪比）</strong></h4><p>PSNR 基于<strong>均方误差（MSE, Mean Squared Error）<strong>计算，单位为</strong>分贝（dB）</strong>，值越大表示图像质量越好。<br>$$<br>PSNR &#x3D; 10 \cdot \log_{10} \left( \frac{MAX_I^2}{MSE} \right)<br>$$<br>$MAX_I$：图像像素的最大可能值（如8位图像为255）。</p>
<p>$MSE$：均方误差，计算两图像像素差的平方均值：<br>$$<br>MSE &#x3D; \frac{1}{MN} \sum_{i&#x3D;0}^{M - 1} \sum_{j&#x3D;0}^{N - 1} [I(i, j) - K(i, j)]^2<br>$$<br>$I$：原始图像。$K$：失真图像。</p>
<ul>
<li>优点：计算简单、物理意义明确、通用性强</li>
<li>局限性：对局部失真不敏感、依赖参考图像、对图像内容不敏感</li>
</ul>
<h4 id="SSIM（结构相似性）"><a href="#SSIM（结构相似性）" class="headerlink" title="SSIM（结构相似性）"></a><strong>SSIM（结构相似性）</strong></h4><p>SSIM 认为，人眼对图像的<strong>亮度（Luminance）</strong>、<strong>对比度（Contrast）</strong> 和 <strong>结构（Structure）</strong> 三个维度最为敏感，因此分别计算这三者的相似度，再综合得到最终评分：<br>$$<br>SSIM(x, y) &#x3D; [l(x, y)]^{\alpha}[c(x, y)]^{\beta}[s(x, y)]^{\gamma}<br>$$<br>$x$为参考图像，$y$为失真图像。</p>
<p>$l(x, y), c(x, y), s(x, y)$分别为亮度相似度、对比度相似度、结构相似度。</p>
<p>$\alpha, \beta, \gamma$通常设为1 。<br>$$<br>SSIM(x, y) &#x3D; \frac{(2 \mu_x \mu_y + C_1)(2 \sigma_{xy} + C_2)}{(\mu_x^2 + \mu_y^2 + C_1)(\sigma_x^2 + \sigma_y^2 + C_2)}<br>$$<br>$\mu_x, \mu_y$：图像的均值（亮度）。</p>
<p>$\sigma_x, \sigma_y$：图像标准差（对比度）。</p>
<p>$\sigma_{xy}$：协方差（结构相似性）。</p>
<p>$C_1, C_2$：防止分母为0的小常数。</p>
<ul>
<li>优点：更符合人眼感知、多维度评估、鲁棒性强</li>
<li>缺点：计算复杂度高、不适用于极端失真、依赖参考图像</li>
</ul>
<h4 id="MS-SSIM（多尺度SSIM）"><a href="#MS-SSIM（多尺度SSIM）" class="headerlink" title="MS-SSIM（多尺度SSIM）"></a><strong>MS-SSIM（多尺度SSIM）</strong></h4><p>在多分辨率下计算SSIM，更适合复杂失真。</p>
<h4 id="VIF（视觉信息保真度）"><a href="#VIF（视觉信息保真度）" class="headerlink" title="VIF（视觉信息保真度）"></a><strong>VIF（视觉信息保真度）</strong></h4><p>VIF 将图像视为信息源，将人类视觉系统视为通信信道，通过计算参考图像和失真图像通过HVS（人类视觉系统）信道后的**互信息（Mutual Information）**来评估质量。</p>
<ul>
<li>优点：符合人类感知、多尺度分析、信息论基础、对复杂失真敏感</li>
<li>缺点：计算复杂度高、依赖参数调优、对某些失真不敏感</li>
</ul>
<h2 id="部分参考-Reduced-Reference-RR-IQA"><a href="#部分参考-Reduced-Reference-RR-IQA" class="headerlink" title="部分参考 (Reduced-Reference, RR-IQA)"></a><strong>部分参考 (Reduced-Reference, RR-IQA)</strong></h2><p>仅需原始图像的部分特征（如统计特征、频域信息），而非完整图像。</p>
<h3 id="典型方法-1"><a href="#典型方法-1" class="headerlink" title="典型方法"></a><strong>典型方法</strong></h3><ul>
<li><strong>基于频域特征</strong>：如DCT系数、小波变换能量分布。</li>
<li><strong>基于自然场景统计 (NSS)</strong>：如提取原始图像的梯度分布、熵特征。</li>
</ul>
<h2 id="无参考-No-Reference-NR-IQA"><a href="#无参考-No-Reference-NR-IQA" class="headerlink" title="无参考 (No-Reference, NR-IQA)"></a><strong>无参考 (No-Reference, NR-IQA)</strong></h2><p>无需任何参考图像，直接评估失真图像的质量。</p>
<h3 id="典型方法-2"><a href="#典型方法-2" class="headerlink" title="典型方法"></a><strong>典型方法</strong></h3><ul>
<li><strong>传统方法</strong>：<ul>
<li><strong>BRISQUE</strong>：基于空间域自然场景统计。</li>
<li><strong>NIQE</strong>：利用多元高斯模型拟合图像特征。</li>
</ul>
</li>
<li><strong>深度学习方法</strong>：<ul>
<li><strong>CNN-based</strong>：如WaDIQaM、HyperIQA。</li>
<li><strong>Transformer-based</strong>：如TranSLA、ViTQA。</li>
</ul>
</li>
</ul>
<h1 id="Paper-reading"><a href="#Paper-reading" class="headerlink" title="Paper reading"></a>Paper reading</h1><div class="pdf-container">
  <iframe src="/pdfjs/web/viewer.html?file=/assets/IQA/papers.pdf" width="100%" height="800px"></iframe>
</div>]]></content>
  </entry>
  <entry>
    <title>【Codeforces1187F】Expected Square Beauty</title>
    <url>/2025/07/27/Codeforces1187F-Expected-Square-Beauty/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h3><p><a href="https://codeforces.com/contest/1187/problem/F">【Codeforces1187F】Expected Square Beauty</a>  </p>
<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>有一个长度为 $ n $ 的数列，第 $ i $ 个数的取值范围为 $ [l_i, r_i] $ ，定义一个数列的价值为这个数列极长连续相同段的个数，求一个数列价值的平方期望，对 $ 10^9 + 7 $ 取模 。<br>$ n \leq 200000 $ 。  </p>
<h3 id="做法："><a href="#做法：" class="headerlink" title="做法："></a>做法：</h3><p>定义 $ F(x) $ 为数列的价值， $ I_i(x) $ 为数列中第 $ i $ 项与第 $ i - 1 $ 项是否不同 $ (I_i(x) &#x3D; [x_i \neq x_{i - 1}]) $ ，则有 $ F(x) &#x3D; \sum_{i &#x3D; 1}^{n} I_i(x) $ 。<br>$$ E(B(x)^2) &#x3D; E(\sum_{i &#x3D; 1}^{n}I_i(x)\sum_{j &#x3D; 1}^{n}I_j(x))\ &#x3D; E(\sum_{i &#x3D; 1}^{n}\sum_{j &#x3D; 1}^{n}I_i(x)I_j(x))\ &#x3D; \sum_{i &#x3D; 1}^{n}\sum_{j &#x3D; 1}^{n}E(I_i(x)I_j(x)) $$<br>考虑计算 $ E(I_i(x)I_j(x)) $ ，分三种情况考虑。<br>当 $ i &#x3D; j $ 时， $ E(I_i(x)I_j(x)) &#x3D; E(I_i(x)) $ 。<br>当 $ | i - j | &gt; 1 $ 时， $ I_i(x), I_j(x) $ 互不影响， $ E(I_i(x)I_j(x)) &#x3D; E(I_i(x))E(I_j(x)) $ 。<br>当 $ | i - j | &#x3D; 1 $ 时，仅考虑 $ j &#x3D; i + 1 $ 的贡献（ $ i &#x3D; j + 1 $ 同理）。$ E(I_i(x)I_j(x)) &#x3D; P(x_{i - 1} \neq x_i &amp;&amp; x_i \neq x_{i + 1}) $ 。考虑容斥， $ E(I_i(x)I_j(x)) &#x3D; 1 - p_i - p_{i + 1} + P(x_{i - 1} &#x3D; x_i &amp;&amp; x_i &#x3D; x_{i + 1}) $ ，就可以计算了。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, l[N], r[N], inv[N], ans;</span><br><span class="line"><span class="type">int</span> e[N], pre[N], suf[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> w = <span class="built_in">min</span>(<span class="built_in">min</span>(r[y], r[x]), r[z]) - <span class="built_in">max</span>(<span class="built_in">max</span>(l[y], l[x]), l[z]) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(w &lt; <span class="number">0</span>) w = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> val = <span class="built_in">mul</span>(<span class="built_in">mul</span>(inv[x], inv[y]), inv[z]); <span class="keyword">return</span> <span class="built_in">mul</span>(w, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;l[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;r[i]);</span><br><span class="line">	e[<span class="number">1</span>] = <span class="number">1</span>, inv[<span class="number">1</span>] = <span class="built_in">ksm</span>(r[<span class="number">1</span>] - l[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		inv[i] = <span class="built_in">ksm</span>(r[i] - l[i] + <span class="number">1</span>);</span><br><span class="line">		e[i] = <span class="built_in">min</span>(r[i], r[i - <span class="number">1</span>]) - <span class="built_in">max</span>(l[i], l[i - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(e[i] &lt; <span class="number">0</span>) e[i] = <span class="number">0</span>;</span><br><span class="line">		e[i] = <span class="built_in">mul</span>(e[i], <span class="built_in">mul</span>(inv[i - <span class="number">1</span>], inv[i])), e[i] = <span class="built_in">sub</span>(<span class="number">1</span>, e[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pre[i] = <span class="built_in">add</span>(pre[i - <span class="number">1</span>], e[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) suf[i] = <span class="built_in">add</span>(suf[i + <span class="number">1</span>], e[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(i &lt; n) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(e[i], suf[i + <span class="number">2</span>]));</span><br><span class="line">		<span class="keyword">if</span>(i &gt; <span class="number">1</span>) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(e[i], pre[i - <span class="number">2</span>]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = <span class="built_in">add</span>(ans, e[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> sum = <span class="built_in">sub</span>(<span class="number">1</span>, <span class="built_in">add</span>(<span class="built_in">sub</span>(<span class="number">1</span>, e[i + <span class="number">1</span>]), <span class="built_in">sub</span>(<span class="number">1</span>, e[i])));</span><br><span class="line">		sum = <span class="built_in">add</span>(sum, <span class="built_in">calc</span>(i - <span class="number">1</span>, i, i + <span class="number">1</span>));</span><br><span class="line">		ans = <span class="built_in">add</span>(ans, <span class="built_in">add</span>(sum, sum));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOISC 2017 Day 3」自然公园</title>
    <url>/2025/07/27/JOISC-2017-Day-3-zi-ran-gong-yuan/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2398">「JOISC 2017 Day 3」自然公园</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑链的情况，我们维护一条链 $ l \dots r $ ，每加入一个点 $ x $ ，可以直接判断是 $ x \dots l \dots r $ 或 $ l \dots r \dots x $ ，然后判断 $ x $ 和端点有没有直接的连边，如果有，连上，返回；否则二分出路径上编号最小的点，继续做下去。<br>对于树的情况，要把整个集合和连进来的点判断。<br>对于图的情况，每次发现当前点相邻的时候要二分出每条与集合相连的边，由于点的度数不超过 $ 7 $ ，所以能过。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;park.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MXN = <span class="number">4010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Answer</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ask</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B, <span class="type">int</span> Place[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Sub3 &#123;</span><br><span class="line">	<span class="type">int</span> g[MXN], vis[MXN], used[MXN]; vector&lt;<span class="type">int</span>&gt; hv, e[MXN];</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> S, vector&lt;<span class="type">int</span>&gt; G)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">0</span>, n - <span class="number">1</span>) g[i] = <span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">auto</span> v : G) g[v] = <span class="number">1</span>;</span><br><span class="line">		g[S] = <span class="number">1</span>; <span class="keyword">return</span> <span class="built_in">Ask</span>(<span class="built_in">min</span>(G[<span class="number">0</span>], S), <span class="built_in">max</span>(G[<span class="number">0</span>], S), g);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> l = <span class="number">1</span>, r = n - <span class="number">2</span>, res = n - <span class="number">1</span>, mid;</span><br><span class="line">		<span class="keyword">for</span>(; l &lt;= r;) &#123;</span><br><span class="line">			mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">rep</span>(i, <span class="number">0</span>, mid) g[i] = (vis[i] != <span class="number">2</span>); <span class="built_in">rep</span>(i, mid + <span class="number">1</span>, n - <span class="number">1</span>) g[i] = (vis[i] == <span class="number">1</span>);</span><br><span class="line">			g[x] = <span class="number">1</span>; <span class="keyword">if</span>(<span class="built_in">Ask</span>(<span class="number">0</span>, x, g)) res = mid, r = mid - <span class="number">1</span>; <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, vector&lt;<span class="type">int</span>&gt; &amp;G)</span> </span>&#123; G.<span class="built_in">pb</span>(u), used[u] = <span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(used[v]) <span class="built_in">dfs</span>(v, G); &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Finde</span><span class="params">(<span class="type">int</span> x, vector&lt;<span class="type">int</span>&gt; G)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">check</span>(x, G)) &#123; <span class="keyword">for</span>(<span class="keyword">auto</span> v : G) used[v] = <span class="number">0</span>; <span class="keyword">return</span> ; &#125;</span><br><span class="line">		<span class="type">int</span> l = <span class="number">0</span>, r = G.<span class="built_in">size</span>() - <span class="number">2</span>, res = G.<span class="built_in">size</span>() - <span class="number">1</span>, mid;</span><br><span class="line">		<span class="keyword">for</span>(; l &lt;= r;) &#123;</span><br><span class="line">			mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">rep</span>(i, <span class="number">0</span>, n - <span class="number">1</span>) g[i] = <span class="number">0</span>; <span class="built_in">rep</span>(i, <span class="number">0</span>, mid) g[G[i]] = <span class="number">1</span>;</span><br><span class="line">			g[x] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">Ask</span>(<span class="built_in">min</span>(G[<span class="number">0</span>], x), <span class="built_in">max</span>(G[<span class="number">0</span>], x), g)) res = mid, r = mid - <span class="number">1</span>; <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> u = G[res]; <span class="keyword">for</span>(<span class="keyword">auto</span> i : G) used[i] = <span class="number">1</span>; used[u] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(used[v]) &#123; vector&lt;<span class="type">int</span>&gt; tmp;  <span class="built_in">dfs</span>(v, tmp), <span class="built_in">Finde</span>(x, tmp); &#125;</span><br><span class="line">		<span class="built_in">Answer</span>(<span class="built_in">min</span>(u, x), <span class="built_in">max</span>(u, x)), e[u].<span class="built_in">pb</span>(x), e[x].<span class="built_in">pb</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		vis[x] = <span class="number">2</span>; <span class="keyword">for</span>(; !<span class="built_in">check</span>(x, hv); <span class="built_in">solve</span>(<span class="built_in">Find</span>(x)));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : hv) used[v] = <span class="number">1</span>;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; tmp; <span class="built_in">dfs</span>(<span class="number">0</span>, tmp), <span class="built_in">Finde</span>(x, tmp), vis[x] = <span class="number">1</span>, hv.<span class="built_in">pb</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">MAIN</span><span class="params">()</span> </span>&#123; hv.<span class="built_in">pb</span>(<span class="number">0</span>), vis[<span class="number">0</span>] = <span class="number">1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, n - <span class="number">1</span>) <span class="keyword">if</span>(!vis[i]) <span class="built_in">solve</span>(i); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Detect</span><span class="params">(<span class="type">int</span> T, <span class="type">int</span> NN)</span> </span>&#123;</span><br><span class="line">	n = NN;</span><br><span class="line">	Sub3::<span class="built_in">MAIN</span>(); <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>交互</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>【LOJ3044】【ZJOI2019】Minimax 搜索</title>
    <url>/2025/07/27/LOJ3044-ZJOI2019-Minimax-sou-suo/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/3044">【LOJ3044】【ZJOI2019】Minimax 搜索</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>计算 $ W(S) &lt;&#x3D; i $ 比 $ W(S) &#x3D; i $ 容易得多，设最后结果为 $ sum[i] - sum[i - 1] $ ，其中 $ sum[n] &#x3D; 2^{count~leaf} - 1 $ 。<br>先做一次 $ dfs $ 找到决策路径。对于每一个 $ i \in [l, r] $ ，令 $ dp[i] $ 表示 $ i $ 的子树有多少种方案是无法改变根节点的值的，用总集合数减去就得到可以改变的方案数。<br>然后得到一个 $ O(n \times (r - l + 1)) $ 的算法。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, L, R;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>, hed[N], to[N + N], nxt[N + N];</span><br><span class="line"><span class="type">int</span> f[N], dep[N], sz[N];</span><br><span class="line"><span class="type">int</span> ans[N], value, ba[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	to[++cnt] = y, nxt[cnt] = hed[x], hed[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	dep[u] = dep[ff] + <span class="number">1</span>; <span class="type">bool</span> Leaf = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) f[u] = <span class="number">1</span>; <span class="keyword">else</span> f[u] = N;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] ^ ff) &#123;</span><br><span class="line">		<span class="built_in">init</span>(to[i], u), sz[u] += sz[to[i]], Leaf = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) f[u] = <span class="built_in">Max</span>(f[u], f[to[i]]);</span><br><span class="line">		<span class="keyword">else</span> f[u] = <span class="built_in">Min</span>(f[u], f[to[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Leaf) sz[u] = <span class="number">1</span>, f[u] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gmx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="type">bool</span> Leaf = <span class="number">1</span>; <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] ^ ff) &#123;</span><br><span class="line">		Leaf = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, <span class="built_in">gmx</span>(to[i], u, w));</span><br><span class="line">		<span class="keyword">else</span> res = <span class="built_in">mul</span>(res, <span class="built_in">sub</span>(ba[sz[to[i]]], <span class="built_in">gmx</span>(to[i], u, w)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Leaf) &#123;</span><br><span class="line">		<span class="keyword">if</span>(f[u] &lt;= value) ++res; <span class="keyword">if</span>(f[u] + w &lt;= value) ++res; <span class="keyword">return</span> res - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) <span class="keyword">return</span> res; <span class="keyword">return</span> <span class="built_in">sub</span>(ba[sz[u]], res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gmn</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="type">bool</span> Leaf = <span class="number">1</span>; <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] ^ ff) &#123;</span><br><span class="line">		Leaf = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, <span class="built_in">sub</span>(ba[sz[to[i]]], <span class="built_in">gmn</span>(to[i], u, w)));</span><br><span class="line">		<span class="keyword">else</span> res = <span class="built_in">mul</span>(res, <span class="built_in">gmn</span>(to[i], u, w));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Leaf) &#123;</span><br><span class="line">		<span class="keyword">if</span>(f[u] &gt;= value) ++res; <span class="keyword">if</span>(f[u] - w &gt;= value) ++res; <span class="keyword">return</span> res - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">sub</span>(ba[sz[u]], res); <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] ^ ff) &#123;</span><br><span class="line">		<span class="keyword">if</span>(f[u] == f[to[i]]) res = <span class="built_in">mul</span>(res, <span class="built_in">dfs</span>(to[i], u, w));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, <span class="built_in">gmx</span>(to[i], u, w));</span><br><span class="line">		<span class="keyword">else</span> res = <span class="built_in">mul</span>(res, <span class="built_in">gmn</span>(to[i], u, w));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">if</span>(x == n) <span class="keyword">return</span> <span class="built_in">sub</span>(ba[sz[<span class="number">1</span>]], <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sub</span>(ba[sz[<span class="number">1</span>]], <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;L, &amp;R);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), <span class="built_in">addedge</span>(x, y), <span class="built_in">addedge</span>(y, x);</span><br><span class="line">	<span class="keyword">if</span>(R - L &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">		ba[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ba[i] = <span class="built_in">add</span>(ba[i - <span class="number">1</span>], ba[i - <span class="number">1</span>]);</span><br><span class="line">		<span class="built_in">init</span>(<span class="number">1</span>, <span class="number">0</span>), value = f[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = L - <span class="number">1</span>; i &lt;= R; i++) ans[i] = <span class="built_in">calc</span>(i);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = R; i &gt;= L; i--) ans[i] = <span class="built_in">sub</span>(ans[i], ans[i - <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = L; i &lt;= R; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现每个叶子节点只会被改变一次，然后这个问题可以变成一个动态DP。<br>考虑决策路径上的节点是无用的，将树进行重链剖分，以每一个决策路径的点作为根进行动态DP。<br>卡常数可以用向量代替矩阵。<br>时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pair</span> &#123; <span class="type">int</span> k, b; <span class="built_in">Pair</span>(<span class="type">int</span> K = <span class="number">0</span>, <span class="type">int</span> B = <span class="number">0</span>) : <span class="built_in">k</span>(K), <span class="built_in">b</span>(B) &#123;&#125; &#125;;</span><br><span class="line"><span class="keyword">inline</span> Pair <span class="keyword">operator</span>+(<span class="type">const</span> Pair &amp;x, <span class="type">const</span> Pair &amp;y) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Pair</span>(<span class="built_in">mul</span>(x.k, y.k), <span class="built_in">add</span>(<span class="built_in">mul</span>(x.k, y.b), x.b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> pii <span class="keyword">operator</span>+(pii x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	<span class="keyword">if</span>(y) x.fst = <span class="built_in">mul</span>(x.fst, y); <span class="keyword">else</span> ++x.snd; <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> pii <span class="keyword">operator</span>-(pii x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	<span class="keyword">if</span>(y) x.fst = <span class="built_in">mul</span>(x.fst, <span class="built_in">ksm</span>(y)); <span class="keyword">else</span> --x.snd; <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gval</span><span class="params">(pii x)</span> </span>&#123; <span class="keyword">return</span> x.snd ? <span class="number">0</span> : x.fst; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, lb, rb, sum = <span class="number">1</span>, ans[N];</span><br><span class="line"><span class="type">bool</span> leaf[N]; <span class="type">int</span> sz[N], a[N], w[N], dep[N], son[N], key[N];</span><br><span class="line"><span class="type">int</span> fa[N], dfn[N], idx = <span class="number">0</span>, dp[N];</span><br><span class="line"><span class="type">bool</span> type[N]; pii pr[N]; <span class="type">int</span> top[N], ed[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], chs[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TR</span> &#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">		<span class="type">int</span> lf, rf; Pair w;</span><br><span class="line">		<span class="built_in">P</span>(<span class="type">int</span> Lf = <span class="number">0</span>, <span class="type">int</span> Rf = <span class="number">0</span>, Pair W = <span class="built_in">Pair</span>(<span class="number">1</span>, <span class="number">0</span>)) :</span><br><span class="line">			<span class="built_in">lf</span>(Lf), <span class="built_in">rf</span>(Rf), <span class="built_in">w</span>(W) &#123;&#125;</span><br><span class="line">	&#125;; P t[N * <span class="number">4</span>];</span><br><span class="line">	<span class="type">int</span> tot, n, rt;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; t[u].w = t[t[u].lf].w + t[t[u].rf].w; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">		u = ++tot, t[u].w = <span class="built_in">Pair</span>(<span class="number">1</span>, <span class="number">0</span>); <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(t[u].lf, l, mid), <span class="built_in">build</span>(t[u].rf, mid + <span class="number">1</span>, r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> size)</span> </span>&#123; rt = tot = <span class="number">0</span>, n = size, <span class="built_in">build</span>(rt, <span class="number">1</span>, n); &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, Pair w)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l &gt;= r) &#123; t[u].w = w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(x &lt;= mid) <span class="built_in">mdy</span>(t[u].lf, l, mid, x, w);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">mdy</span>(t[u].rf, mid + <span class="number">1</span>, r, x, w);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Mdy</span><span class="params">(<span class="type">int</span> x, Pair w)</span> </span>&#123; <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, w); &#125;</span><br><span class="line">	<span class="function">Pair <span class="title">qry</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l == L &amp;&amp; r == R) <span class="keyword">return</span> t[u].w;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(R &lt;= mid) <span class="keyword">return</span> <span class="built_in">qry</span>(t[u].lf, l, mid, L, R);</span><br><span class="line">		<span class="keyword">if</span>(L &gt; mid) <span class="keyword">return</span> <span class="built_in">qry</span>(t[u].rf, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">qry</span>(t[u].lf, l, mid, L, mid) +</span><br><span class="line">			   <span class="built_in">qry</span>(t[u].rf, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, R);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Qry</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r).b; &#125;</span><br><span class="line">&#125;; TR tr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	leaf[u] = <span class="number">1</span>, dep[u] = dep[ff] + <span class="number">1</span>; w[u] = (dep[u] &amp; <span class="number">1</span>) ? <span class="number">0</span> : N;</span><br><span class="line">	sz[u] = a[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v ^ ff) &#123;</span><br><span class="line">		leaf[u] = <span class="number">0</span>, <span class="built_in">init</span>(v, u), sz[u] += sz[v], a[u] = <span class="built_in">mul</span>(a[u], a[v]);</span><br><span class="line">		<span class="keyword">if</span>(sz[son[u]] &lt; sz[v]) son[u] = v;</span><br><span class="line">		<span class="keyword">if</span>((dep[u] &amp; <span class="number">1</span>) &amp;&amp; w[v] &gt; w[u]) w[u] = w[v], key[u] = v;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(!(dep[u] &amp; <span class="number">1</span>) &amp;&amp; w[v] &lt; w[u]) w[u] = w[v], key[u] = v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(leaf[u]) a[u] = <span class="number">2</span>, w[u] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> tp, <span class="type">bool</span> flag, <span class="type">bool</span> opt)</span> </span>&#123;</span><br><span class="line">	fa[u] = ff, dfn[u] = ++idx;</span><br><span class="line">	type[u] = flag, pr[u] = <span class="built_in">mp</span>(<span class="number">1</span>, <span class="number">0</span>), top[u] = tp;</span><br><span class="line">	<span class="keyword">if</span>(leaf[u]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(opt) &#123;</span><br><span class="line">			dp[u] = <span class="number">2</span> * (w[u] &lt;= w[<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(w[u] &lt;= w[<span class="number">1</span>]) chs[w[<span class="number">1</span>] - w[u] + <span class="number">1</span>].<span class="built_in">pb</span>(u);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			dp[u] = <span class="number">2</span> * (w[u] &gt;= w[<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(w[u] &gt;= w[<span class="number">1</span>]) chs[w[u] - w[<span class="number">1</span>] + <span class="number">1</span>].<span class="built_in">pb</span>(u);</span><br><span class="line">		&#125;</span><br><span class="line">		tr.<span class="built_in">Mdy</span>(dfn[u], <span class="built_in">Pair</span>(<span class="number">0</span>, dp[u]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u], u, tp, flag ^ <span class="number">1</span>, opt), ed[u] = ed[son[u]];</span><br><span class="line">	<span class="keyword">else</span> ed[u] = u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff &amp;&amp; v != son[u]) &#123;</span><br><span class="line">		<span class="built_in">dfs2</span>(v, u, v, flag ^ <span class="number">1</span>, opt);</span><br><span class="line">		<span class="keyword">if</span>(flag) pr[u] = pr[u] + dp[v];</span><br><span class="line">		<span class="keyword">else</span> pr[u] = pr[u] + <span class="built_in">sub</span>(a[v], dp[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(son[u]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(flag) &#123;</span><br><span class="line">			dp[u] = <span class="built_in">mul</span>(<span class="built_in">gval</span>(pr[u]), dp[son[u]]);</span><br><span class="line">			tr.<span class="built_in">Mdy</span>(dfn[u], <span class="built_in">Pair</span>(<span class="built_in">gval</span>(pr[u]), <span class="number">0</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			dp[u] = <span class="built_in">mul</span>(<span class="built_in">gval</span>(pr[u]), <span class="built_in">sub</span>(a[son[u]], dp[son[u]]));</span><br><span class="line">			dp[u] = <span class="built_in">sub</span>(a[u], dp[u]);</span><br><span class="line">			tr.<span class="built_in">Mdy</span>(dfn[u], <span class="built_in">Pair</span>(<span class="built_in">gval</span>(pr[u]), <span class="built_in">sub</span>(a[u], <span class="built_in">mul</span>(<span class="built_in">gval</span>(pr[u]), a[son[u]]))));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!key[u]) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="built_in">dfs1</span>(key[u], u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff &amp;&amp; v != key[u])</span><br><span class="line">		<span class="built_in">dfs2</span>(v, u, v, <span class="number">0</span>, dep[u] &amp; <span class="number">1</span>), sum = <span class="built_in">mul</span>(sum, dp[v]), fa[v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	tr.<span class="built_in">Mdy</span>(dfn[x], <span class="built_in">Pair</span>(<span class="number">0</span>, <span class="built_in">sub</span>(dp[x], <span class="number">1</span>)));</span><br><span class="line">	<span class="type">int</span> tmp = tr.<span class="built_in">Qry</span>(dfn[top[x]], dfn[ed[x]]);</span><br><span class="line">	x = top[x];</span><br><span class="line">	<span class="keyword">for</span>(; fa[x];) &#123;</span><br><span class="line">		<span class="type">int</span> f = fa[x];</span><br><span class="line">		<span class="keyword">if</span>(type[f]) pr[f] = (pr[f] + tmp) - dp[x];</span><br><span class="line">		<span class="keyword">else</span> pr[f] = (pr[f] + <span class="built_in">sub</span>(a[x], tmp)) - <span class="built_in">sub</span>(a[x], dp[x]);</span><br><span class="line">		dp[x] = tmp, x = f;</span><br><span class="line">		<span class="keyword">if</span>(type[x]) tr.<span class="built_in">Mdy</span>(dfn[x], <span class="built_in">Pair</span>(<span class="built_in">gval</span>(pr[x]), <span class="number">0</span>));</span><br><span class="line">		<span class="keyword">else</span> tr.<span class="built_in">Mdy</span>(dfn[x], <span class="built_in">Pair</span>(<span class="built_in">gval</span>(pr[x]), <span class="built_in">sub</span>(a[x], <span class="built_in">mul</span>(<span class="built_in">gval</span>(pr[x]), a[son[x]]))));</span><br><span class="line">		tmp = tr.<span class="built_in">Qry</span>(dfn[top[x]], dfn[ed[x]]), x = top[x];</span><br><span class="line">	&#125;</span><br><span class="line">	sum = <span class="built_in">mul</span>(<span class="built_in">mul</span>(sum, tmp), <span class="built_in">ksm</span>(dp[x])), dp[x] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;lb, &amp;rb);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	<span class="built_in">init</span>(<span class="number">1</span>, <span class="number">0</span>), tr.<span class="built_in">init</span>(n), <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> x : chs[i]) <span class="built_in">modify</span>(x);</span><br><span class="line">		ans[i] = <span class="built_in">sub</span>(a[<span class="number">1</span>], sum);</span><br><span class="line">	&#125;</span><br><span class="line">	ans[n] = a[<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--) ans[i] = <span class="built_in">sub</span>(ans[i], ans[i - <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = lb; i &lt;= rb; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
        <tag>动态DP</tag>
      </tags>
  </entry>
  <entry>
    <title>【LOJ3042】【ZJOI2019】麻将</title>
    <url>/2025/07/27/LOJ3042-ZJOI2019-ma-jiang/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/3042">【LOJ3042】【ZJOI2019】麻将</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>我们可以用 $ dp[i][j][k] $ 表示枚举到第 $ i $ 种牌，没有组成面子的 $ i - 1 $ 种牌有 $ j $ 个， $ i $ 种牌有 $ k $ 个。<br>然后再开一维表示是否有雀头，七对子再开一维特判即可。<br>然后暴力搜索所有 $ dp $ 状态，发现状态数只有 $ S &#x3D; 3956 $ 种。<br>考虑摸 $ i $ 牌，计算所有大小为 $ 13+i $ 的牌集中不能胡牌的集合数 $ X $ 和总集合数 $ Y $ ，那么 $ \frac{X}{Y} $ 就是权值大于 $ i $ 的概率， $ \sum{\frac{X}{Y}} $ 即为权值的期望。<br>设 $ f[i][j][t] $ 表示处理前 $ i $ 种牌，选了 $ j $ 张牌， $ dp $ 状态编号为 $ t $ ，转移就枚举下一种牌张数即可。<br>时间复杂度 $ O(n^2 S) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, S = <span class="number">4010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">state</span> &#123; <span class="type">int</span> f[<span class="number">3</span>][<span class="number">3</span>]; &#125;; <span class="type">int</span> Count = <span class="number">0</span>; map&lt;state, <span class="type">int</span>&gt; ma;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> state &amp;x, <span class="type">const</span> state &amp;y) &#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		<span class="keyword">if</span>(x.f[i][j] ^ y.f[i][j]) <span class="keyword">return</span> x.f[i][j] &lt; y.f[i][j];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">state <span class="title">cipher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	state res;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) res.f[i][j] = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">state <span class="title">starter</span><span class="params">()</span> </span>&#123; state res = <span class="built_in">cipher</span>(); res.f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> res; &#125;</span><br><span class="line">state <span class="keyword">operator</span>+(<span class="type">const</span> state &amp;x, <span class="type">const</span> state &amp;y) &#123;</span><br><span class="line">	state res;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		res.f[i][j] = <span class="built_in">Max</span>(x.f[i][j], y.f[i][j]);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">state <span class="keyword">operator</span>+(<span class="type">const</span> state &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	state res = <span class="built_in">cipher</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span> &amp;&amp; i &lt;= y; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span> &amp;&amp; i + j &lt;= y; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(x.f[i][j] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="type">int</span> tt = x.f[i][j];</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span> &amp;&amp; i + j + k &lt;= y; k++)</span><br><span class="line">				res.f[j][k] = <span class="built_in">Max</span>(res.f[j][k], <span class="built_in">Min</span>(tt + i + (y - i - j - k) / <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(state u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ma.<span class="built_in">count</span>(u)) <span class="keyword">return</span> ;</span><br><span class="line">	ma[u] = ++Count; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++) <span class="built_in">dfs</span>(u + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;pair&lt;state, state&gt;, <span class="type">int</span>&gt; mahjong;</span><br><span class="line"><span class="type">bool</span> ed[S]; mahjong states[S]; map&lt;mahjong, <span class="type">int</span>&gt; id;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>, nxt[<span class="number">5</span>][S];</span><br><span class="line"></span><br><span class="line">pair&lt;state, state&gt; <span class="keyword">operator</span>+(<span class="type">const</span> pair&lt;state, state&gt; &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	<span class="keyword">if</span>(y &gt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">mp</span>(x.fst + y, (x.snd + y) + (x.fst + (y - <span class="number">2</span>)));</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mp</span>(x.fst + y, x.snd + y);</span><br><span class="line">&#125;</span><br><span class="line">mahjong <span class="keyword">operator</span>+(<span class="type">const</span> mahjong &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mp</span>(x.fst + y, <span class="built_in">Min</span>(x.snd + (y &gt; <span class="number">1</span>), <span class="number">7</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mahjong <span class="title">inception</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">mp</span>(<span class="built_in">mp</span>(<span class="built_in">starter</span>(), <span class="built_in">cipher</span>()), <span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getstate</span><span class="params">(mahjong u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(id.<span class="built_in">count</span>(u)) <span class="keyword">return</span> ; id[u] = ++tot, states[tot] = u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++) <span class="built_in">getstate</span>(u + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(mahjong u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u.snd &gt;= <span class="number">7</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		<span class="keyword">if</span>(u.fst.snd.f[i][j] &gt;= <span class="number">4</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="built_in">starter</span>()), <span class="built_in">getstate</span>(<span class="built_in">inception</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span><br><span class="line">		ed[i] = <span class="built_in">check</span>(states[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) nxt[j][i] = id[states[i] + j];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, used[N], ans = <span class="number">0</span>, C[<span class="number">5</span>][<span class="number">5</span>], f[N][<span class="number">4</span> * N][S];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">init</span>(), <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= <span class="number">13</span>; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), ++used[x];</span><br><span class="line">	C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++) C[i][j] = C[i - <span class="number">1</span>][j] + C[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">4</span> * i; j++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= tot; k++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(!f[i][j][k]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> t = used[i + <span class="number">1</span>]; t &lt; <span class="number">5</span>; t++)</span><br><span class="line">				f[i + <span class="number">1</span>][j + t][nxt[t][k]] = <span class="built_in">add</span>(f[i + <span class="number">1</span>][j + t][nxt[t][k]],</span><br><span class="line">				<span class="built_in">mul</span>(f[i][j][k], C[<span class="number">4</span> - used[i + <span class="number">1</span>]][t - used[i + <span class="number">1</span>]]));</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">13</span>; i &lt;= <span class="number">4</span> * n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> sum = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= tot; j++) &#123;</span><br><span class="line">			sum = <span class="built_in">add</span>(sum, f[n][i][j]); <span class="keyword">if</span>(!ed[j]) cnt = <span class="built_in">add</span>(cnt, f[n][i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(<span class="built_in">ksm</span>(sum), cnt));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>【LOJ2330】「清华集训 2017」榕树之心</title>
    <url>/2025/07/27/LOJ2330-qing-hua-ji-xun-2017-rong-shu-zhi-xin/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2330">「清华集训 2017」榕树之心</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑只询问 $ 1 $ 号节点怎么做。假如我们选择一个子树然后再选择另一个子树，那么这次操作就抵消了。<br>对于每一个节点，将它每一个子树的大小计为 $ a_i $ ，然后每次选择 $ a_x, a_y ( a_x &gt; 0, a_y &gt; 0 ) $ ，使 $ –a_x, –a_y $ ，使 $ \sum{a_i} $ 最小。最后有两种情况：  </p>
<ol>
<li>当 $ Max ( a_i ) \times 2 &gt;&#x3D; \sum{a_i} $ ，则该节点子树贡献为 $ Max ( a_i ) \times 2 - \sum{a_i} $ 。  </li>
<li>否则每次去两个最大值消耗，该节点子树贡献为 $ ( \sum{a_i} ) \mod 2 $ 。</li>
</ol>
<p>然后就可以在节点不同的儿子中内部抵消，就可以进行树形 DP ，记录一个节点儿子子树消耗后最大值、次大值以及该点子树消耗后的权值。<br>询问所有点则可以用用类似换根 DP 的方法。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> W, T;</span><br><span class="line"><span class="type">int</span> n, ans[N], dep[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line">pii f[<span class="number">2</span>][N], a[N];</span><br><span class="line"><span class="comment">// f[0][x] &gt; f[1][x]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Max</span><span class="params">(<span class="type">const</span> T &amp;x, <span class="type">const</span> T &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> pii &amp;x, <span class="type">const</span> pii &amp;y) &#123;</span><br><span class="line">	<span class="keyword">return</span> x.fst == y.fst ? x.snd &gt; y.snd : x.fst &lt; y.fst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	a[u].fst = <span class="number">1</span>, dep[u] = dep[ff] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v ^ ff) &#123;</span><br><span class="line">		<span class="built_in">dfs1</span>(v, u), a[u].fst += a[v].fst;</span><br><span class="line">		<span class="keyword">if</span>(f[<span class="number">1</span>][u] &lt; a[v]) f[<span class="number">1</span>][u] = a[v];</span><br><span class="line">		<span class="keyword">if</span>(f[<span class="number">1</span>][u] &gt; f[<span class="number">0</span>][u]) <span class="built_in">swap</span>(f[<span class="number">1</span>][u], f[<span class="number">0</span>][u]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(f[<span class="number">0</span>][u].fst) &#123;</span><br><span class="line">		<span class="keyword">if</span>(a[u].fst - f[<span class="number">0</span>][u].fst - <span class="number">1</span> &gt;= f[<span class="number">0</span>][u].snd + <span class="number">1</span>)</span><br><span class="line">			a[u].snd = (a[u].fst - <span class="number">1</span>) &amp; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> a[u].snd = f[<span class="number">0</span>][u].snd + <span class="number">1</span> - (a[u].fst - f[<span class="number">0</span>][u].fst - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> a[u].snd = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, pii x)</span> </span>&#123;</span><br><span class="line">	pii U = <span class="built_in">Max</span>(x, f[<span class="number">0</span>][u]); <span class="type">int</span> sz = n - dep[u] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(U.fst) &#123;</span><br><span class="line">		<span class="keyword">if</span>(sz - U.fst - <span class="number">1</span> &gt;= U.snd + <span class="number">1</span>) ans[u] = (sz - <span class="number">1</span>) &amp; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> ans[u] = U.snd + <span class="number">1</span> - (sz - U.fst - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v ^ ff) &#123;</span><br><span class="line">		<span class="keyword">if</span>(f[<span class="number">0</span>][u] == a[v]) <span class="built_in">dfs2</span>(v, u, <span class="built_in">Max</span>(x, f[<span class="number">1</span>][u]));</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">dfs2</span>(v, u, <span class="built_in">Max</span>(x, f[<span class="number">0</span>][u]));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;W, &amp;T);</span><br><span class="line">	<span class="keyword">for</span>(; T; --T) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			e[i].<span class="built_in">clear</span>(), f[<span class="number">0</span>][i] = f[<span class="number">1</span>][i] = a[i] = <span class="built_in">mp</span>(<span class="number">0</span>, INF);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x);</span><br><span class="line">		<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="built_in">mp</span>(<span class="number">0</span>, INF));</span><br><span class="line">		<span class="keyword">if</span>(W == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[<span class="number">1</span>] == <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i] == <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LVLM-paper reading</title>
    <url>/2025/07/27/LVLM-learning/</url>
    <content><![CDATA[<h1 id="paper-reading1"><a href="#paper-reading1" class="headerlink" title="paper reading1"></a>paper reading1</h1><div class="pdf-container">
  <iframe src="/pdfjs/web/viewer.html?file=/assets/LVLM/readpapers1.pdf" width="100%" height="800px"></iframe>
</div>]]></content>
      <tags>
        <tag>LVLM</tag>
      </tags>
  </entry>
  <entry>
    <title>「JLOI2015」有意义的字符串</title>
    <url>/2025/07/27/JLOI2015-you-yi-yi-de-zi-fu-chuan/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2106">「JLOI2015」有意义的字符串</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$ \frac{b + \sqrt{d}}{2} $ 和 $ \frac{b - \sqrt{d}}{2} $ 是二元一次方程 $ x^2 - bx + \frac{b^2 - d}{4} &#x3D; 0 $ 的解。<br>则 $ x^2 &#x3D; bx + \frac{d - b^2}{4} $ 。<br>两边同时乘 $ x^{n - 2} $ 得： $ x^n &#x3D; bx^{n - 1} + \frac{d - b^2}{4}x^{n - 2} $ 。<br>设 $ f[i] &#x3D; (\frac{b + \sqrt{d}}{2})^{i} + (\frac{b - \sqrt{d}}{2})^{i} $ ，则存在递推式 $ f[i] &#x3D; bf[i - 1] + \frac{d - b^2}{4}f[i - 2] $ 。其中 $ f[0] &#x3D; 2, f[1] &#x3D; b $ 。<br>这样就矩阵乘法得到 $ f[n] $ 。题目中有 $ b^2 \leq d &lt; (b + 1)^2 $ ，所以 $ \frac{b - \sqrt{d}}{2} \leq 0 $ 。特判 $ b^2 \neq d $ 且 $ n \mod 2 &#x3D; 0 $ 来判断是否减一。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">7528443412579576937ll</span>;</span><br><span class="line">ll b, d, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">add</span><span class="params">(<span class="type">const</span> ll &amp;x, <span class="type">const</span> ll &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (ull)x + (ull)y &lt; (ull)mod ? (ull)x + (ull)y : (ull)x + (ull)y - (ull)mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sub</span><span class="params">(<span class="type">const</span> ll &amp;x, <span class="type">const</span> ll &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (ull)x - (ull)y &lt; (ull)<span class="number">0</span> ? (ull)x - (ull)y + (ull)mod : (ull)x - (ull)y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">	ll ss = <span class="number">0</span>; <span class="keyword">for</span>(; y; y /= <span class="number">2</span>, x = <span class="built_in">add</span>(x, x)) <span class="keyword">if</span>(y % <span class="number">2</span>) ss = <span class="built_in">add</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mtrx</span> &#123;</span><br><span class="line">	ll a[<span class="number">2</span>][<span class="number">2</span>]; <span class="built_in">mtrx</span>() &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)); &#125;</span><br><span class="line">	<span class="keyword">inline</span> mtrx <span class="keyword">operator</span>*(<span class="type">const</span> mtrx &amp;yy)<span class="type">const</span> &#123;</span><br><span class="line">		mtrx res;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">					res.a[i][j] = <span class="built_in">add</span>(res.a[i][j], <span class="built_in">mul</span>(a[i][k], yy.a[k][j]));</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; mtrx sum, ba;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	ll ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y /= <span class="number">2</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y % <span class="number">2</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;b, &amp;d, &amp;n); ll flag = (n % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; b * b != d);</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">0</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, b + (ll)<span class="built_in">sqrt</span>(d)); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	sum.a[<span class="number">0</span>][<span class="number">0</span>] = b, sum.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">	ba.a[<span class="number">0</span>][<span class="number">0</span>] = b, ba.a[<span class="number">0</span>][<span class="number">1</span>] = (d - b * b) / <span class="number">4</span>, ba.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	n -= <span class="number">1</span>; <span class="keyword">if</span>(n &lt; <span class="number">0</span>) n = <span class="number">0</span>; mtrx tmp; tmp.a[<span class="number">0</span>][<span class="number">0</span>] = tmp.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(; n; n /= <span class="number">2</span>, ba = ba * ba) <span class="keyword">if</span>(n % <span class="number">2</span>) tmp = tmp * ba;</span><br><span class="line">	sum = tmp * sum;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">sub</span>(sum.a[<span class="number">0</span>][<span class="number">0</span>], flag));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>PT07D - Let us count 1 2 3</title>
    <url>/2025/07/27/PT07D%20-%20Let%20us%20count%201%202%203/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.spoj.com/problems/PT07D/en/">PT07D - Let us count 1 2 3」PATH</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$ k &#x3D; 1 $ ： 树的 $ Prufer $ 序列个数为 $ n^{n - 2} $ 。<br>$ k &#x3D; 2 $ ： 树的 $ Prufer $ 序列选一个为根， $ n^{n - 1} $ 。<br>$ k &#x3D; 3 $ ：<br>令 $ f_i $ 为节点数为 $ i $ 时无标号有根树的方案数，生成函数为 $ F(x) &#x3D; \sum f_i x^i $ 。<br>考虑到一棵无标号有根树可以看做一个无标号有根森林加一个根组成，而一种大小为 $ k $ 的子树贡献用生成函数表示为 $ \sum x^{ki} &#x3D; (1 - x^k)^{-1} $ ，一共有 $ f_k $ 种，即 $ (1 - x^k)^{-f_k} $ ，则：<br>$$<br>F(x) &#x3D; x \prod_{k &gt; 0} (1 - x^k)^{-f_k}<br>$$<br>两边取 $ \ln $ 并求导得：<br>$$<br>\frac{F’(x)}{F(x)} &#x3D; \frac{1}{x} + \sum_{k &gt; 0} k f_k \frac{x^{k - 1}}{1 - x^k}\\<br>x F’(x) &#x3D; F(x) + (\sum_{k &gt; 0} k f_k \frac{x^{k - 1}}{1 - x^k})F(x)\\<br>n f_n &#x3D; f_n + \sum_{i &gt; 0} f_i \sum_{k | n - i} k f_k<br>$$<br>可以 $ O(n^2) $ 算出 $ f_n $ 。<br>$ k &#x3D; 4 $ ：<br>考虑怎么唯一表示一棵树，我们可以用重心表示，所以把根不是重心的都减去。 一个根不为重心，那么有且仅有一个子树大小大于 $ \frac{n}{2} $ ：<br>$$<br>ans &#x3D; f_n - \sum_{i &#x3D; 1}^{\frac{n}{2}} f_i f_{n - i}\\<br>ans +&#x3D; f_{\frac{n}{2}} f_{\frac{n}{2}} - f_{\frac{n}{2}}(f_{\frac{n}{2}} - 1) &#x2F; 2<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> k, n, p;</span><br><span class="line"><span class="type">int</span> f[<span class="number">10010</span>], g[<span class="number">10010</span>], h[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = p - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> w = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % p) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = w * x % p;</span><br><span class="line">	<span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	f[<span class="number">1</span>] = <span class="number">1</span>; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) g[i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		f[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++) f[i] = (f[i] + f[j] * g[i - j]) % p;</span><br><span class="line">		f[i] = f[i] * <span class="built_in">ksm</span>(i - <span class="number">1</span>, p - <span class="number">2</span>) % p;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = i, t = i * f[i] % p; j &lt;= n; j += i) g[j] = (g[j] + t) % p;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">solve1</span>(); <span class="type">int</span> inv2 = (p + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = (i - <span class="number">1</span>) / <span class="number">2</span>; j; j--) cnt = (cnt + f[j] * f[i - j]) % p;</span><br><span class="line">		<span class="keyword">if</span>(!(i &amp; <span class="number">1</span>)) cnt = (cnt + (ll)f[i / <span class="number">2</span>] * (f[i / <span class="number">2</span>] - <span class="number">1</span>) * inv2 % p) % p;</span><br><span class="line">		h[i] = (f[i] - cnt + p) % p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, h[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;k, &amp;n, &amp;p) != EOF;) &#123;</span><br><span class="line">		<span class="keyword">if</span>(k == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n == <span class="number">1</span> ? <span class="number">1</span> : <span class="built_in">ksm</span>(n % p, n - <span class="number">2</span>));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ksm</span>(n % p, n - <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">3</span>) <span class="built_in">solve1</span>(), <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[n]);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">solve2</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>PKUWC2019游记</title>
    <url>/2025/07/27/PKUWC2019-you-ji/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />
    <label for="pass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title>「NOI2016」循环之美</title>
    <url>/2025/07/27/NOI2016-xun-huan-zhi-mei/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2085">「NOI2016」循环之美</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>设 $ k $ 进制下循环位数为 $ a $ ，则 $ xk^a \equiv x (\mod y) $ ，即 $ k^a \equiv 1 (\mod y) $ ，则 $ \gcd(k, y) &#x3D; 1 $ 。<br>$$<br>Ans &#x3D; \sum_{i &#x3D; 1}^{n}\sum_{j &#x3D; 1}^{m}[(i, j) &#x3D; 1][(j, k) &#x3D; 1]\\<br> &#x3D; \sum_{j &#x3D; 1}^{m}[(j, k) &#x3D; 1]\sum_{i &#x3D; 1}^{n}[(i, j) &#x3D; 1]\\<br> &#x3D; \sum_{j &#x3D; 1}^{m}[(j, k) &#x3D; 1]\sum_{i &#x3D; 1}^{n}\sum_{d | (i, j)}\mu(d)\\<br> &#x3D; \sum_{j &#x3D; 1}^{m}[(j, k) &#x3D; 1]\sum_{d | j}\mu(d)\lfloor \frac{n}{d} \rfloor\\<br> &#x3D; \sum_{d &#x3D; 1}^{\min(n, m)}\mu(d)\lfloor\frac{n}{d}\rfloor[(d, k) &#x3D; 1]\sum_{j &#x3D; 1}^{\lfloor \frac{m}{d} \rfloor} [(j, k) &#x3D; 1]\\<br> &#x3D; \sum_{d &#x3D; 1}^{\min(n, m)}\mu(d)\lfloor\frac{n}{d}\rfloor[(d, k) &#x3D; 1]\sum_{j &#x3D; 1}^{\lfloor \frac{m}{d} \rfloor} \sum_{i | (j, k)} \mu(i)\\<br> &#x3D; \sum_{d &#x3D; 1}^{\min(n, m)}\mu(d)\lfloor\frac{n}{d}\rfloor[(d, k) &#x3D; 1]\sum_{i| k} \lfloor \frac{m}{id} \rfloor .\\<br>f(n) &#x3D; \sum_{i| k} \lfloor \frac{m}{i} \rfloor ,\\<br>Ans &#x3D; \sum_{d &#x3D; 1}^{\min(n, m)}\mu(d)\lfloor\frac{n}{d}\rfloor[(d, k) &#x3D; 1] f(\lfloor \frac{m}{d} \rfloor)<br>$$<br>$ f(n) $ 可以枚举 $ k $ 的因数（$ k $ 很小）。<br>其中 $ \lfloor\frac{m}{d}\rfloor $ 和 $ \lfloor\frac{n}{d}\rfloor $ 可以整除分块。<br>$$<br>g(n, k) &#x3D; \sum_{i &#x3D; 1}^{n}\mu(i)[(i, k) &#x3D; 1]\\<br> &#x3D; \sum_{i &#x3D; 1}^{n}\mu(i)\sum_{j | (i, k)}\mu(j)\\<br> &#x3D; \sum_{i &#x3D; 1}^{n}\sum_{j | (i, k)}\mu(i)\mu(j)\\<br> &#x3D; \sum_{j | k}\mu(j)\sum_{i &#x3D; 1}^{\lfloor\frac{n}{j}\rfloor}\mu(ij)\\<br> &#x3D; \sum_{j | k}\mu(j)\sum_{i &#x3D; 1}^{\lfloor\frac{n}{j}\rfloor}\mu(ij)[(i, j) &#x3D; 1]\\<br> &#x3D; \sum_{j | k}\mu^2(j)\sum_{i &#x3D; 1}^{\lfloor\frac{n}{j}\rfloor}\mu(i)[(i, j) &#x3D; 1]\\<br> &#x3D; \sum_{j | k}\mu^2(j)g(\lfloor\frac{n}{j}\rfloor, j) .<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5000010</span>;</span><br><span class="line">ll n, m, k, d[N], ans = <span class="number">0</span>; <span class="type">int</span> ld = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; fac[<span class="number">2010</span>];</span><br><span class="line">ll mu[N], smu[N]; <span class="type">int</span> p[N], lp = <span class="number">0</span>; <span class="type">bool</span> pri[N];</span><br><span class="line">map&lt;ll, ll&gt; Smu, F[<span class="number">2010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(), pre = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; pre = c, c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = x * <span class="number">10ll</span> + (c ^ <span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(pre == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll x, ll y)</span> </span>&#123; <span class="keyword">return</span> y ? <span class="built_in">gcd</span>(y, x % y) : x; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, N - <span class="number">10</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!pri[i]) p[++lp] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; p[j] * i &lt;= N - <span class="number">10</span>; ++j) &#123;</span><br><span class="line">			pri[p[j] * i] = <span class="number">1</span>; <span class="keyword">if</span>(i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">			mu[p[j] * i] = -mu[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, N - <span class="number">10</span>) smu[i] = smu[i - <span class="number">1</span>] + mu[i];</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, k) <span class="keyword">if</span>(k % i == <span class="number">0</span>) d[++ld] = i;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">2000</span>) <span class="built_in">rep</span>(j, <span class="number">1</span>, i) <span class="keyword">if</span>(i % j == <span class="number">0</span>) fac[i].<span class="built_in">pb</span>(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= N - <span class="number">10</span>) <span class="keyword">return</span> smu[x]; <span class="keyword">if</span>(Smu.<span class="built_in">count</span>(x)) <span class="keyword">return</span> Smu[x];</span><br><span class="line">	ll sum = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll l = <span class="number">2</span>, r; l &lt;= x; l = r + <span class="number">1</span>) r = x / (x / l), sum -= (r - l + <span class="number">1</span>) * <span class="built_in">calc</span>(x / l);</span><br><span class="line">	<span class="keyword">return</span> Smu[x] = sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; <span class="number">2</span>) <span class="keyword">return</span> x; <span class="keyword">if</span>(y == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">calc</span>(x);</span><br><span class="line">	<span class="keyword">if</span>(F[y].<span class="built_in">count</span>(x)) <span class="keyword">return</span> F[y][x];</span><br><span class="line">	ll sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : fac[y]) <span class="keyword">if</span>(mu[v]) sum += <span class="built_in">f</span>(x / v, v);</span><br><span class="line">	<span class="keyword">return</span> F[y][x] = sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n), <span class="built_in">gi</span>(m), <span class="built_in">gi</span>(k), <span class="built_in">Sieve</span>();</span><br><span class="line">	<span class="keyword">for</span>(ll l = <span class="number">1</span>, r, sum; l &lt;= <span class="built_in">min</span>(n, m); l = r + <span class="number">1</span>) &#123;</span><br><span class="line">		r = <span class="built_in">min</span>(n / (n / l), m / (m / l)), sum = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, ld) sum += mu[d[j]] * (m / l / d[j]); sum *= (n / l);</span><br><span class="line">		ans += sum * (<span class="built_in">f</span>(r, k) - <span class="built_in">f</span>(l - <span class="number">1</span>, k));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>【SDOI2019】世界地图</title>
    <url>/2025/07/27/SDOI2019-shi-jie-di-tu/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/3112">【SDOI2019】世界地图</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>因为 $ n $ 很小，所以问题可以从 $ n $ 入手。<br>发现询问不会删除第一列和最后一列，那么最后的结果为合并地图 $ [1, l_i - 1] $ 和 $ [r_i + 1, m] $ 的 $ MST $ 得到的 $ MST $ 大小。所以预处理只要求地图前缀&#x2F;后缀 $ MST $ 即可。<br>考虑如何合并两个相邻的 $ MST $ 。发现合并这两个 $ MST $ 只有最前和最后两列的点会产生连接的关系，所以每个 $ MST $ 只要记录两端的点构成的虚树（虚树边权为两点之间路径的最大值），然后再用 $ Kruskal $ 建最小生成树即可。<br>时间复杂度 $ O(n(m + q) \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20010</span>, M = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> n, m, lim, q;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> SA, SB, SC;</span><br><span class="line"><span class="type">int</span> rht[N][M], dwn[N][M];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y, w;</span><br><span class="line">	<span class="built_in">Edge</span>(<span class="type">int</span> X, <span class="type">int</span> Y, <span class="type">int</span> W) : <span class="built_in">x</span>(X), <span class="built_in">y</span>(Y), <span class="built_in">w</span>(W) &#123;&#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> w &lt; yy.w; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tot, fa[N], flag[N]; vector&lt;Edge&gt; e; ll ad;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>, hed[N], to[N], nxt[N], val[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MST</span> &#123;</span><br><span class="line">	<span class="type">int</span> tot; ll sum; vector&lt;Edge&gt; e; <span class="built_in">MST</span>() &#123;&#125;</span><br><span class="line">	<span class="built_in">MST</span>(<span class="type">int</span> *ar) &#123;</span><br><span class="line">		tot = n, sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) e.<span class="built_in">pb</span>(<span class="built_in">Edge</span>(i, i + <span class="number">1</span>, ar[i]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">qry</span><span class="params">()</span> </span>&#123; ll ss = sum; <span class="keyword">for</span>(<span class="keyword">auto</span> v : e) ss += v.w; <span class="keyword">return</span> ss; &#125;</span><br><span class="line">&#125;; MST pre[N], suf[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	SA ^= SA &lt;&lt; <span class="number">16</span>, SA ^= SA &gt;&gt; <span class="number">5</span>, SA ^= SA &lt;&lt; <span class="number">1</span>; <span class="type">unsigned</span> <span class="type">int</span> t = SA;</span><br><span class="line">	SA = SB, SB = SC, SC ^= t ^ SA; <span class="keyword">return</span> SC % lim + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%u%u%u%d&quot;</span>, &amp;n, &amp;m, &amp;SA, &amp;SB, &amp;SC, &amp;lim);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) rht[j][i] = <span class="built_in">gi</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) dwn[j][i] = <span class="built_in">gi</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lnk</span><span class="params">(<span class="type">const</span> Edge &amp;x)</span> </span>&#123;</span><br><span class="line">	to[++cnt] = x.y, val[cnt] = x.w, nxt[cnt] = hed[x.x], hed[x.x] = cnt;</span><br><span class="line">	to[++cnt] = x.x, val[cnt] = x.w, nxt[cnt] = hed[x.y], hed[x.y] = cnt;</span><br><span class="line">	ad += x.w, fa[<span class="built_in">find</span>(x.x)] = <span class="built_in">find</span>(x.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] != ff) ss += <span class="built_in">dfs1</span>(to[i], u);</span><br><span class="line">	<span class="keyword">if</span>(ss &gt;= <span class="number">2</span>) flag[u] = <span class="number">1</span>; ss += flag[u]; <span class="keyword">return</span> ss &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> lst, <span class="type">int</span> ww)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(flag[u]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(lst) e.<span class="built_in">pb</span>(<span class="built_in">Edge</span>(flag[u], lst, ww));</span><br><span class="line">		lst = flag[u], ad -= ww, ww = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i])</span><br><span class="line">		<span class="keyword">if</span>(to[i] != ff) <span class="built_in">dfs2</span>(to[i], u, lst, <span class="built_in">Max</span>(ww, val[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">MST <span class="title">merge</span><span class="params">(<span class="type">const</span> MST &amp;x, <span class="type">const</span> MST &amp;y, <span class="type">int</span> *ar)</span> </span>&#123;</span><br><span class="line">	tot = x.tot + y.tot, e.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : x.e) e.<span class="built_in">pb</span>(v);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : y.e) e.<span class="built_in">pb</span>(<span class="built_in">Edge</span>(v.x + x.tot, v.y + x.tot, v.w));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		e.<span class="built_in">pb</span>(<span class="built_in">Edge</span>(x.tot - n + i, x.tot + i, ar[i]));</span><br><span class="line">	<span class="built_in">sort</span>(e.<span class="built_in">begin</span>(), e.<span class="built_in">end</span>()), cnt = <span class="number">0</span>, ad = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</span><br><span class="line">		fa[i] = i, flag[i] = (i &lt;= n || i &gt; tot - n), hed[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e) <span class="keyword">if</span>(<span class="built_in">find</span>(v.x) != <span class="built_in">find</span>(v.y)) <span class="built_in">lnk</span>(v);</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) <span class="keyword">if</span>(flag[i]) flag[i] = ++cnt;</span><br><span class="line">	e.<span class="built_in">clear</span>(), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	MST res; res.tot = cnt, res.e = e, res.sum = x.sum + y.sum + ad;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gen</span>();</span><br><span class="line">	pre[<span class="number">1</span>] = <span class="built_in">MST</span>(dwn[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; m; i++)</span><br><span class="line">		pre[i] = <span class="built_in">merge</span>(pre[i - <span class="number">1</span>], <span class="built_in">MST</span>(dwn[i]), rht[i - <span class="number">1</span>]);</span><br><span class="line">	suf[m] = <span class="built_in">MST</span>(dwn[m]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = m - <span class="number">1</span>; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">		suf[i] = <span class="built_in">merge</span>(<span class="built_in">MST</span>(dwn[i]), suf[i + <span class="number">1</span>], rht[i]);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> l, r; q; --q) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">merge</span>(suf[r + <span class="number">1</span>], pre[l - <span class="number">1</span>], rht[m]).<span class="built_in">qry</span>());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>虚树</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>【NOIP2012】疫情控制</title>
    <url>/2025/07/27/NOIP2012-yi-qing-kong-zhi/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2607">【NOIP2012】疫情控制</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>这道题显然可以二分答案。<br>考虑构造解。对于每个军队，当它不能到达首都时，它的深度显然越小越好。对于可以到达首都的军队，它有两种决策：退回上一个位置、去填补其他子树的最上面节点。可以用倍增维护。<br>考虑一种特殊数据：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 5</span><br><span class="line">1 3 2</span><br><span class="line">1 4 5</span><br><span class="line">4 5 1000000000</span><br><span class="line">3 3 4 5</span><br></pre></td></tr></table></figure>

<p>它的构造方案是 $ 5 \to 5, 4 \to 3, 3 \to 2 $ ，答案是 $ 7 $ 。<br>考虑一个能到达根节点的军队（从 $ root $ 的儿子 $ x $ 来），若它的步数还能回到上一个位置（并非时光倒流），则直接将它放在根节点考虑没有影响；否则它要么去一个 $ dis(root, x) \geq dis(root, y), y \in son(root) $ 的地方，要么待在 $ x $ 。这部分可以用 $ multiset $ 维护。<br>最后贪心地从首都分配军队。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>;</span><br><span class="line"><span class="type">int</span> n, m, cnt[N],fa[<span class="number">19</span>][N], fr[N], flag[N]; ll ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">	<span class="type">int</span> to; ll w; <span class="built_in">P</span>(<span class="type">int</span> To = <span class="number">0</span>, ll W = <span class="number">0</span>) : <span class="built_in">to</span>(To), <span class="built_in">w</span>(W) &#123;&#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> P &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> w &gt; yy.w; &#125;</span><br><span class="line">&#125;; vector&lt;P&gt; e[N];</span><br><span class="line">ll depw[N];</span><br><span class="line">ll a[N], b[N]; <span class="type">int</span> la, lb;</span><br><span class="line">vector&lt;ll&gt; hv[N];</span><br><span class="line">multiset&lt;ll&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(), pre = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; pre = c, c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = <span class="number">10ll</span> * x + (c ^ <span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(pre == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> anc)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ff == <span class="number">1</span>) anc = u; fr[u] = anc, fa[<span class="number">0</span>][u] = ff;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">18</span>) fa[i][u] = fa[i - <span class="number">1</span>][fa[i - <span class="number">1</span>][u]];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v.to != ff) depw[v.to] = depw[u] + v.w, <span class="built_in">dfs</span>(v.to, u, anc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(flag[u] || e[u].<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>, now = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v.to != ff) ++cnt, <span class="built_in">solve</span>(v.to, u), now += flag[v.to];</span><br><span class="line">	<span class="keyword">if</span>(cnt == now) flag[u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	la = lb = <span class="number">0</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, n) flag[i] = <span class="number">0</span>, hv[i].<span class="built_in">clear</span>(); st.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">if</span>(cnt[<span class="number">1</span>]) &#123; <span class="built_in">rep</span>(i, <span class="number">1</span>, cnt[<span class="number">1</span>]) a[++la] = x; &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) <span class="keyword">if</span>(cnt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(depw[i] &lt;= x)</span><br><span class="line">			<span class="built_in">rep</span>(j, <span class="number">1</span>, cnt[i]) &#123;</span><br><span class="line">				<span class="keyword">if</span>(depw[fr[i]] &lt;= x - depw[i]) a[++la] = x - depw[i];</span><br><span class="line">				<span class="keyword">else</span> hv[fr[i]].<span class="built_in">pb</span>(x - depw[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> anc = i; ll tmp = x;</span><br><span class="line">			<span class="built_in">per</span>(j, <span class="number">18</span>, <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">if</span>(fa[j][anc] &amp;&amp; depw[anc] - depw[fa[j][anc]] &lt;= tmp)</span><br><span class="line">					tmp -= depw[anc] - depw[fa[j][anc]], anc = fa[j][anc];</span><br><span class="line">			flag[anc] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[<span class="number">1</span>]) &#123;</span><br><span class="line">		<span class="built_in">solve</span>(v.to, <span class="number">1</span>), <span class="built_in">sort</span>(hv[v.to].<span class="built_in">begin</span>(), hv[v.to].<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;ll&gt;());</span><br><span class="line">		<span class="keyword">if</span>(!flag[v.to]) &#123;</span><br><span class="line">			multiset&lt;ll&gt;::iterator it = st.<span class="built_in">lower_bound</span>(v.w);</span><br><span class="line">			<span class="keyword">if</span>(it != st.<span class="built_in">end</span>() &amp;&amp; (!hv[v.to].<span class="built_in">size</span>() || *it &lt;= hv[v.to].<span class="built_in">back</span>()))</span><br><span class="line">				st.<span class="built_in">erase</span>(it), flag[v.to] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(hv[v.to].<span class="built_in">size</span>()) hv[v.to].<span class="built_in">pop_back</span>(), flag[v.to] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i : hv[v.to]) st.<span class="built_in">insert</span>(i); <span class="keyword">if</span>(!flag[v.to]) b[++lb] = v.w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + la + <span class="number">1</span>), <span class="built_in">sort</span>(b + <span class="number">1</span>, b + lb + <span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> p1 = <span class="number">1</span>, p2 = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(; p1 &lt;= la &amp;&amp; p2 &lt;= lb; ++p1, ++p2) &#123;</span><br><span class="line">		<span class="keyword">for</span>(; p1 &lt;= la &amp;&amp; a[p1] &lt; b[p2]; ++p1);</span><br><span class="line">		<span class="keyword">if</span>(p1 &gt; la) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p2 &gt; lb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y, z; <span class="built_in">gi</span>(x), <span class="built_in">gi</span>(y), <span class="built_in">gi</span>(z), e[x].<span class="built_in">pb</span>(<span class="built_in">P</span>(y, z)), e[y].<span class="built_in">pb</span>(<span class="built_in">P</span>(x, z)); &#125;</span><br><span class="line">	<span class="built_in">sort</span>(e[<span class="number">1</span>].<span class="built_in">begin</span>(), e[<span class="number">1</span>].<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">gi</span>(m); <span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123; <span class="type">int</span> x; <span class="built_in">gi</span>(x), ++cnt[x]; &#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	ll l = <span class="number">0</span>, r = <span class="number">1e16</span>, mid;</span><br><span class="line">	<span class="keyword">for</span>(; l &lt;= r;) mid = (l + r) / <span class="number">2</span>, <span class="built_in">check</span>(mid) ? (ans = mid, r = mid - <span class="number">1</span>) : l = mid + <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>【ZJOI2012】小蓝的好友</title>
    <url>/2025/07/27/ZJOI2012-xiao-lan-de-hao-you/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problemnew/show/P2611">【ZJOI2012】小蓝的好友</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>至少包含一个点的矩阵数等于总矩阵数减去不包含任意一个点的矩阵数。<br>考虑将点按照纵坐标排序，进行类似扫描线的操作。每一列有用的点是最靠近当前行的点，记录它们的纵坐标。如果这一层存在一段长度为 $ s $ 不包含点，则它对答案的贡献为 $ \frac{(s + 1) \times s}{2} $ ；如果是纵坐标上一段都满足，那就再乘上纵坐标上的长度。<br>维护一个 $ Treap $ ，$ value $ 值中序遍历表示横坐标的一段，$ key $ 值表示横坐标为该值时纵坐标的最大值。每次一些节点 $ key $ 值会变大，然后用 $ splay $ 的方式旋转满足 $ Treap $ 的性质，同时维护答案。<br>由于数据随机，所以复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">400010</span>;</span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line">ll ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="type">int</span> ch[<span class="number">2</span>][N], sz[N], dep[N], fa[N], tot, rt; ll val[N];</span><br><span class="line"><span class="type">int</span> sta[N], top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) <span class="keyword">return</span> ;</span><br><span class="line">	sz[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(ch[<span class="number">0</span>][u]) sz[u] += sz[ch[<span class="number">0</span>][u]]; <span class="keyword">if</span>(ch[<span class="number">1</span>][u]) sz[u] += sz[ch[<span class="number">1</span>][u]];</span><br><span class="line">	sum -= val[u];</span><br><span class="line">	val[u] = (ll)sz[u] * (sz[u] + <span class="number">1</span>) / <span class="number">2</span> * (dep[fa[u]] - dep[u]);</span><br><span class="line">	sum += val[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> ff, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	u = (l + r) &gt;&gt; <span class="number">1</span>, fa[u] = ff;</span><br><span class="line">	<span class="keyword">if</span>(l &lt; u) <span class="built_in">build</span>(ch[<span class="number">0</span>][u], u, l, u - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(u &lt; r) <span class="built_in">build</span>(ch[<span class="number">1</span>][u], u, u + <span class="number">1</span>, r);</span><br><span class="line">	<span class="built_in">update</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	top = <span class="number">0</span>, dep[u] = tot;</span><br><span class="line">	<span class="keyword">for</span>(; dep[u] &gt; dep[fa[u]];) &#123;</span><br><span class="line">		<span class="type">int</span> y = fa[u], z = fa[y], k = ch[<span class="number">1</span>][y] == u, w = ch[k ^ <span class="number">1</span>][u];</span><br><span class="line">		ch[ch[<span class="number">1</span>][z] == y][z] = u; ch[k][y] = w, ch[k ^ <span class="number">1</span>][u] = y;</span><br><span class="line">		fa[w] = y; fa[u] = z, fa[y] = u;</span><br><span class="line">		sta[++top] = y;</span><br><span class="line">	&#125;</span><br><span class="line">	sta[++top] = u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= top; i++) &#123;</span><br><span class="line">		<span class="built_in">update</span>(sta[i]);</span><br><span class="line">		<span class="keyword">if</span>(ch[<span class="number">0</span>][sta[i]]) <span class="built_in">update</span>(ch[<span class="number">0</span>][sta[i]]);</span><br><span class="line">		<span class="keyword">if</span>(ch[<span class="number">1</span>][sta[i]]) <span class="built_in">update</span>(ch[<span class="number">1</span>][sta[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q), <span class="built_in">build</span>(ch[<span class="number">1</span>][rt], <span class="number">0</span>, <span class="number">1</span>, m);</span><br><span class="line">	ans = (ll)n * (n + <span class="number">1</span>) / <span class="number">2</span> * m * (m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= q; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		++tot, ++dep[rt];</span><br><span class="line">		<span class="keyword">if</span>(ch[<span class="number">0</span>][rt]) <span class="built_in">update</span>(ch[<span class="number">0</span>][rt]); <span class="keyword">if</span>(ch[<span class="number">1</span>][rt]) <span class="built_in">update</span>(ch[<span class="number">1</span>][rt]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; e[i].<span class="built_in">size</span>(); j++) <span class="built_in">insert</span>(e[i][j]);</span><br><span class="line">		ans -= sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>笛卡尔树</tag>
      </tags>
  </entry>
  <entry>
    <title>「THUPC 2017」小 L 的计算题</title>
    <url>/2025/07/27/THUPC-2017-xiao-L-de-ji-suan-ti/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2409">「THUPC 2017」小 L 的计算题」PATH</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$$<br>f(k) &#x3D; \sum_k (\sum_{i &#x3D; 1}^{n} a_i^k) x^k\\<br> &#x3D; \sum_k \sum_{i &#x3D; 1}^{n} (a_ix)^k\\<br> &#x3D; \sum_{i &#x3D; 1}^{n} \sum_k (a_ix)^k\\<br> &#x3D; \sum_{i &#x3D; 1}^{n} \frac{1}{1 - a_ix}\\<br> &#x3D; \sum_{i &#x3D; 1}^{n} (1 - \frac{-a_ix}{1-a_ix})\\<br> &#x3D; n - \sum_{i &#x3D; 1}^{n} \frac{-a_ix}{1-a_ix}\\<br> &#x3D; n - x \sum_{i &#x3D; 1}^{n} \ln’(1 - a_ix)\\<br> &#x3D; n - x \ln’(\prod_{i &#x3D; 1}^{n} (1 - a_ix))<br>$$</p>
<p>分治FFT + 多项式求 Ln 即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> w = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="built_in">mul</span>(w, x); <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> w = <span class="number">1</span>; <span class="keyword">for</span>(; w &lt;= x; w &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> w; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; mid; i++) w[i] = <span class="built_in">mul</span>(w[i - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> mu = <span class="built_in">ksm</span>(lmt), i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], mu);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = a.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(a[<span class="number">0</span>])), res;</span><br><span class="line">		res = <span class="built_in">Inv</span>(a, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(a.begin(), a.begin() + sz)</span></span>;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ln</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; f, g = <span class="built_in">Inv</span>(a); f.<span class="built_in">resize</span>(a.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; f.<span class="built_in">size</span>(); i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, a[i]);</span><br><span class="line">		f[f.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="number">0</span>, f = <span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(a.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = f.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) f[i] = <span class="built_in">mul</span>(f[i - <span class="number">1</span>], <span class="built_in">ksm</span>(i));</span><br><span class="line">		f[<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> f;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> T, n, a[N], ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f, g;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res.<span class="built_in">pb</span>(<span class="built_in">sub</span>(<span class="number">0</span>, a[l])), res;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="keyword">return</span> Poly::<span class="built_in">Mul</span>(<span class="built_in">solve</span>(l, mid), <span class="built_in">solve</span>(mid + <span class="number">1</span>, r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T); T; --T) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); <span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] %= mod;</span><br><span class="line">		f = Poly::<span class="built_in">Ln</span>(<span class="built_in">solve</span>(<span class="number">1</span>, n));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, ed = f.<span class="built_in">size</span>(); i &lt; ed; i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, f[i]);</span><br><span class="line">		<span class="built_in">per</span>(i, n, <span class="number">1</span>) f[i] = f[i - <span class="number">1</span>];</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">0</span>, n) f[i] = <span class="built_in">sub</span>(<span class="number">0</span>, f[i]);</span><br><span class="line">		f[<span class="number">0</span>] = <span class="built_in">add</span>(f[<span class="number">0</span>], n), ans = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, n) ans ^= f[i]; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>【UOJ401】【CTSC2018】青蕈领主</title>
    <url>/2025/07/27/UOJ401-CTSC2018-qing-gao-ling-zhu/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://uoj.ac/problem/401">【UOJ401】【CTSC2018】青蕈领主</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>参考自<a href="http://www.cnblogs.com/CHNJZ/p/10554019.html">这篇文章</a>。<br>最长连续序列不能相交，那么只有包含关系。<br>那么我们可以根据区间的包含关系建出一棵以 $ n $ 为根的树，用 $ dis[i] $ 表示节点 $ i $ 的儿子个数。<br>因为连续的区间可以看成一个点，所以每个节点的贡献可以分别考虑。<br>设 $ f[i] $ 为长度为 $ i $ 且有多少个长度为 $ i + 1 $ 的连续序列，删去最大数后不存在长度超过 $ 1 $ 的连续序列，答案为 $ \prod { f[dis[i]] } $ 。<br>若 $ f[i] $ 如果从合法方案转来，只要最后一个数不等于 $ i $ 即可，方案数为 $ (i − 1) \times f[i − 1] $ 。<br>否则，那么不满足的区间只有有一个，长度设为 $ l $ ，把最大值插入形成合法区间的方案数为 $ f[l] $ ,把插入后的区间看成一个点，与剩下的点的方案数为 $ f[i − l] $ ；若要保证有解，那么这个区间的范围一定在 $ [2,i − l] $ ，所以得到：<br>$$ f[i] &#x3D; (i - 1) \times f[i - 1] + \sum_{l &#x3D; 2}^{i - 2}{(i - l - 1) \times f[i]f[i - l]} $$<br>分治 $ FFT $ 即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, ilmt = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++)</span><br><span class="line">				A[i] = <span class="built_in">mul</span>(A[i], ilmt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>), B.<span class="built_in">resize</span>(lmt + <span class="number">5</span>), <span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>;</span><br><span class="line"><span class="type">int</span> T, n;</span><br><span class="line"><span class="type">int</span> a[N], dis[N], sta[N], top = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">		<span class="keyword">if</span>(l == <span class="number">2</span>) f[l] = <span class="number">2</span>; <span class="keyword">else</span> f[l] = <span class="built_in">add</span>(f[l], <span class="built_in">mul</span>(l - <span class="number">1</span>, f[l - <span class="number">1</span>]));</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; G, F; <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">cdq</span>(l, mid);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= r - l + <span class="number">1</span>; i++) F.<span class="built_in">pb</span>(f[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= r - l + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">if</span>(i + l &lt;= mid) G.<span class="built_in">pb</span>(<span class="built_in">mul</span>(f[i + l], i + l - <span class="number">1</span>));</span><br><span class="line">	F = Poly::<span class="built_in">Mul</span>(F, G);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= r; i++) f[i] = <span class="built_in">add</span>(f[i], F[i - l]);</span><br><span class="line">	<span class="keyword">if</span>(l != <span class="number">2</span>) &#123;</span><br><span class="line">		F.<span class="built_in">clear</span>(), G.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= r - l + <span class="number">1</span>; i++) <span class="keyword">if</span>(i + l &lt;= mid) F.<span class="built_in">pb</span>(f[i + l]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= r - l + <span class="number">1</span>; i++)</span><br><span class="line">			<span class="keyword">if</span>(i &lt;= r - l) G.<span class="built_in">pb</span>(<span class="built_in">mul</span>(f[i], i - <span class="number">1</span>));</span><br><span class="line">		F = Poly::<span class="built_in">Mul</span>(F, G);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= r; i++) f[i] = <span class="built_in">add</span>(f[i], F[i - l]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cdq</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), dis[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[n] != n) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">1</span>; top = <span class="number">1</span>, sta[<span class="number">1</span>] = n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i; i--) &#123;</span><br><span class="line">		<span class="keyword">for</span>(; i &lt; sta[top] - a[sta[top]] + <span class="number">1</span>; --top);</span><br><span class="line">		<span class="keyword">if</span>(i - a[i] &lt; sta[top] - a[sta[top]]) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> ; &#125;</span><br><span class="line">		++dis[sta[top]], sta[++top] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = <span class="built_in">mul</span>(ans, f[dis[i]]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans); <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;T, &amp;n), f.<span class="built_in">resize</span>(n + <span class="number">1</span>), <span class="built_in">cdq</span>(<span class="number">2</span>, n - <span class="number">1</span>), f[<span class="number">0</span>] = <span class="number">1</span>, f[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(; T; --T) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>SAM练习题</title>
    <url>/2025/07/27/SAM-lian-xi-ti/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="常用结论："><a href="#常用结论：" class="headerlink" title="常用结论："></a>常用结论：</h3><ol>
<li>字符串border排序后可以分成O(log|s|)段，每段是一个等差数列。  </li>
<li>后缀树的 $ parent $ 树是原串反串的后缀树。</li>
</ol>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SAM</span> &#123;</span><br><span class="line">	<span class="type">int</span> ch[<span class="number">26</span>][N + N], fa[N + N], len[N + N], lst, sz, f[N + N];</span><br><span class="line">	<span class="type">int</span> sa[N + N], tex[N + N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) &#123;</span><br><span class="line">			fa[i] = len[i] = <span class="number">0</span>; <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; <span class="number">26</span>; j++) ch[j][i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		lst = sz = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> p = lst, np = ++sz; lst = np, len[np] = len[p] + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; !ch[c][p]; p = fa[p]) ch[c][p] = np;</span><br><span class="line">		<span class="keyword">if</span>(!p) fa[np] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> q = ch[c][p]; <span class="keyword">if</span>(len[q] == len[p] + <span class="number">1</span>) fa[np] = q;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="type">int</span> nq = ++sz;</span><br><span class="line">				len[nq] = len[p] + <span class="number">1</span>, fa[nq] = fa[q], fa[q] = fa[np] = nq;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) ch[i][nq] = ch[i][q];</span><br><span class="line">				<span class="keyword">for</span>(; ch[c][p] == q; p = fa[p]) ch[c][p] = nq;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) ++tex[len[i]];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) tex[i] += tex[i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) sa[tex[len[i]]--] = i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = sz, u; i; i--) u = sa[i], rt[fa[u]] = <span class="built_in">merge</span>(rt[fa[u]], rt[u]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><h4 id="模板-后缀自动机"><a href="#模板-后缀自动机" class="headerlink" title="模板 后缀自动机"></a>模板 后缀自动机</h4><p><a href="https://www.luogu.org/problemnew/show/P3804"> 模板 后缀自动机</a><br>题意：给定一个只包含小写字母的字符串 $ S $ , 请你求出 $ S $ 的所有出现次数不为 $ 1 $ 的子串的出现次数乘上该子串长度的最大值。<br>做法：建后缀自动机，定义每个节点 $ sz[i] &#x3D; 1 $，将所有串的拓扑序得到，从后往前枚举，每次 $ sz[fa[u]] +&#x3D; sz[u], ans &#x3D; Max(ans, len[u] * sz[u]) $。  </p>
<hr>
<h4 id="TJOI2015-弦论"><a href="#TJOI2015-弦论" class="headerlink" title="TJOI2015 弦论"></a>TJOI2015 弦论</h4><p><a href="https://www.luogu.org/problemnew/show/P3975">TJOI2015 弦论</a><br>题意：对于一个给定的长度为 $ n $ 的字符串,求出它的第k小子串是什么。<br>做法：建后缀自动机，定义每个节点 $ sz[i] &#x3D; 1 $，将所有串的拓扑序得到，从后往前枚举，每次 $ sz[fa[u]] +&#x3D; sz[u] (t &#x3D; 1), sz[u] &#x3D; 1 (t &#x3D; 0) $，再从前往后，每次 $ for (j; 0; 26) sum[u] +&#x3D; sum[ch[u][j]] $ ，从根节点按字典序 $ dfs $ ，得到答案。  </p>
<hr>
<h4 id="AHOI2013-差异"><a href="#AHOI2013-差异" class="headerlink" title="AHOI2013 差异"></a>AHOI2013 差异</h4><p><a href="https://www.luogu.org/problemnew/show/P4248">AHOI2013 差异</a><br>题意请看链接。<br>做法：求两个后缀的最长公共前缀，显然就是两个后缀的节点在 $ Parent $ 树上的 $ LCA $ 。以 $ p $ 为儿子的边的边权为 $ len[p]-len[fa[p]] $ ，我们考虑一条边对答案的贡献，显然就是有 $ sz[p] \times (n - sz[p] ) $ 条路径经过这条边，乘上边权加入答案即可。  </p>
<hr>
<h4 id="USACO17DEC-Standing-Out-from-the-Herd"><a href="#USACO17DEC-Standing-Out-from-the-Herd" class="headerlink" title="USACO17DEC Standing Out from the Herd"></a>USACO17DEC Standing Out from the Herd</h4><p><a href="https://www.luogu.org/problemnew/show/P4081">USACO17DEC Standing Out from the Herd</a><br>题意见链接。<br>做法：建出广义后缀自动机，再将每一个字符串每一个位置插入后缀自动机（节点权值加一），最后后缀自动机节点权值为一的点为独特点，它的贡献为它在 $ parent $ 树上的深度减去它的父亲在 $ parent $ 树上的深度。  </p>
<hr>
<h4 id="SCOI2012-喵星球上的点名"><a href="#SCOI2012-喵星球上的点名" class="headerlink" title="SCOI2012 喵星球上的点名"></a>SCOI2012 喵星球上的点名</h4><p><a href="https://www.luogu.org/problemnew/show/P2336">SCOI2012 喵星球上的点名</a><br>建出广义后缀自动机，建出 $ parent $ 树，显然一个串的贡献为它在 $ parent $ 树的子树大小。然后可以莫队处理。  </p>
<hr>
<h4 id="LCS-Longest-Common-Substring"><a href="#LCS-Longest-Common-Substring" class="headerlink" title="LCS - Longest Common Substring"></a>LCS - Longest Common Substring</h4><p><a href="https://www.luogu.org/problemnew/show/SP1811">LCS - Longest Common Substring</a><br>题意：给定两个字符串，求出它们的最长公共子串。<br>做法：给其中一个串建后缀自动机，另一个串分别与其匹配，再过程中对 $ len[u] $ 取 $ Max $ 即可。  </p>
<hr>
<h4 id="ZJOI2015-诸神眷顾的幻想乡"><a href="#ZJOI2015-诸神眷顾的幻想乡" class="headerlink" title="ZJOI2015 诸神眷顾的幻想乡"></a>ZJOI2015 诸神眷顾的幻想乡</h4><p><a href="https://www.luogu.org/problemnew/show/P3346"> ZJOI2015 诸神眷顾的幻想乡</a><br>题意：给出一个字母树，任何一条从叶子开始的有向路径为一个字符串，询问不同的字符串个数。<br>做法：将每个叶子节点定位根 $ dfs $ ，建广义后缀自动机，对于每个节点，对答案的贡献为 $ len[u] - len[fa[u]] $。  </p>
<hr>
<h4 id="CF235C-Cyclical-Quest"><a href="#CF235C-Cyclical-Quest" class="headerlink" title="CF235C Cyclical Quest"></a>CF235C Cyclical Quest</h4><p><a href="http://codeforces.com/problemset/problem/235/C">CF235C Cyclical Quest</a><br>题意：给一个主串和多个询问串，求询问串的所有样子不同的周期同构出现次数和。<br>做法：给主串建后缀自动机，拓扑排序计算主串的某个子串出现次数。对于每个询问，将询问串倍长（最后一个串不复制），然后在自动机上跑，若匹配长度大于等于原询问串长度且是为访问过的状态，则答案加上该子串出现次数。  </p>
<hr>
<h4 id="LCS2-Longest-Common-Substring-II"><a href="#LCS2-Longest-Common-Substring-II" class="headerlink" title="LCS2 - Longest Common Substring II"></a>LCS2 - Longest Common Substring II</h4><p><a href="https://www.spoj.com/problems/LCS2/">LCS2 - Longest Common Substring II</a><br>题意：给定一些字符串，求出它们的最长公共子串。<br>做法：给其中一个串建后缀自动机，其他串分别与其匹配，记录自动机上每个节点能匹配的最长长度，取 $ Max $ 即可。  </p>
<hr>
<h4 id="SDOI2016-生成魔咒"><a href="#SDOI2016-生成魔咒" class="headerlink" title="SDOI2016 生成魔咒"></a>SDOI2016 生成魔咒</h4><p><a href="https://www.luogu.org/problemnew/show/P4070"> SDOI2016 生成魔咒</a><br>题意：每次再字符串末尾新加入一个字符（数字），并求当前字符串中本质不同的字串的的个数。<br>做法：考虑建 $ SAM $ 的过程是在线的，每次增加的贡献为 $len[np] - len[fa[np]]$。  </p>
<hr>
<h4 id="NOI2015-品酒大会"><a href="#NOI2015-品酒大会" class="headerlink" title="NOI2015 品酒大会"></a>NOI2015 品酒大会</h4><p><a href="https://www.luogu.org/problemnew/show/P2178"> NOI2015 品酒大会</a><br><a href="http://uoj.ac/problem/131">强力的HACK数据</a>  </p>
<p>题意： $ \forall i \in [0, n) $ ，求有多少对后缀满足 $ len(lcp) \geq i $ ， 并求出两个后缀的权值乘积的最大值。<br>做法：将串倒着建后缀自动机，使 $ lcs $ 变成 $ lcp $ ，然后构造 $ parent $ 树，便可以从孩子里得到信息，计数问题转移显然。由于数据存在负数，所以可能负负得正得到最优解。记录一个节点子树中最大值、最小值、次大值、次小值，然后转移。当然还有许多细节（交UOJ就知道了）。  </p>
<hr>
<h4 id="「雅礼集训-2017-Day7」事情的相似度"><a href="#「雅礼集训-2017-Day7」事情的相似度" class="headerlink" title="「雅礼集训 2017 Day7」事情的相似度"></a>「雅礼集训 2017 Day7」事情的相似度</h4><p><a href="https://loj.ac/problem/6041">「雅礼集训 2017 Day7」事情的相似度</a><br>题意：给你一个长度为 $ n $ 的01串，$ m $ 次询问，每次询问给出 $ l $ 、$ r $ ，求从 $ [l,r] $ 中选出两个不同的前缀的最长公共后缀长度的最大值。 $ n,m \leq 10^5 $<br>做法：建后缀自动机，那么任意两个前缀的最长公共后缀即为parent树上的LCA深度。将询问离线，按右端点排序，每次加入一个前缀，就将他们在parent树上到根节点的路径打上他们的标记。access时，若遇到了以前打的标记，则该节点为旧标记与新标记的lca。将贡献计入树状数组（维护前缀最大值）并将旧覆盖。  </p>
<hr>
<h4 id="「雅礼集训-2017-Day1」字符串"><a href="#「雅礼集训-2017-Day1」字符串" class="headerlink" title="「雅礼集训 2017 Day1」字符串"></a>「雅礼集训 2017 Day1」字符串</h4><p><a href="https://loj.ac/problem/6031">「雅礼集训 2017 Day1」字符串</a><br>题意：先给你一个模式串，然后再给出若干个询问区间（即接下来询问的子串位置）。接着有q次询问，给出若干个相同长度的字符串以及l, r，让你分别求出第l个询问区间到第r个询问区间在模式串中出现次数之和（下标从0开始计算）。<br>做法：<br>显然的暴力做法是将模式串建后缀自动机后询问无脑匹配。<br>然后这道题很奇怪的一点是询问次数乘上询问串长度不大于100000。<br>假如询问串长度比较小，就用一个二维动态数组存储询问串下标确定时有哪些询问区间编号。每次询问枚举询问串左右下标在自动机上跑判断是否合法，然后在用lower_bound找出用到的询问区间个数，然后询问串长度不大于 $ \sqrt {100000} $ 的就过了，实测至少60分。<br>假如询问很少，我们就对每个询问串，在自动机上跑，预处理每个节点在parent树上的位置及能往前匹配的最长长度，然后暴力枚举用到的询问区间，先判断合法，然后在倍增到这个询问区间的长度，然后就过了。<br>话说这道题可以拆成两部分的性质真的不太明显。</p>
<hr>
]]></content>
      <tags>
        <tag>字符串</tag>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>「ZJOI2015」幻想乡战略游戏</title>
    <url>/2025/07/27/ZJOI2015-huan-xiang-xiang-zhan-lue-you-xi/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2135">「ZJOI2015」幻想乡战略游戏</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>原问题实则为动态求带权重心问题。设每个点的花费为 $ W_i $ ， 从任意非带权重心一点出发，每次向相邻的点中 $ W_v $ 最小的走，最后会走到带权重心。<br>如果已知 $ W_u $ ，求 $ u $ 的子节点 $ v $ 的 $ W_v $ 。设 $ len(u, v) $ 为 $ u, v $ 间的距离， $ cnt_u $ 为 $ u $ 子树内的军队单位数，则 $ W_v &#x3D; W_u + len(u, v)(cnt_u - cnt_v \times 2) $ 。<br>考虑用点分治加速计算 $ W_u $ 并加速求解。每次向点分树子节点中存在比当前分治重心更优秀的点的子树跳，跳的过程复杂度 $ O(q \log n) $ 。<br>每次每个节点求 $ W_u $ 时间为 $ O(\log n) $ ，总时间复杂度为 $ O(n \log n + q \log^2 n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, m, lg[N];</span><br><span class="line">vector&lt;pii&gt; e[N], E[N];</span><br><span class="line"><span class="type">int</span> dfn[N], dep[N], idx = <span class="number">0</span>, st[<span class="number">18</span>][N]; ll Dep[N];</span><br><span class="line"><span class="type">int</span> sz[N], mx[N], root, size, rt;</span><br><span class="line"><span class="type">bool</span> vis[N]; <span class="type">int</span> fa[N];</span><br><span class="line"><span class="type">int</span> id[N]; ll sum[N], cnt[N];</span><br><span class="line">ll dn[N], up[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	x = dfn[x], y = dfn[y]; <span class="keyword">if</span>(x &gt; y) <span class="built_in">swap</span>(x, y); <span class="type">int</span> k = y - x + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> dep[st[lg[k]][x]] &lt;= dep[st[lg[k]][y - (<span class="number">1</span> &lt;&lt; lg[k]) + <span class="number">1</span>]] ? st[lg[k]][x] : st[lg[k]][y - (<span class="number">1</span> &lt;&lt; lg[k]) + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dis</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> Dep[x] + Dep[y] - Dep[<span class="built_in">LCA</span>(x, y)] * <span class="number">2</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	dep[u] = dep[ff] + <span class="number">1</span>, dfn[u] = ++idx, st[<span class="number">0</span>][idx] = u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v.fst != ff) Dep[v.fst] = Dep[u] + v.snd, <span class="built_in">dfs1</span>(v.fst, u), st[<span class="number">0</span>][++idx] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getrt</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	sz[u] = <span class="number">1</span>, mx[u] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v.fst != ff &amp;&amp; !vis[v.fst])</span><br><span class="line">		<span class="built_in">getrt</span>(v.fst, u), sz[u] += sz[v.fst], mx[u] = <span class="built_in">max</span>(mx[u], sz[v.fst]);</span><br><span class="line">	mx[u] = <span class="built_in">max</span>(mx[u], size - sz[u]); <span class="keyword">if</span>(mx[u] &lt; mx[root]) root = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">getrt</span>(u, <span class="number">0</span>), vis[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(!vis[v.fst]) &#123;</span><br><span class="line">		mx[root = <span class="number">0</span>] = size = sz[v.fst], <span class="built_in">getrt</span>(v.fst, <span class="number">0</span>);</span><br><span class="line">		E[u].<span class="built_in">pb</span>(<span class="built_in">mp</span>(root, v.fst)), fa[root] = u, <span class="built_in">build</span>(root);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), lg[<span class="number">0</span>] = <span class="number">-1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, idx) lg[i] = lg[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(j, <span class="number">1</span>, <span class="number">17</span>)</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, idx - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>)</span><br><span class="line">			st[j][i] = dep[st[j - <span class="number">1</span>][i]] &lt;= dep[st[j - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)]] ? st[j - <span class="number">1</span>][i] : st[j - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)];</span><br><span class="line">	mx[root = <span class="number">0</span>] = size = n, <span class="built_in">getrt</span>(<span class="number">1</span>, <span class="number">0</span>), rt = root, <span class="built_in">build</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	cnt[x] += w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x; fa[i]; i = fa[i]) &#123;</span><br><span class="line">		ll dis = <span class="built_in">Dis</span>(fa[i], x); dn[fa[i]] += dis * w, up[i] += dis * w, cnt[fa[i]] += w;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	ll res = dn[x];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x; fa[i]; i = fa[i]) &#123;</span><br><span class="line">		ll dis = <span class="built_in">Dis</span>(fa[i], x); res += dn[fa[i]] - up[i] + dis * (cnt[fa[i]] - cnt[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qry</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	ll res = <span class="built_in">calc</span>(x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : E[x]) <span class="keyword">if</span>(<span class="built_in">calc</span>(v.snd) &lt; res) <span class="keyword">return</span> <span class="built_in">qry</span>(v.fst);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y, z; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z), e[x].<span class="built_in">pb</span>(<span class="built_in">mp</span>(y, z)), e[y].<span class="built_in">pb</span>(<span class="built_in">mp</span>(x, z)); &#125;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x, y; m; --m) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), <span class="built_in">mdy</span>(x, y), <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">qry</span>(rt));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title>「SHOI2016」成绩比较</title>
    <url>/2025/07/27/SHOI2016-cheng-ji-bi-jiao/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2026">「SHOI2016」成绩比较</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>设 $ val_i $ 表示第 $ i $ 门课分数分配的方案数。<br>$ f_{i, j} $ 表示前 i 门课 B神 吊打 j 人的方案数。  </p>
<p>$$<br>f_{i, j} &#x3D; \sum_{i &#x3D; j}^{n} f_{i - 1, k} \binom{k}{j}\binom{n - k - 1}{rank_i - 1 - (k - j)}val_i<br>$$</p>
<p>即从原来吊打 k 个人减为 j 个人（k 里选 j 个），再从剩下的人中选一些排在他前面。  </p>
<p>$$<br>val_i &#x3D; \sum_{j &#x3D; 1}^{mx_i} j^{n - rank_i}(mx_i - j)^{rank_i - 1}<br>$$</p>
<p><del>感性理解</del>发现这个式子可以被描述成关于 $ mx_i $ 的 n 次多项式。<br>拉格朗日插值即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, mx[N], rnk[N], pw[N][N];</span><br><span class="line"><span class="type">int</span> f[N][N], c[N][N];</span><br><span class="line"><span class="type">int</span> val[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &lt; y) ? <span class="number">0</span> : c[x][y]; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> w = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="number">1ll</span> * x * x % mod) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="number">1ll</span> * x * w % mod; <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(mx[x] &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, mx[x]) res = (res + <span class="number">1ll</span> * pw[i][n - rnk[x]] * pw[mx[x] - i][rnk[x] - <span class="number">1</span>]) % mod;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line">		val[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, i) val[i] = (val[i] + <span class="number">1ll</span> * pw[j][n - rnk[x]] * pw[i - j][rnk[x] - <span class="number">1</span>]) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="type">int</span> mu1 = <span class="number">1</span>, mu2 = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n + <span class="number">1</span>) <span class="keyword">if</span>(j != i) &#123;</span><br><span class="line">			mu1 = <span class="number">1ll</span> * mu1 * (mod + mx[x] - j) % mod;</span><br><span class="line">			mu2 = <span class="number">1ll</span> * mu2 * (mod + i - j) % mod;</span><br><span class="line">		&#125;</span><br><span class="line">		res = (res + <span class="number">1ll</span> * mu1 * <span class="built_in">ksm</span>(mu2) % mod * val[i]) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	c[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">200</span>) &#123; c[i][<span class="number">0</span>] = <span class="number">1</span>; <span class="built_in">rep</span>(j, <span class="number">1</span>, i) c[i][j] = (c[i - <span class="number">1</span>][j - <span class="number">1</span>] + c[i - <span class="number">1</span>][j]) % mod; &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, <span class="number">200</span>) &#123; pw[i][<span class="number">0</span>] = <span class="number">1</span>; <span class="built_in">rep</span>(j, <span class="number">1</span>, <span class="number">200</span>) pw[i][j] = <span class="number">1ll</span> * pw[i][j - <span class="number">1</span>] * i % mod; &#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;mx[i]);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;rnk[i]);</span><br><span class="line">	f[<span class="number">0</span>][n - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">		<span class="type">int</span> mu = <span class="built_in">solve</span>(i);</span><br><span class="line">		<span class="built_in">rep</span>(j, k, n - <span class="number">1</span>) <span class="built_in">rep</span>(k, j, n - <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="type">int</span> w = <span class="number">1ll</span> * <span class="built_in">C</span>(k, j) * <span class="built_in">C</span>(n - k - <span class="number">1</span>, rnk[i] - <span class="number">1</span> - (k - j)) % mod * f[i - <span class="number">1</span>][k] % mod;</span><br><span class="line">			f[i][j] = (f[i][j] + <span class="number">1ll</span> * mu * w) % mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[m][k]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
        <tag>插值</tag>
      </tags>
  </entry>
  <entry>
    <title>一句（dui）话题解2</title>
    <url>/2025/07/27/a-solution-to-a-question2/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />
    <label for="pass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>口胡</tag>
      </tags>
  </entry>
  <entry>
    <title>常系数齐次线性递推</title>
    <url>/2025/07/27/chang-xi-shu-qi-ci-xian-xing-di-tui/</url>
    <content><![CDATA[<span id="more"></span>  

<p>建议学习：<a href="https://www.bilibili.com/video/av6731067">&gt; here &lt;</a>  </p>
<p>一个线性变换会使一个向量在方向上发生偏移，但是如果能找到变换后方向不会发生偏移的向量，将其当作基向量，就可以快速计算递推式的任意项。<br>将这种基向量称作特征向量 $ \vec{v} $ ，每次变换后伸长或缩短的倍数称作特征值 $ \lambda $ ，转移矩阵为$ A $，其中 $ A $ 有 $ n $ 列（转移长度为 $ n $）。<br>于是：<br>$$<br>A \vec{v} &#x3D; \lambda \vec{v}\\<br>(\lambda I - A) \vec{v} &#x3D; 0<br>$$</p>
<p>其中 $ \vec{v} $ 取零向量是无意义的。<br>若要使 $ \vec{v} $ 为非零解，则 $ \det(\lambda I - A) &#x3D; 0 $ ，即将空间降维。<br>其中 $ \det(\lambda I - A) &#x3D; 0 $ 是次数为 $ A $ 的列数的特征多项式 $ f(\lambda) $ 。<br>根据<strong>Cayley-Hamilton定理</strong>， $ f(A) &#x3D; 0 $ ，证明莫得<del>感兴趣的话百度一下</del>。<br>转移矩阵大概是长这样的：<br>$$<br>\begin{bmatrix}<br>a_1&amp;a_2&amp;a_3&amp;\dots&amp;a_{n-1}&amp;a_n\\<br>1  &amp;0  &amp;0  &amp;\dots&amp;0&amp;0  \\<br>0  &amp;1  &amp;0  &amp;\dots&amp;0&amp;0  \\<br>\dots&amp;\dots&amp;\dots&amp;\dots&amp;\dots&amp;\dots\\<br>0  &amp;0  &amp;0  &amp;\dots&amp;1&amp;0<br>\end{bmatrix}<br>$$</p>
<p>特征多项式是长这样的：<br>$$<br>\det(\begin{bmatrix}<br>\lambda-a_1&amp;-a_2&amp;-a_3&amp;\dots&amp;-a_{n-1}&amp;-a_n\\<br>-1  &amp;\lambda  &amp;0  &amp;\dots&amp;0&amp;0  \\<br>0  &amp;-1  &amp;\lambda  &amp;\dots&amp;0&amp;0  \\<br>\dots&amp;\dots&amp;\dots&amp;\dots&amp;\dots&amp;\dots\\<br>0  &amp;0  &amp;0  &amp;\dots&amp;-1&amp;\lambda<br>\end{bmatrix})<br>$$</p>
<p>这个东西的行列式可以手算（判断第一行选哪一个）：<br>$$<br>f(\lambda) &#x3D; \lambda^n - \sum_{i &#x3D; 1}^{n}a_i\lambda^{n-i}<br>$$</p>
<p>设初始项 $ H $，求第 $ m $ 项。<br>求 $ (A^{m} \times H)_0 $ 。  </p>
<p>$$<br>\because f(A) &#x3D; 0\\<br>\therefore A^m \bmod f(A) &#x3D; A^m<br>$$</p>
<p>直接多项式快速幂 + 多项式取模计算出 $ A^m \bmod f(A) $ 。<br>设之后得到的多项式<br>$$<br>g(A) &#x3D; \sum_{i &#x3D; 0}^{n - 1} c_i A^i<br>$$</p>
<p>最后求<br>$$<br>\sum_{i &#x3D; 0}^{n - 1} (c_{i} A^{i} H)<em>{0} &#x3D; \sum</em>{i &#x3D; 0}^{n - 1} c_{i} h_{i}<br>$$</p>
<p><del>授之以渔不如授之以鱼</del>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(A[<span class="number">0</span>])), res;</span><br><span class="line">		res = <span class="built_in">Inv</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Div</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B, vector&lt;<span class="type">int</span>&gt; &amp;D, vector&lt;<span class="type">int</span>&gt; &amp;R)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(B.<span class="built_in">size</span>() &gt; A.<span class="built_in">size</span>()) <span class="keyword">return</span> (<span class="type">void</span>)(D.<span class="built_in">clear</span>(), D.<span class="built_in">pb</span>(<span class="number">0</span>), R = A);</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; a = A, b = B, iB; <span class="type">int</span> n = A.<span class="built_in">size</span>(), m = B.<span class="built_in">size</span>();</span><br><span class="line">		<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">		b.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), iB = <span class="built_in">Inv</span>(b, n - m + <span class="number">1</span>);</span><br><span class="line">		D = <span class="built_in">Mul</span>(a, iB), D.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), <span class="built_in">reverse</span>(D.<span class="built_in">begin</span>(), D.<span class="built_in">end</span>());</span><br><span class="line">		R = <span class="built_in">Mul</span>(B, D);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) R[i] = (mod + A[i] - R[i]) % mod;</span><br><span class="line">		R.<span class="built_in">resize</span>(m);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, m, ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f, h, res, b, tmp;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; t = Poly::<span class="built_in">Mul</span>(a, b), r;</span><br><span class="line">	Poly::<span class="built_in">Div</span>(t, f, tmp, r); <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">if</span>(n &lt;= m) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">			<span class="type">int</span> x; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">			<span class="keyword">if</span>(i == n) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (x % mod + mod) % mod); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	f.<span class="built_in">resize</span>(m + <span class="number">1</span>), h.<span class="built_in">resize</span>(m), f[m] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;f[m - i]);</span><br><span class="line">		f[m - i] = ((mod - f[m - i]) % mod + mod) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, m - <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]), h[i] = (h[i] % mod + mod) % mod;</span><br><span class="line">	res.<span class="built_in">pb</span>(<span class="number">1</span>), b.<span class="built_in">pb</span>(<span class="number">0</span>), b.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>, b = <span class="built_in">Mul</span>(b, b)) <span class="keyword">if</span>(n &amp; <span class="number">1</span>) res = <span class="built_in">Mul</span>(res, b);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, m - <span class="number">1</span>) ans = (ans + <span class="number">1ll</span> * res[i] * h[i]) % mod;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>【agc023E】Inversions</title>
    <url>/2025/07/27/agc023E-Inversions/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://agc023.contest.atcoder.jp/tasks/agc023_e">【agc023E】Inversions</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p><a href="https://www.cnblogs.com/cjyyb/p/9567855.html">yyb的题解</a>  </p>
<p>考虑计算合法排列的方案数。<br>记 $ cnt[i] &#x3D; \sum [ a_j &gt;&#x3D; i ] $ ，则方案数为 $ tot &#x3D; \prod_{ i &#x3D; 1 }^{ n } (cnt[i] (n - i)) $ 。<br>意思是将数从 n 到 1 填入，对于一个数 i 有 $ cnt[i] $ 个位置可以填，其中 n - i 个位置被占了。显然当方案数为 0 时答案为 0 。  </p>
<p>存在一种比较好写的 $ O(n^2 \log n) $ 的做法。考虑枚举两个位置 $ i, j (i &lt; j) $ ，存在三种情况：  </p>
<ol>
<li>$ a_i &#x3D; a_j $ 。显然如果存在一种方案合法，则这两个位置的数对换也合法，逆序对数为总方案数的一半。  </li>
<li>$ a_i &lt; a_j $ 。显然只有 $ a_j &#x3D; a_i $ 的部分是有用的，即 $ j $ 处方案数为（总方案数 - $ a_j \in [a_i + 1, a_j] $ 的方案数）&#x2F; 2。  </li>
<li>总排列数减不合法，相当于是要求 $ p_i &lt; p_j $ 的方案数。无非是把上面的 $ i, j $ 互换了而已，计算方法还是一样的。</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>, inv2 = (mod + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], cnt[N], tot = <span class="number">1</span>, ans;</span><br><span class="line"><span class="type">int</span> tr[<span class="number">2</span>][N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123;</span><br><span class="line">		tr[<span class="number">0</span>][u] = cnt[l] - (n - l), tr[<span class="number">1</span>][u] = cnt[l] - (n - l + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(u * <span class="number">2</span>, l, mid), <span class="built_in">build</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">	tr[<span class="number">0</span>][u] = <span class="built_in">mul</span>(tr[<span class="number">0</span>][u * <span class="number">2</span>], tr[<span class="number">0</span>][u * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">	tr[<span class="number">1</span>][u] = <span class="built_in">mul</span>(tr[<span class="number">1</span>][u * <span class="number">2</span>], tr[<span class="number">1</span>][u * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> tr[w][u];</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= mid) res = <span class="built_in">mul</span>(res, <span class="built_in">ask</span>(u * <span class="number">2</span>, l, mid, L, R, w));</span><br><span class="line">	<span class="keyword">if</span>(R &gt; mid) res = <span class="built_in">mul</span>(res, <span class="built_in">ask</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, w));</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), ++cnt[a[i]];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--) cnt[i] += cnt[i + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--) tot = <span class="built_in">mul</span>(tot, <span class="built_in">sub</span>(cnt[i], n - i));</span><br><span class="line">	<span class="keyword">if</span>(!tot) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i] == a[j]) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(tot, inv2));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[i] &lt; a[j]) &#123;</span><br><span class="line">			<span class="type">int</span> ss = <span class="built_in">mul</span>(tot, <span class="built_in">ksm</span>(<span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n, a[i] + <span class="number">1</span>, a[j], <span class="number">0</span>)));</span><br><span class="line">			ss = <span class="built_in">mul</span>(ss, <span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n, a[i] + <span class="number">1</span>, a[j], <span class="number">1</span>));</span><br><span class="line">			ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(ss, inv2));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> ss = <span class="built_in">mul</span>(tot, <span class="built_in">ksm</span>(<span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n, a[j] + <span class="number">1</span>, a[i], <span class="number">0</span>)));</span><br><span class="line">			ss = <span class="built_in">mul</span>(ss, <span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n, a[j] + <span class="number">1</span>, a[i], <span class="number">1</span>));</span><br><span class="line">			ss = <span class="built_in">sub</span>(tot, <span class="built_in">mul</span>(ss, inv2)), ans = <span class="built_in">add</span>(ans, ss);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记 $ D[i] &#x3D; \frac{ cnt[j] - 1 - (n - j) }{ cnt[j] - (n - j) } $ 。那么枚举一对 $ i, j $ ，它们的贡献是<br>$$ tot \times \prod_{ k&#x3D;a_i + 1 }^{ a_j } D[k] &#x3D; tot \times \frac{ \prod_{ k &#x3D; 1 }^{ a_j }D[k] }{ \prod_{ k &#x3D; 1 }^{ a_i } D[k] } $$<br>树状数组维护前缀和即可。<br>注意下 $ D[i] $ 可能为 $ 0 $ ，所以求的时候要分段计算一下贡献就好了。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>, inv2 = (mod + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], cnt[N], tot = <span class="number">1</span>, ans;</span><br><span class="line"><span class="type">int</span> tr[<span class="number">2</span>][N], up[N], dn[N], zr[N], idn[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(; x &lt;= n; x += x &amp; -x)</span><br><span class="line">		tr[<span class="number">0</span>][x] = <span class="built_in">add</span>(tr[<span class="number">0</span>][x], w), tr[<span class="number">1</span>][x] = <span class="built_in">add</span>(tr[<span class="number">1</span>][x], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ask</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">0</span>; <span class="keyword">for</span>(; x; x -= x &amp; -x) ss = <span class="built_in">add</span>(ss, tr[w][x]); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), ++cnt[a[i]];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--) cnt[i] += cnt[i + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--)</span><br><span class="line">		tot = <span class="built_in">mul</span>(tot, <span class="built_in">sub</span>(cnt[i], n - i)), cnt[i] -= n - i;</span><br><span class="line">	<span class="keyword">if</span>(!tot) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	up[<span class="number">0</span>] = dn[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		x = <span class="built_in">mul</span>(cnt[i] - <span class="number">1</span>, <span class="built_in">ksm</span>(cnt[i]));</span><br><span class="line">		<span class="keyword">if</span>(!x) zr[i] = zr[i - <span class="number">1</span>] + <span class="number">1</span>, up[zr[i]] = i, dn[i] = dn[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">else</span> zr[i] = zr[i - <span class="number">1</span>], dn[i] = <span class="built_in">mul</span>(dn[i - <span class="number">1</span>], x);</span><br><span class="line">		idn[i] = <span class="built_in">ksm</span>(dn[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		x = <span class="built_in">sub</span>(<span class="built_in">Ask</span>(a[i], <span class="number">0</span>), <span class="built_in">Ask</span>(up[zr[a[i]]] - <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">		x = <span class="built_in">mul</span>(x, <span class="built_in">mul</span>(dn[a[i]], <span class="built_in">mul</span>(tot, inv2)));</span><br><span class="line">		ans = <span class="built_in">add</span>(ans, x);</span><br><span class="line">		<span class="built_in">Add</span>(a[i], idn[a[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) tr[<span class="number">0</span>][i] = tr[<span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n, x; i; i--) &#123;</span><br><span class="line">		x = <span class="built_in">sub</span>(<span class="built_in">Ask</span>(a[i] - <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">Ask</span>(up[zr[a[i]]] - <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">		x = <span class="built_in">mul</span>(x, <span class="built_in">mul</span>(dn[a[i]], <span class="built_in">mul</span>(tot, inv2)));</span><br><span class="line">		ans = <span class="built_in">sub</span>(ans, x);</span><br><span class="line">		ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(<span class="built_in">Ask</span>(a[i] - <span class="number">1</span>, <span class="number">1</span>), tot));</span><br><span class="line">		<span class="built_in">Add</span>(a[i], idn[a[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>一句（dui）话题解1</title>
    <url>/2025/07/27/a-solution-to-a-question1/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />
    <label for="pass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>口胡</tag>
      </tags>
  </entry>
  <entry>
    <title>codechef-TBGRAPH-题解</title>
    <url>/2025/07/27/codechef-TBGRAPH-ti-jie/</url>
    <content><![CDATA[<p><a href="https://www.codechef.com/problems/TBGRAPH">Graph on a Table</a>  </p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一张 $ n \times m $ 的网格图，每次可以从 $ (x_0, y_0) $ 跳到 $ (x_1, y_1) $ 当且仅当 $ x_0 &lt; x_1 $ 且 $ y_0 &lt; y_1 $ ，同时这两个点都要在同一个给出的矩形中，求最多可以经过多少个网格并求出方案数对 $ 10^9 + 7 $ 取模。  </p>
<span id="more"></span>  

<h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><p>由于要求的是最长路经，所以对于路径相邻的两个位置 $ (x_i, y_i) $ 和 $ (x_{i + 1}, y_{i + 1}) $ 满足 $ x_i + 1 &#x3D; x_{i + 1} $ 或 $ y_i + 1 &#x3D; y_{i + 1} $ 。<br>考虑DP，预处理出每个点可以从那些地方转移( $ Left[i][j] $ 和 $ Up[i][j] $ 分别维护这个点可以转移的最左和最上方的位置 )。<br>然后单调队列优化DP即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a), i##ed = (b); i &lt;= i##ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a), i##ed = (b); i &gt;= i##ed; i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>, M = <span class="number">500010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">file</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;roche.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;roche.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gi</span><span class="params">(<span class="type">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">	x= <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>;)</span><br><span class="line">		x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> T, n, m, q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y, xx, yy;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> P &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> x &lt; yy.x; &#125;</span><br><span class="line">&#125;; P a[M];</span><br><span class="line"><span class="type">int</span> up[N][N], lt[N][N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">	<span class="type">int</span> len, s; <span class="built_in">Node</span>(<span class="type">int</span> X = <span class="number">0</span>, <span class="type">int</span> Y = <span class="number">0</span>) : <span class="built_in">len</span>(X), <span class="built_in">s</span>(Y) &#123;&#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> len &lt; yy.len; &#125;</span><br><span class="line">&#125;; Node ans, f[N][N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">	Node a[N]; <span class="type">int</span> f, e, s[N], id[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; f = <span class="number">1</span>, e = <span class="number">0</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, x) s[i] = <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x, Node w)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(; f &lt;= e &amp;&amp; a[e] &lt; w;)</span><br><span class="line">			s[a[e].len] = (s[a[e].len] - a[e].s + mod) % mod, --e;</span><br><span class="line">		s[w.len] = (s[w.len] + w.s) % mod, a[++e] = w, id[e] = x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Node <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(; f &lt;= e &amp;&amp; id[f] &lt; x;)</span><br><span class="line">			s[a[f].len] = (s[a[f].len] - a[f].s + mod) % mod, ++f;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Node</span>(a[f].len + <span class="number">1</span>, s[a[f].len]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; Queue Up[N], Lt[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Node <span class="keyword">operator</span>+(Node x, Node y) &#123;</span><br><span class="line">	<span class="keyword">if</span>(x.len ^ y.len) <span class="keyword">return</span> x.len &gt; y.len ? x : y;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Node</span>(x.len, (x.s + y.s) % mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_up_lt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">rep</span>(j, <span class="number">1</span>, m) up[i][j] = lt[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, q) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(j, a[i].x + <span class="number">1</span>, a[i].xx)</span><br><span class="line">			lt[j][a[i].yy] = <span class="built_in">Min</span>(a[i].y, lt[j][a[i].yy]);</span><br><span class="line">		<span class="built_in">rep</span>(j, a[i].y + <span class="number">1</span>, a[i].yy)</span><br><span class="line">			up[a[i].xx][j] = <span class="built_in">Min</span>(a[i].x, up[a[i].xx][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">per</span>(i, n, <span class="number">1</span>) <span class="built_in">per</span>(j, m, <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(j &lt; m) lt[i][j] = <span class="built_in">Min</span>(lt[i][j + <span class="number">1</span>], lt[i][j]);</span><br><span class="line">			<span class="keyword">if</span>(i &lt; n) up[i][j] = <span class="built_in">Min</span>(up[i + <span class="number">1</span>][j], up[i][j]);</span><br><span class="line">			<span class="keyword">if</span>(lt[i][j] &gt;= j) lt[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">			<span class="keyword">if</span>(up[i][j] &gt;= i) up[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n), <span class="built_in">gi</span>(m), <span class="built_in">gi</span>(q);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, q) <span class="built_in">gi</span>(a[i].x), <span class="built_in">gi</span>(a[i].y), <span class="built_in">gi</span>(a[i].xx), <span class="built_in">gi</span>(a[i].yy);</span><br><span class="line">	<span class="built_in">get_up_lt</span>();</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) Lt[i].<span class="built_in">init</span>(m); <span class="built_in">rep</span>(i, <span class="number">1</span>, m) Up[i].<span class="built_in">init</span>(n);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">rep</span>(j, <span class="number">1</span>, m) f[i][j] = <span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">rep</span>(j, <span class="number">1</span>, m) &#123;</span><br><span class="line">		Lt[i].<span class="built_in">push</span>(j, f[i][j]), Up[j].<span class="built_in">push</span>(i, f[i][j]);</span><br><span class="line">		<span class="keyword">if</span>(lt[i + <span class="number">1</span>][j + <span class="number">1</span>] != <span class="number">0x3f3f3f3f</span>)</span><br><span class="line">			f[i + <span class="number">1</span>][j + <span class="number">1</span>] = f[i + <span class="number">1</span>][j + <span class="number">1</span>] + Lt[i].<span class="built_in">ask</span>(lt[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">if</span>(up[i + <span class="number">1</span>][j + <span class="number">1</span>] != <span class="number">0x3f3f3f3f</span>)</span><br><span class="line">			f[i + <span class="number">1</span>][j + <span class="number">1</span>] = f[i + <span class="number">1</span>][j + <span class="number">1</span>] + Up[j].<span class="built_in">ask</span>(up[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">if</span>(up[i + <span class="number">1</span>][j + <span class="number">1</span>] != <span class="number">0x3f3f3f3f</span> &amp;&amp; lt[i + <span class="number">1</span>][j + <span class="number">1</span>] != <span class="number">0x3f3f3f3f</span> &amp;&amp;</span><br><span class="line">			f[i][j].len + <span class="number">1</span> == f[i + <span class="number">1</span>][j + <span class="number">1</span>].len)</span><br><span class="line">			f[i + <span class="number">1</span>][j + <span class="number">1</span>].s = (f[i + <span class="number">1</span>][j + <span class="number">1</span>].s - f[i][j].s + mod) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	ans = <span class="built_in">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">rep</span>(j, <span class="number">1</span>, m) ans = ans + f[i][j];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ans.len, ans.s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//	file();</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T); T; --T) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>【CodePlus 2018 4 月赛】组合数问题 2</title>
    <url>/2025/07/27/codeplus-2018-4-yue-sai-zu-he-shu-wen-ti-2/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/6353">【CodePlus 2018 4 月赛】组合数问题 2</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>发现 $ f_k(h) &#x3D; C(k, h) $ 是单峰函数，意味着可以像 <a href="https://www.luogu.org/problemnew/show/P2048">【NOI2010】超级钢琴</a>  一样用优先队列维护当前每个 $ k $ 最大值。<br>发现组合数很大，优先级不容易确定。考虑取组合数的对数，再用对数（ $ \log (a \times b) &#x3D; \log a + \log b $ ）进行比较。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-15</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, k, ans;</span><br><span class="line"><span class="type">int</span> fac[N], ifac[N];</span><br><span class="line"><span class="type">double</span> lg[N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; st[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y; <span class="type">double</span> w;</span><br><span class="line">	<span class="built_in">P</span>(<span class="type">int</span> X = <span class="number">0</span>, <span class="type">int</span> Y = <span class="number">0</span>) : <span class="built_in">x</span>(X), <span class="built_in">y</span>(Y) &#123; w = lg[x] - lg[y] - lg[x - y]; &#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> P &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> w + eps &lt; yy.w; &#125;</span><br><span class="line">&#125;; priority_queue&lt;P&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; y || x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mul</span>(fac[x], <span class="built_in">mul</span>(ifac[y], ifac[x - y]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) lg[i] = <span class="built_in">log</span>(i) + lg[i - <span class="number">1</span>];</span><br><span class="line">	fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = ifac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fac[i] = <span class="built_in">mul</span>(fac[i - <span class="number">1</span>], i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="built_in">mul</span>(mod - mod / i, ifac[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="built_in">mul</span>(ifac[i - <span class="number">1</span>], ifac[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) st[i].<span class="built_in">insert</span>(i / <span class="number">2</span>), q.<span class="built_in">push</span>(<span class="built_in">P</span>(i, i / <span class="number">2</span>));</span><br><span class="line">	<span class="keyword">for</span>(; k; --k) &#123;</span><br><span class="line">		P u = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>(), ans = <span class="built_in">add</span>(ans, <span class="built_in">C</span>(u.x, u.y));</span><br><span class="line">		<span class="keyword">if</span>(u.y &gt; <span class="number">0</span> &amp;&amp; !st[u.x].<span class="built_in">count</span>(u.y - <span class="number">1</span>))</span><br><span class="line">			st[u.x].<span class="built_in">insert</span>(u.y - <span class="number">1</span>), q.<span class="built_in">push</span>(<span class="built_in">P</span>(u.x, u.y - <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">if</span>(u.y &lt; u.x &amp;&amp; !st[u.x].<span class="built_in">count</span>(u.y + <span class="number">1</span>))</span><br><span class="line">			st[u.x].<span class="built_in">insert</span>(u.y + <span class="number">1</span>), q.<span class="built_in">push</span>(<span class="built_in">P</span>(u.x, u.y + <span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title>二次剩余</title>
    <url>/2025/07/27/er-ci-sheng-yu/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="勒让德符号"><a href="#勒让德符号" class="headerlink" title="勒让德符号"></a>勒让德符号</h3><p>$$<br>\large{ \left( \frac{n}{p} \right) &#x3D;<br>\begin{cases}<br>1, &amp;n \text{在模 $ p $ 意义下的二次剩余}\\<br>-1, &amp;n \text{在模 $ p $ 意义下的非二次剩余}\\<br>0, &amp;n \equiv 0 (\bmod p)<br>\end{cases} }<br>$$</p>
<p>即：  </p>
<p>$$<br>\large{ \left( \frac{n}{p} \right) \equiv n^{\frac{p - 1}{2}} (\bmod p) }<br>$$</p>
<h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>$$<br>\large{ n^2 \equiv (p - n)^2 } \\<br>\large{ \text{$ p $ 的二次剩余和二次非剩余的个数均为 $ \frac{p - 1}{2} $ （除 $ 0 $）} }<br>$$</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li>随机找一个 $ \left( \frac{a^2 - n}{p} \right) &#x3D; -1 $ ，令 $ \omega &#x3D; \sqrt{a^2 - n} $ 。  </li>
<li>合法解 $ x \equiv (a + \omega)^{\frac{p + 1}{2}} (\bmod p) $ 。</li>
</ol>
<p>过程中实数运算需要用结构体维护正数部分和根号部分。  </p>
<p>理论可以见 <a href="https://www.cnblogs.com/zwfymqz/p/10605181.html">&gt; here &lt;</a>。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Math &#123;</span><br><span class="line">	<span class="type">int</span> n, p, w; <span class="keyword">struct</span> <span class="title class_">P</span> &#123; <span class="type">int</span> x, y; &#125;;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> P <span class="title">mul</span><span class="params">(<span class="type">const</span> P &amp;x, <span class="type">const</span> P &amp;y, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		P res;</span><br><span class="line">		res.x = (<span class="number">1ll</span> * x.x * y.x + <span class="number">1ll</span> * x.y * y.y % p * w % p) % p;</span><br><span class="line">		res.y = (<span class="number">1ll</span> * x.y * y.x + <span class="number">1ll</span> * x.x * y.y) % p;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> w = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="number">1ll</span> * x * x % p) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="number">1ll</span> * w * x % p;</span><br><span class="line">		<span class="keyword">return</span> w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Pow</span><span class="params">(P x, <span class="type">int</span> y, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		P w = (P)&#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x, p)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="built_in">mul</span>(w, x, p);</span><br><span class="line">		<span class="keyword">return</span> w.x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		x %= p; <span class="keyword">if</span>(p == <span class="number">2</span>) <span class="keyword">return</span> x;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">ksm</span>(n, (p - <span class="number">1</span>) / <span class="number">2</span>, p) == p - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		<span class="type">int</span> ans;</span><br><span class="line">		<span class="keyword">for</span>(;;) &#123;</span><br><span class="line">			ans = <span class="built_in">rand</span>() % p, w = (<span class="number">1ll</span> * ans * ans % p - x + p) % p;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">ksm</span>(w, (p - <span class="number">1</span>) / <span class="number">2</span>, p) == p - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		P t = (P)&#123;ans, <span class="number">1</span>&#125;; <span class="keyword">return</span> <span class="built_in">Pow</span>(t, (p + <span class="number">1</span>) / <span class="number">2</span>, p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Sqrt</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> pr)</span> </span>&#123; n = x, p = pr; <span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">return</span> <span class="built_in">calc</span>(x, p); &#125;</span><br><span class="line">&#125; <span class="keyword">using</span> Math::Sqrt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>多项式全家桶</title>
    <url>/2025/07/27/duo-xiang-shi-quan-jia-tong/</url>
    <content><![CDATA[<p>默写课文。。。  </p>
<span id="more"></span>  

<h3 id="导数公式："><a href="#导数公式：" class="headerlink" title="导数公式："></a>导数公式：</h3><table>
<thead>
<tr>
<th align="center">原函数</th>
<th align="center">导函数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$ y &#x3D; C(C为常数) $</td>
<td align="center">$ y’ &#x3D; 0 $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; a^x $</td>
<td align="center">$ y’ &#x3D; a^x \ln a $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; e^x $</td>
<td align="center">$ y’ &#x3D; e^x $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; x^n $</td>
<td align="center">$ y’ &#x3D; nx^{n - 1} $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \log_{a}x $</td>
<td align="center">$ y’ &#x3D; \frac{1}{x \ln a} $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \ln x $</td>
<td align="center">$ y’ &#x3D; \frac{1}{x} $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \sin x $</td>
<td align="center">$ y’ &#x3D; \cos x $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \cos x $</td>
<td align="center">$ y’ &#x3D; - \sin x $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; u \pm v $</td>
<td align="center">$ y’ &#x3D; u’ \pm v’ $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; uv $</td>
<td align="center">$ y’ &#x3D; u’v + uv’ $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \frac{u}{v} $</td>
<td align="center">$ y’ &#x3D; \frac{u’v - uv’}{v^2} $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; f(g(x)) $</td>
<td align="center">$ y’ &#x3D; g’(x)f’(g(x)) $</td>
</tr>
</tbody></table>
<h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Add</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(Max(a.size(), b.size()))</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &lt; (<span class="type">int</span>)a.<span class="built_in">size</span>()) res[i] = <span class="built_in">add</span>(res[i], a[i]);</span><br><span class="line">			<span class="keyword">if</span>(i &lt; (<span class="type">int</span>)b.<span class="built_in">size</span>()) res[i] = <span class="built_in">add</span>(res[i], b[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(A[<span class="number">0</span>])), res;</span><br><span class="line">		res = <span class="built_in">Inv</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Div</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B, vector&lt;<span class="type">int</span>&gt; &amp;D, vector&lt;<span class="type">int</span>&gt; &amp;R)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(B.<span class="built_in">size</span>() &gt; A.<span class="built_in">size</span>()) <span class="keyword">return</span> (<span class="type">void</span>)(D.<span class="built_in">clear</span>(), D.<span class="built_in">pb</span>(<span class="number">0</span>), R = A);</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; a = A, b = B, iB; <span class="type">int</span> n = A.<span class="built_in">size</span>(), m = B.<span class="built_in">size</span>();</span><br><span class="line">		<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">		b.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), iB = <span class="built_in">Inv</span>(b, n - m + <span class="number">1</span>);</span><br><span class="line">		D = <span class="built_in">Mul</span>(a, iB), D.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), <span class="built_in">reverse</span>(D.<span class="built_in">begin</span>(), D.<span class="built_in">end</span>());</span><br><span class="line">		R = <span class="built_in">Mul</span>(B, D);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) R[i] = (mod + A[i] - R[i]) % mod;</span><br><span class="line">		R.<span class="built_in">resize</span>(m - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ln</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; f, g = <span class="built_in">Inv</span>(A); f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; (<span class="type">int</span>)f.<span class="built_in">size</span>(); i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, A[i]);</span><br><span class="line">		f[f.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="number">0</span>, f = <span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = (<span class="type">int</span>)f.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) f[i] = <span class="built_in">mul</span>(f[i - <span class="number">1</span>], <span class="built_in">ksm</span>(i));</span><br><span class="line">		f[<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> f;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Exp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res;</span><br><span class="line">		res = <span class="built_in">Exp</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>), res.<span class="built_in">resize</span>(sz); vector&lt;<span class="type">int</span>&gt; tmp = <span class="built_in">Ln</span>(res);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)tmp.<span class="built_in">size</span>(); i++) tmp[i] = <span class="built_in">add</span>(<span class="built_in">sub</span>(<span class="number">0</span>, tmp[i]), A[i]);</span><br><span class="line">		tmp[<span class="number">0</span>] = <span class="built_in">add</span>(<span class="number">1</span>, tmp[<span class="number">0</span>]), res = <span class="built_in">Mul</span>(res, tmp);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> <span class="type">int</span> &amp;K)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> sz = A.<span class="built_in">size</span>(), low = <span class="number">0</span>; vector&lt;<span class="type">int</span>&gt; ta, res;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) <span class="keyword">if</span>(A[i]) &#123; low = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = low; i &lt; sz; i++) ta.<span class="built_in">pb</span>(A[i]);</span><br><span class="line">		<span class="type">int</span> mu = ta[<span class="number">0</span>], inv = <span class="built_in">ksm</span>(mu), Mu = <span class="built_in">ksm</span>(mu, K);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * inv % mod;</span><br><span class="line">		ta = <span class="built_in">Ln</span>(ta);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * K % mod;</span><br><span class="line">		ta = <span class="built_in">Exp</span>(ta);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * Mu % mod;</span><br><span class="line">		<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; low; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= K; j++) &#123; ++cnt, res.<span class="built_in">pb</span>(<span class="number">0</span>); <span class="keyword">if</span>(cnt &gt; sz) <span class="keyword">break</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) res.<span class="built_in">pb</span>(ta[i]);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;K)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> mu = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)K.<span class="built_in">size</span>(); i++) mu = <span class="built_in">add</span>(<span class="built_in">mul</span>(mu, <span class="number">10</span>), K[i]);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Ksm</span>(A, mu);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Sqrt</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) &#123; <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res; &#125;</span><br><span class="line">		res = <span class="built_in">Sqrt</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>); <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		res.<span class="built_in">resize</span>(sz), tmp = <span class="built_in">Mul</span>(tmp, <span class="built_in">Inv</span>(res));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) res[i] = <span class="number">1ll</span> * (res[i] + tmp[i]) * (mod + <span class="number">1</span>) / <span class="number">2</span> % mod;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; tt[<span class="number">4000010</span>], res;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Evaluate_init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; ttt;</span><br><span class="line">		<span class="keyword">if</span>(l &gt;= r) &#123; ttt.<span class="built_in">pb</span>(mod - a[l]), ttt.<span class="built_in">pb</span>(<span class="number">1</span>); <span class="keyword">return</span> tt[u] = ttt; &#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">Evaluate_init</span>(u * <span class="number">2</span>, l, mid, a), <span class="built_in">Evaluate_init</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, a);</span><br><span class="line">		<span class="keyword">return</span> tt[u] = <span class="built_in">Mul</span>(tt[u * <span class="number">2</span>], tt[u * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Evaluate</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;f, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(r - l + <span class="number">1</span> &lt;= <span class="number">512</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">				<span class="type">int</span> w = <span class="number">1</span>, x = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)f.<span class="built_in">size</span>(); i++) x = <span class="built_in">add</span>(x, <span class="built_in">mul</span>(w, f[i])), w = <span class="built_in">mul</span>(w, a[k]);</span><br><span class="line">				res.<span class="built_in">pb</span>(x);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; vector&lt;<span class="type">int</span>&gt; tmp; <span class="built_in">Div</span>(f, tt[u], tmp, tmp);</span><br><span class="line">		<span class="built_in">Evaluate</span>(u * <span class="number">2</span>, l, mid, tmp, a), <span class="built_in">Evaluate</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, tmp, a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Evaluation</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;f, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">Evaluate_init</span>(<span class="number">1</span>, <span class="number">0</span>, a.<span class="built_in">size</span>() - <span class="number">1</span>, a);</span><br><span class="line">		res.<span class="built_in">clear</span>(), <span class="built_in">Evaluate</span>(<span class="number">1</span>, <span class="number">0</span>, a.<span class="built_in">size</span>() - <span class="number">1</span>, f, a); <span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="NTT（Mul-ntt）"><a href="#NTT（Mul-ntt）" class="headerlink" title="NTT（Mul&amp;ntt）"></a>NTT（Mul&amp;ntt）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">				<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">				A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">	<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">	<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="牛顿迭代："><a href="#牛顿迭代：" class="headerlink" title="牛顿迭代："></a>牛顿迭代：</h3><p>$$<br>\begin{aligned}<br>\large{F(x) &#x3D; F_0(x) - \frac{G(F_0(x))}{G’(F_0(x))}}\\<br>\large{G(F(x)) &#x3D; 0}\\<br>\large{G’(F(x)) &#x3D; \frac{dG}{dF}}\\<br>\end{aligned}<br>$$</p>
<h4 id="推导："><a href="#推导：" class="headerlink" title="推导："></a>推导：</h4><p>$$<br>\begin{aligned}<br>y &amp;&#x3D; G’(F_0(x))(x - F_0(x)) + G(F_0(x))\\<br>0 &amp;&#x3D; G’(F_0(x))(F(x) - F_0(x)) + G(F_0(x))\\<br>F(x) &amp;&#x3D; F_0(x) - \frac{G(F_0(x))}{G’(F_0(x))}\\<br>\end{aligned}<br>$$</p>
<hr>
<h3 id="求逆（Inv）："><a href="#求逆（Inv）：" class="headerlink" title="求逆（Inv）："></a>求逆（Inv）：</h3><p>$$<br>\begin{aligned}<br>F \times G’ &amp;&#x3D; 1 (\mod x^{\lceil\frac{n}{2}\rceil})\\<br>F \times G &amp;&#x3D; 1 (\mod x^n)\\<br>F(G - G’) &amp;&#x3D; 0 (\mod x^{\lceil\frac{n}{2}\rceil})\\<br>G - G’ &amp;&#x3D; 0 (\mod x^{\lceil\frac{n}{2}\rceil})\\<br>(G - G’)^2 &amp;&#x3D; 0 (\mod x^n)\\<br>G^2 -2GG’ + G’^2 &amp;&#x3D; 0 (\mod x^n)\\<br>F(G^2 -2GG’ + G’^2) &amp;&#x3D; 0 (\mod x^n)\\<br>G &amp;&#x3D; 2G’ - FG’^2 (\mod x^n)\\<br>\end{aligned}<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(A[<span class="number">0</span>])), res;</span><br><span class="line">	res = <span class="built_in">Inv</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">	<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">	<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++)</span><br><span class="line">		res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">	<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="求Ln（Ln）："><a href="#求Ln（Ln）：" class="headerlink" title="求Ln（Ln）："></a>求Ln（Ln）：</h3><p>$$<br>\begin{aligned}<br>\ln’(F(x)) &amp;&#x3D; \frac{F’(x)}{F(x)}\\<br>\ln(F(x)) &amp;&#x3D; \int \ln’(F(x))\\<br>\end{aligned}<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ln</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; f, g = <span class="built_in">Inv</span>(A); f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; f.<span class="built_in">size</span>(); i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, A[i]);</span><br><span class="line">	f[f.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="number">0</span>, f = <span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = f.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) f[i] = <span class="built_in">mul</span>(f[i - <span class="number">1</span>], <span class="built_in">ksm</span>(i));</span><br><span class="line">	f[<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="求Exp（Exp）："><a href="#求Exp（Exp）：" class="headerlink" title="求Exp（Exp）："></a>求Exp（Exp）：</h3><p>$$<br>\begin{aligned}<br>考虑牛顿迭代。\\<br>F(x) &amp;&#x3D; e^{a(x)}, \ln(F(x)) &#x3D; a(x), G(F(x)) &#x3D; ln(F(x)) - a(x) .\\<br>F(x) &amp;&#x3D; F_0(x) - \frac{G(F(x))}{G’(F(x))}\\<br> &amp;&#x3D; F_0(x) - \frac{\ln(F_0(x)) - a(x)}{\frac{1}{F_0(x)}}\\<br> &amp;&#x3D; F_0(x) - F_0(x)(\ln(F_0(x)) - a(x))\\<br> &amp;&#x3D; F_0(x)(1 - \ln(F_0(x)) + a(x))<br>\end{aligned}<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Exp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res;</span><br><span class="line">	res = <span class="built_in">Exp</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>), res.<span class="built_in">resize</span>(sz); vector&lt;<span class="type">int</span>&gt; tmp = <span class="built_in">Ln</span>(res);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); i++) tmp[i] = <span class="built_in">add</span>(<span class="built_in">sub</span>(<span class="number">0</span>, tmp[i]), A[i]);</span><br><span class="line">	tmp[<span class="number">0</span>] = <span class="built_in">add</span>(<span class="number">1</span>, tmp[<span class="number">0</span>]), res = <span class="built_in">Mul</span>(res, tmp);</span><br><span class="line">	<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="多项式快速幂（Ksm）："><a href="#多项式快速幂（Ksm）：" class="headerlink" title="多项式快速幂（Ksm）："></a>多项式快速幂（Ksm）：</h3><p>$$<br>\begin{aligned}<br>(f(x))^{w} &amp;&#x3D; \exp(w\ln(f(x)))<br>\end{aligned}<br>$$</p>
<p>这种做法也可以用来多项式开根。。。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;K)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res = <span class="built_in">Ln</span>(A); <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; K.<span class="built_in">size</span>(); i++) k = <span class="built_in">add</span>(<span class="built_in">mul</span>(k, <span class="number">10</span>), K[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) res[i]= <span class="built_in">mul</span>(res[i], k);</span><br><span class="line">	res = <span class="built_in">Exp</span>(res), res.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()); <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Update:</strong>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> <span class="type">int</span> &amp;K)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> sz = A.<span class="built_in">size</span>(), low = <span class="number">0</span>; vector&lt;<span class="type">int</span>&gt; ta, res;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) <span class="keyword">if</span>(A[i]) &#123; low = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = low; i &lt; sz; i++) ta.<span class="built_in">pb</span>(A[i]);</span><br><span class="line">	<span class="type">int</span> mu = ta[<span class="number">0</span>], inv = <span class="built_in">ksm</span>(mu), Mu = <span class="built_in">ksm</span>(mu, K);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * inv % mod;</span><br><span class="line">	ta = <span class="built_in">Ln</span>(ta);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * K % mod;</span><br><span class="line">	ta = <span class="built_in">Exp</span>(ta);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * Mu % mod;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; low; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= K; j++) &#123; ++cnt, res.<span class="built_in">pb</span>(<span class="number">0</span>); <span class="keyword">if</span>(cnt &gt; sz) <span class="keyword">break</span>; &#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) res.<span class="built_in">pb</span>(ta[i]);</span><br><span class="line">	<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;K)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> mu = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)K.<span class="built_in">size</span>(); i++) mu = <span class="built_in">add</span>(<span class="built_in">mul</span>(mu, <span class="number">10</span>), K[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Ksm</span>(A, mu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="开方（Sqrt）："><a href="#开方（Sqrt）：" class="headerlink" title="开方（Sqrt）："></a>开方（Sqrt）：</h3><p>$$<br>\begin{aligned}<br>牛顿迭代。\\<br>G(F(x)) &amp;&#x3D; F^2(x) - a(x) &#x3D; 0\\<br>F(x) &amp;&#x3D; F_0(x) - \frac{G(F_0(x))}{G’(F_0(x))}\\<br> &amp;&#x3D; F_0(x) - \frac{F_0^2(x) - a(x)}{2F_0(x)}\\<br> &amp;&#x3D; \frac{F_0^2(x) + a(x)}{2F_0(x)}\\<br>\end{aligned}<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Sqrt</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) &#123; <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res; &#125;</span><br><span class="line">	res = <span class="built_in">Sqrt</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>); <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">	res.<span class="built_in">resize</span>(sz), tmp = <span class="built_in">Mul</span>(tmp, <span class="built_in">Inv</span>(res));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) res[i] = <span class="number">1ll</span> * (res[i] + tmp[i]) * (mod + <span class="number">1</span>) / <span class="number">2</span> % mod;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>【国家集训队】calc</title>
    <url>/2025/07/27/guo-jia-ji-xun-dui-calc/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.com.cn/problem/P4463">【国家集训队】calc</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$ f_{i, j} $ 表示 <strong>递增</strong> 序列中前 i 个数，最后一个数为 $ \leq j $ 的权值和。 $ f_{i, j} &#x3D; j \times f_{i - 1, j - 1} + f_{i, j - 1} $ 。<br>发现这样做复杂度 $ O(nA) $ ，过不去。<br>将 $ f_{i, j} $ 差分后得 $ g_{i, j} $ ，可以用关于 j 的多项式表示。考虑转移过程，即求前缀和在乘上 j，次数 +2 。<br>由此得证 $ f_{i, j} $ 可以被表示成 2n 次多项式。<br>拉格朗日插值即可，复杂度 $ O(n^2) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> mx, n, p, ans = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> X[N], Y[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = p - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> w = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="number">1ll</span> * x * x % p) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="number">1ll</span> * w * x % p; <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;mx, &amp;n, &amp;p);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) ans = <span class="number">1ll</span> * ans * i % p;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, n + n + <span class="number">1</span>) f[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n + n + <span class="number">1</span>) f[i][j] = <span class="number">1ll</span> * f[i - <span class="number">1</span>][j - <span class="number">1</span>] * j % p;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n + n + <span class="number">1</span>) f[i][j] = (f[i][j - <span class="number">1</span>] + f[i][j]) % p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + n + <span class="number">1</span>) X[i] = i, Y[i] = f[n][i];</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + n + <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="type">int</span> sum1 = Y[i], sum2 = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n + n + <span class="number">1</span>) <span class="keyword">if</span>(i != j) &#123;</span><br><span class="line">			sum1 = <span class="number">1ll</span> * sum1 * (mx - X[j] + p) % p;</span><br><span class="line">			sum2 = <span class="number">1ll</span> * sum2 * (X[i] - X[j] + p) % p;</span><br><span class="line">		&#125;</span><br><span class="line">		sum = (sum + <span class="number">1ll</span> * sum1 * <span class="built_in">ksm</span>(sum2) % p) % p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="number">1ll</span> * ans * sum % p);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
        <tag>插值</tag>
      </tags>
  </entry>
  <entry>
    <title>共价大爷游长沙</title>
    <url>/2025/07/27/gong-jia-da-ye-you-chang-sha-ti-jie/</url>
    <content><![CDATA[<p>来自我的口胡记录。  </p>
<p><a href="http://uoj.ac/problem/207">UOJ #207 共价大爷游长沙</a>  </p>
<p><a href="http://matthew99.blog.uoj.ac/blog/1771">官方题解</a>  </p>
<span id="more"></span>  

<p>确实是一道好题，讲详细点。<br>首先有一种显然的暴力，即暴力增加路径、改变路径、查询答案，出题人良心地给了 $ 10 $ 分。<br>若无加减边的操作和删除的操作，那么我们可以维护当前的可行路径，每次可以用 $ O(logn) $ 或者 $ O(1) $ 时间进行树上路径求交以及判断一条边是否在路径上。<br>如果没有加边删边操作，那么我们可以用动态树或者树链剖分等支持链修改单点询问的结构，维护每个点被路径经过的次数，每次看看询问边的两个端点是否都被经过了 $ |S| $ 次。<br>对于 $ |S| \leq 10 $ 的数据，我们可以每次询问的时候进行和算法三类似的操作，每次暴力加入所有路径维护每个点被经过的次数再用同样的方法询问，期望得分 $ 20 $ 分。<br>然后是正解。我们难以维护的是两点之间的动态路径，加减边令人头大。考虑树上差分，在 $ lca $ 处减两倍的值<del>然而动态树并没有lca</del>，考虑异或，异或两个相同的值相当于没操作。如此将端点都异或一个相同的随机数即可，同时统计所有路径的变量也要异或相同的数。 $ LCT $ 维护即可。<br><del>然而我打了代码。</del>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc ch[u][0]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc ch[u][1]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n,m,ans;</span><br><span class="line"><span class="type">int</span> fa[N],ch[N][<span class="number">2</span>],v[N],s[N],sta[N];</span><br><span class="line"><span class="type">bool</span> lz[N];</span><br><span class="line"><span class="type">int</span> tx[N*<span class="number">5</span>],ty[N*<span class="number">5</span>],w[N*<span class="number">5</span>],cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Rand</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (<span class="built_in">rand</span>()&lt;&lt;<span class="number">15</span>)+<span class="built_in">rand</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">nroot</span><span class="params">(<span class="type">const</span> <span class="type">int</span> u)</span> </span>&#123; <span class="keyword">return</span> ch[fa[u]][<span class="number">0</span>]==u||ch[fa[u]][<span class="number">1</span>]==u; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">const</span> <span class="type">int</span> u)</span> </span>&#123; s[u]=s[lc]^s[rc]^v[u]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="keyword">if</span>(lz[u]) <span class="built_in">swap</span>(lc,rc),lz[lc]^=<span class="number">1</span>,lz[rc]^=<span class="number">1</span>,lz[u]=<span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> y=fa[u],z=fa[y],k=ch[y][<span class="number">1</span>]==u,w=ch[u][k^<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) ch[z][ch[z][<span class="number">1</span>]==y]=u; ch[y][k]=w,ch[u][k^<span class="number">1</span>]=y;</span><br><span class="line">    <span class="keyword">if</span>(w) fa[w]=y; fa[y]=u,fa[u]=z;</span><br><span class="line">    <span class="built_in">pushup</span>(y),<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> y=u,z,top=<span class="number">1</span>;sta[top]=y;<span class="keyword">while</span>(<span class="built_in">nroot</span>(y)) sta[++top]=y=fa[y];</span><br><span class="line">    <span class="keyword">while</span>(top) <span class="built_in">pushdown</span>(sta[top--]);</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">nroot</span>(u);<span class="built_in">rotate</span>(u)) &#123;</span><br><span class="line">        y=fa[u],z=fa[y]; <span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) <span class="built_in">rotate</span>((ch[y][<span class="number">0</span>]==u)^(ch[z][<span class="number">0</span>]==y)? u:y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;u;u=fa[y=u]) <span class="built_in">splay</span>(u),v[u]^=s[rc],rc=y,v[u]^=s[y],<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="built_in">access</span>(u),<span class="built_in">splay</span>(u),lz[u]^=<span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123; <span class="built_in">makeroot</span>(x),<span class="built_in">access</span>(y),<span class="built_in">splay</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lnk</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123; <span class="built_in">makeroot</span>(x),<span class="built_in">makeroot</span>(y),fa[x]=y,v[y]^=s[x]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123; <span class="built_in">split</span>(x,y),fa[x]=ch[y][<span class="number">0</span>]=<span class="number">0</span>,<span class="built_in">pushup</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> w)</span> </span>&#123; <span class="built_in">makeroot</span>(x),v[x]^=w,s[x]^=w; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n),<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="built_in">lnk</span>(x,y);</span><br><span class="line">    <span class="type">int</span> opt,x,y;</span><br><span class="line">    <span class="keyword">for</span>(;m;--m) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="built_in">cut</span>(x,y),<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="built_in">lnk</span>(x,y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) &#123;</span><br><span class="line">            ++cnt,<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;tx[cnt],&amp;ty[cnt]),w[cnt]=<span class="built_in">Rand</span>();</span><br><span class="line">            ans^=w[cnt],<span class="built_in">mdy</span>(tx[cnt],w[cnt]),<span class="built_in">mdy</span>(ty[cnt],w[cnt]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x),ans^=w[x],<span class="built_in">mdy</span>(tx[x],w[x]),<span class="built_in">mdy</span>(ty[x],w[x]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="built_in">split</span>(x,y),<span class="built_in">puts</span>((v[y]==ans)? <span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/07/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<h3 id="Attach-pdf"><a href="#Attach-pdf" class="headerlink" title="Attach pdf"></a>Attach pdf</h3><div class="pdf-container">
  <iframe src="/pdfjs/web/viewer.html?file=/assets/hello-world/readpapers1.pdf" width="100%" height="800px"></iframe>
</div>]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>黄金体验</title>
    <url>/2025/07/27/huang-jin-ping-tu/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://cometoj.com/contest/58/problem/F?problem_id=2762">黄金体验</a>  </p>
<h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给出一颗有 $ n $ 个节点的树，每个点有一个初始权值 $ w_i $ ，要求支持两种操作：  </p>
<ol>
<li>给出 $ x $ ，$ y $ ，使点 $ x $ 的权值增加 $ y $。  </li>
<li>给出 $ k $，选定 $ k $ 个点使得包含这 $ k $ 个点的最小联通子图点权和最大，你只需要输出这个最大值。<br>$ n, q \leq 100000, w_i, y \leq 10^9 $</li>
</ol>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>先不考虑修改操作，对于询问操作，当 $ k &#x3D; 1 $ 时为点权最大值，可以直接 $ O(1) $ 维护。当 $ k &#x3D; 2 $ 时，答案为点权最大的一条边（显然是一个叶子连向另一个叶子）；当 $ k $ 更大时，相当于在已有的图上加一条未选过的从叶子上来的权值最大的链。<br>所以可以权值长链剖分，用动态开点线段树维护前 $ k - 1 $ 大的链。<br>考虑加上修改，由于点权只会增大，所以原本的修改点所在的长链依旧是长链，不是长链则可能更新成长链。可能会更新直径（要 $ makeroot $），这部分可以用 $ LCT $ 维护。<br>时间复杂度 $ O(n \log^2 n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>; <span class="type">const</span> ll INF = <span class="number">1e15</span>;</span><br><span class="line"><span class="type">int</span> n, rt, m; ll a[N], rtw;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">	multiset&lt;ll&gt; tr;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">const</span> ll &amp;x)</span> </span>&#123; tr.<span class="built_in">erase</span>(tr.<span class="built_in">find</span>(x)); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">const</span> ll &amp;x)</span> </span>&#123; tr.<span class="built_in">insert</span>(x); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">top</span><span class="params">()</span> </span>&#123; <span class="built_in">assert</span>(!tr.<span class="built_in">empty</span>()); <span class="keyword">return</span> *(--tr.<span class="built_in">end</span>()); &#125;</span><br><span class="line">&#125;; Heap hp;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pretree</span> &#123;</span><br><span class="line">	<span class="type">int</span> tot, rt, lf[N * <span class="number">40</span>], rf[N * <span class="number">40</span>], cnt[N * <span class="number">40</span>]; ll s[N * <span class="number">40</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> &amp;u, ll l, ll r, ll x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) u = ++tot; s[u] += x * w, cnt[u] += w; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">		ll mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">		x &lt;= mid ? <span class="built_in">mdy</span>(lf[u], l, mid, x, w) : <span class="built_in">mdy</span>(rf[u], mid + <span class="number">1</span>, r, x, w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">ask</span><span class="params">(<span class="type">int</span> u, ll l, ll r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(cnt[u] &lt;= k) <span class="keyword">return</span> s[u]; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> l * k;</span><br><span class="line">		ll mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(cnt[rf[u]] &gt;= k) <span class="keyword">return</span> <span class="built_in">ask</span>(rf[u], mid + <span class="number">1</span>, r, k);</span><br><span class="line">		<span class="keyword">return</span> s[rf[u]] + <span class="built_in">ask</span>(lf[u], l, mid, k - cnt[rf[u]]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; Pretree t;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LCT</span> &#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> lc ch[0][u]</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rc ch[1][u]</span></span><br><span class="line">	<span class="type">int</span> ch[<span class="number">2</span>][N], fa[N], rt; <span class="type">bool</span> lz[N]; <span class="type">int</span> sta[N], top; ll s[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">nroot</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u)</span> </span>&#123; <span class="keyword">return</span> ch[<span class="number">0</span>][fa[u]] == u || ch[<span class="number">1</span>][fa[u]] == u; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rev</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u)</span> </span>&#123; <span class="built_in">swap</span>(lc, rc), lz[u] ^= <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u)</span> </span>&#123; s[u] = s[lc] + s[rc] + a[u]; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u)</span> </span>&#123; <span class="keyword">if</span>(lz[u]) <span class="built_in">rev</span>(lc), <span class="built_in">rev</span>(rc), lz[u] = <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> y = fa[u], z = fa[y], k = ch[<span class="number">1</span>][y] == u, w = ch[k ^ <span class="number">1</span>][u];</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) ch[ch[<span class="number">1</span>][z] == y][z] = u; ch[k][y] = w, ch[k ^ <span class="number">1</span>][u] = y;</span><br><span class="line">		<span class="keyword">if</span>(w) fa[w] = y; fa[y] = u, fa[u] = z; <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> y = u, z; <span class="keyword">for</span>(sta[top = <span class="number">1</span>] = y; <span class="built_in">nroot</span>(y); sta[++top] = y = fa[y]);</span><br><span class="line">		<span class="keyword">for</span>(; top; <span class="built_in">pushdown</span>(sta[top--]));</span><br><span class="line">		<span class="keyword">for</span>(; <span class="built_in">nroot</span>(u); <span class="built_in">rotate</span>(u)) &#123;</span><br><span class="line">			y = fa[u], z = fa[y];</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) <span class="built_in">rotate</span>((ch[<span class="number">0</span>][z] == y) ^ (ch[<span class="number">0</span>][y] == u) ? u : y);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Link</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">		t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, s[x], <span class="number">-1</span>), t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, s[y], <span class="number">-1</span>);</span><br><span class="line">		t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, s[ch[<span class="number">1</span>][x]], <span class="number">1</span>), ch[<span class="number">1</span>][x] = y, <span class="built_in">pushup</span>(x);</span><br><span class="line">		t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, s[x], <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">splay</span>(rt); <span class="type">int</span> y = u; <span class="keyword">for</span>(; <span class="built_in">nroot</span>(y); y = fa[y]); <span class="built_in">splay</span>(u); <span class="keyword">return</span> y == rt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Right</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="keyword">for</span>(; rc; u = rc); <span class="keyword">return</span> u; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> y = u; <span class="built_in">splay</span>(u), u = fa[u];</span><br><span class="line">		<span class="keyword">for</span>(; u; u = fa[y = u]) &#123;</span><br><span class="line">			<span class="built_in">splay</span>(u);</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">check</span>(u) &amp;&amp; s[lc] &lt; s[rc]) rt = <span class="built_in">Right</span>(u), <span class="built_in">splay</span>(rt), <span class="built_in">rev</span>(rt), <span class="built_in">splay</span>(u);</span><br><span class="line">			<span class="keyword">if</span>(s[rc] &lt; s[y]) <span class="built_in">Link</span>(u, y); <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">undef</span> lc</span></span><br><span class="line">	<span class="meta">#<span class="keyword">undef</span> rc</span></span><br><span class="line">&#125;; LCT lct;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, ll d)</span> </span>&#123;</span><br><span class="line">	d += a[u]; <span class="keyword">if</span>(d &gt; rtw) rtw = d, rt = u; <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff) <span class="built_in">dfs</span>(v, u, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	ll d = <span class="number">0</span>; <span class="type">int</span> son = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff) &#123;</span><br><span class="line">		lct.fa[v] = u, <span class="built_in">init</span>(v, u); <span class="keyword">if</span>(lct.s[v] &gt; d) d = lct.s[v], son = v;</span><br><span class="line">	&#125;</span><br><span class="line">	lct.ch[<span class="number">1</span>][u] = son, lct.<span class="built_in">pushup</span>(u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff &amp;&amp; v != son) t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, lct.s[v], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x); &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]), hp.<span class="built_in">add</span>(a[i]);</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="type">int</span> trt = rt; rt = rtw = <span class="number">0</span>, <span class="built_in">dfs</span>(trt, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">init</span>(trt, <span class="number">0</span>), lct.rt = trt, t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, rtw, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m); m; --m) &#123;</span><br><span class="line">		<span class="type">int</span> opt; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line">		<span class="keyword">if</span>(!opt) &#123;</span><br><span class="line">			<span class="type">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), lct.<span class="built_in">splay</span>(x);</span><br><span class="line">			hp.<span class="built_in">del</span>(a[x]), t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, lct.s[x], <span class="number">-1</span>);</span><br><span class="line">			a[x] += y, lct.<span class="built_in">pushup</span>(x);</span><br><span class="line">			hp.<span class="built_in">add</span>(a[x]), t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, lct.s[x], <span class="number">1</span>);</span><br><span class="line">			lct.<span class="built_in">access</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> k; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">			<span class="keyword">if</span>(k == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, hp.<span class="built_in">top</span>());</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, t.<span class="built_in">ask</span>(t.rt, <span class="number">0</span>, INF, k - <span class="number">1</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FWT</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>【Luogu】重返现世</title>
    <url>/2025/07/27/luogu-chong-fan-xian-shi/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h3><p><a href="https://www.luogu.org/problemnew/show/P4707">【Luogu】重返现世</a>  </p>
<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>为了打开返回现世的大门，Yopilla 需要制作开启大门的钥匙。Yopilla 所在的迷失大陆有 $ n $ 种原料，只需要集齐任意 $ k $ 种，就可以开始制作。<br>Yopilla 来到了迷失大陆的核心地域。每个单位时间，这片地域就会随机生成一种原料。每种原料被生成的概率是不同的，第 $ i $ 种原料被生成的概率是 $ \frac{P_i}{m} $ 。如果 Yopilla 没有这种原料，那么就可以进行收集。<br>Yopilla 急于知道，他收集到任意 $ k $ 种原料的期望时间，答案对 $ 998244353 $ 取模。  </p>
<h3 id="做法："><a href="#做法：" class="headerlink" title="做法："></a>做法：</h3><p>根据 $ Kth-MinMax $ 容斥：<br>$$ Kth-MinMax(S) &#x3D; \sum_{T \in S} C(|T| - 1, k - 1) (-1)^{|T| - k} min(T) $$<br>令 $ f[i][j][k] &#x3D; (前i个元素中 \sum P_{a_i} &#x3D; j)\sum_{T} C(|T| - 1, k - 1)(-1)^{|T| - k} $ 。考虑加入一个新元素：<br>不加：$ f[i][j][k] &#x3D; f[i - 1][j][k] $ 。<br>加：<br>$$ f[i][j][k] &#x3D; \sum_{T \in S} C(|T| - 1, k - 1) (-1)^{|T| - k} $$<br>$$ &#x3D; \sum_{T}C(|T|, k - 1)(-1)^{|T| - k + 1} $$<br>$$ &#x3D; \sum_{T}(C(|T| - 1, k - 1) + C(|T - 1|, k - 2))(-1)^{|T| - k + 1} $$<br>$$ &#x3D; \sum_{T}C(|T| - 1, k - 1)(-1)^{|T| - k}(-1) + \sum_{T}C(|T| - 1, k - 2)(-1)^{|T| - k + 1} $$<br>$$ &#x3D; -f[i - 1][j - P_i][k - 1] + f[i - 1][j - P_i][k] $$<br> $ f[i][0][0] &#x3D; 1 $ 。<br> $ dp $ 转移即可（需要滚动数组），最后的 $ f[i][j][k] $ 期望为 $ \frac{m}{j} $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, p[N], ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> fac[N], ifac[N];</span><br><span class="line"><span class="type">int</span> f[<span class="number">2</span>][N * <span class="number">10</span>][N], Now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &lt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mul</span>(fac[x], <span class="built_in">mul</span>(ifac[y], ifac[x - y]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;m), k = n - k + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p[i]);</span><br><span class="line">	fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = ifac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fac[i] = <span class="built_in">mul</span>(fac[i - <span class="number">1</span>], i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="built_in">mul</span>(mod - mod / i, ifac[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="built_in">mul</span>(ifac[i - <span class="number">1</span>], ifac[i]);</span><br><span class="line">	f[Now][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		Now ^= <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> h = <span class="number">0</span>; h &lt;= k; h++) f[Now][j][h] = f[Now ^ <span class="number">1</span>][j][h];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = p[i]; j &lt;= m; j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> h = <span class="number">1</span>; h &lt;= k; h++) &#123;</span><br><span class="line">				f[Now][j][h] = <span class="built_in">add</span>(f[Now][j][h], f[Now ^ <span class="number">1</span>][j - p[i]][h - <span class="number">1</span>]);</span><br><span class="line">				f[Now][j][h] = <span class="built_in">sub</span>(f[Now][j][h], f[Now ^ <span class="number">1</span>][j - p[i]][h]);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(f[Now][i][k], <span class="built_in">ksm</span>(i)));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">mul</span>(ans, m));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title>【luogu5245】【模板】多项式快速幂</title>
    <url>/2025/07/27/luogu5245-duo-xiang-shi-kuai-su-mi/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problemnew/show/P5245">【luogu5245】【模板】多项式快速幂</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>这道题直接套快速幂被针对了。。。<br>考虑将多项式求 $ \ln $ 后乘上原指数再 $ \exp $ 回去等同于求幂。<br>直接放多项式全家桶了。。。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">		<span class="keyword">return</span> ss;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Add</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(Max(a.size(), b.size()))</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &lt; a.<span class="built_in">size</span>()) res[i] = <span class="built_in">add</span>(res[i], a[i]);</span><br><span class="line">			<span class="keyword">if</span>(i &lt; b.<span class="built_in">size</span>()) res[i] = <span class="built_in">add</span>(res[i], b[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(A[<span class="number">0</span>])), res;</span><br><span class="line">		res = <span class="built_in">Inv</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++)</span><br><span class="line">			res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Sqrt</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res;</span><br><span class="line">		res = <span class="built_in">Sqrt</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		res.<span class="built_in">resize</span>(sz), res = <span class="built_in">Add</span>(res, <span class="built_in">Mul</span>(tmp, <span class="built_in">Inv</span>(res)));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++)</span><br><span class="line">			res[i] = (res[i] &amp; <span class="number">1</span>) ? ((res[i] + mod) / <span class="number">2</span>) : (res[i] / <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Div</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B, vector&lt;<span class="type">int</span>&gt; &amp;D, vector&lt;<span class="type">int</span>&gt; &amp;R)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(B.<span class="built_in">size</span>() &gt; A.<span class="built_in">size</span>()) <span class="keyword">return</span> (<span class="type">void</span>)(D.<span class="built_in">clear</span>(), D.<span class="built_in">pb</span>(<span class="number">0</span>), R = A);</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; a = A, b = B, iB; <span class="type">int</span> n = A.<span class="built_in">size</span>(), m = B.<span class="built_in">size</span>();</span><br><span class="line">		<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">		b.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), iB = <span class="built_in">Inv</span>(b, n - m + <span class="number">1</span>);</span><br><span class="line">		D = <span class="built_in">Mul</span>(a, iB), D.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), <span class="built_in">reverse</span>(D.<span class="built_in">begin</span>(), D.<span class="built_in">end</span>());</span><br><span class="line">		R = <span class="built_in">Mul</span>(B, D);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) R[i] = (mod + A[i] - R[i]) % mod;</span><br><span class="line">		R.<span class="built_in">resize</span>(m - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ln</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; f, g = <span class="built_in">Inv</span>(A); f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; f.<span class="built_in">size</span>(); i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, A[i]);</span><br><span class="line">		f[f.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="number">0</span>, f = <span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = f.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) f[i] = <span class="built_in">mul</span>(f[i - <span class="number">1</span>], <span class="built_in">ksm</span>(i));</span><br><span class="line">		f[<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> f;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Exp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res;</span><br><span class="line">		res = <span class="built_in">Exp</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>), res.<span class="built_in">resize</span>(sz); vector&lt;<span class="type">int</span>&gt; tmp = <span class="built_in">Ln</span>(res);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); i++) tmp[i] = <span class="built_in">add</span>(<span class="built_in">sub</span>(<span class="number">0</span>, tmp[i]), A[i]);</span><br><span class="line">		tmp[<span class="number">0</span>] = <span class="built_in">add</span>(<span class="number">1</span>, tmp[<span class="number">0</span>]), res = <span class="built_in">Mul</span>(res, tmp);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;K)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res = <span class="built_in">Ln</span>(A); <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; K.<span class="built_in">size</span>(); i++) k = <span class="built_in">add</span>(<span class="built_in">mul</span>(k, <span class="number">10</span>), K[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) res[i]= <span class="built_in">mul</span>(res[i], k);</span><br><span class="line">		res = <span class="built_in">Exp</span>(res), res.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()); <span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a, b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, ed = <span class="built_in">strlen</span>(s); i &lt; ed; i++) b.<span class="built_in">pb</span>(s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, x; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), a.<span class="built_in">pb</span>(x);</span><br><span class="line">	a = Poly::<span class="built_in">Ksm</span>(a, b);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]); <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>基于策略的强化学习</title>
    <url>/2025/07/27/policy-based-reinforcement-learning/</url>
    <content><![CDATA[<p>参考资料：<a href="https://zhuanlan.zhihu.com/p/614115887">Proximal Policy Optimization (PPO) 算法理解：从策略梯度开始</a></p>
<p>如果LaTeX挂了：</p>
<div class="pdf-container">
  <iframe src="/pdfjs/web/viewer.html?file=/assets/policy-based-reinforcement-learning/policy-based-reinforcement-learning.pdf" width="100%" height="800px"></iframe>
</div>

<hr>
<h1 id="传统策略梯度算法"><a href="#传统策略梯度算法" class="headerlink" title="传统策略梯度算法"></a>传统策略梯度算法</h1><h2 id="策略近似"><a href="#策略近似" class="headerlink" title="策略近似"></a>策略近似</h2><p>设$\theta$为神经网络参数，基于策略的强化学习用参数化概率分布$\pi_{\theta}(a | s) &#x3D; P(a | s; \theta)$确定策略，在返回的动作概率列表中对不同的动作进行抽样选择。</p>
<h2 id="定义目标函数"><a href="#定义目标函数" class="headerlink" title="定义目标函数"></a>定义目标函数</h2><p>目标就是找到那些可能获得更多奖励期望值的动作，使它们对应的概率更大，从而策略就更有可能选择这些动作。</p>
<p>定义的最大化目标函数：</p>
<p>$$<br>\max_{\theta} J(\theta) &#x3D; \max_{\theta} E_{\tau \sim \pi_{\theta} } (R(\tau)) &#x3D; \max_{\theta} \sum_{\tau} P(\tau; \theta) R(\tau)<br>$$</p>
<p>其中$\tau$是agent与环境交互产生的状态-动作轨迹$\tau &#x3D; (s_1, a_1, \dots, s_T, a_T)$。我们的目标是通过调整$\theta$，使得获得更大奖励期望的轨迹出现的概率更高。</p>
<p>其中，轨迹$\tau$在策略$\pi_{\theta}(a | s)$下发生的概率为：</p>
<p>$$<br>P(\tau; \theta) &#x3D; \left[ \prod_{t &#x3D; 0}^T P(s_{t + 1} | s_t, a_t) \cdot \pi_{\theta} (a_t | s_t) \right]<br>$$</p>
<p>实际枚举所有可能的轨迹是很困难的，基本都需要通过大量采样得到样本求期望值近似。</p>
<h2 id="策略梯度"><a href="#策略梯度" class="headerlink" title="策略梯度"></a>策略梯度</h2><p>$$<br>\begin{aligned}<br>\nabla_{\theta} J(\theta) &amp;&#x3D; \sum_{\tau} \nabla_{\theta} P(\tau; \theta) \cdot R(\tau) \\<br>&amp;&#x3D; \sum_{\tau} P(\tau; \theta) \frac{\nabla_{\theta} P(\tau; \theta)}{P(\tau; \theta)} R(\tau) \\<br>&amp;&#x3D; \sum_{\tau} P(\tau; \theta) \cdot \nabla_{\theta} \log P(\tau; \theta) \cdot R(\tau)<br>\end{aligned}<br>$$</p>
<p>根据$P(\tau; \theta)$可得：</p>
<p>$$<br>\begin{aligned}<br>\nabla_{\theta} \log P(\tau; \theta) &amp;&#x3D; \nabla_{\theta} \left[ \sum_{t &#x3D; 0}^T \log P(s_{t + 1} | s_t, a_t) + \sum_{t &#x3D; 0}^T \log \pi_{\theta} (a_t | s_t) \right] \\<br>&amp;&#x3D; \sum_{t &#x3D; 0}^T \nabla_{\theta} \log \pi_{\theta} (a_t | s_t)<br>\end{aligned}<br>$$</p>
<p>假设当前有$m$条轨迹的样本：</p>
<p>$$<br>\begin{aligned}<br>\nabla_{\theta} J(\theta) &amp;\approx \frac{1}{m} \sum_{i &#x3D; 1}^{m} \nabla_{\theta} \log P(\tau^{(i)}; \theta) \cdot R(\tau^{(i)}) \\<br>&amp;&#x3D; \frac{1}{m} \sum_{i &#x3D; 1}^{m} \left[ \sum_{t^{(i)} &#x3D; 0}^{T^{(i)}} \nabla_{\theta} \log \pi_{\theta} (a_{t^{(i)}} | s_{t^{(i)}}) \right] \cdot R(\tau^{(i)}) \\<br>&amp;&#x3D; \frac{1}{n} \sum_{i &#x3D; 1}^{n} \nabla_{\theta} \log \pi_{\theta} (a_i | s_i) \cdot R(\tau_i) \quad \left( n &#x3D; \sum_{i &#x3D; 1}^{m} (T^{(i)} + 1) \right)<br>\end{aligned}<br>$$</p>
<p>策略梯度的更新规则：</p>
<p>$$<br>\theta \leftarrow \theta + \alpha \cdot \nabla_{\theta} J(\theta)<br>$$</p>
<h3 id="Softmax策略"><a href="#Softmax策略" class="headerlink" title="Softmax策略"></a>Softmax策略</h3><p>对于离散动作空间：</p>
<p>$$<br>\pi_{\theta}(a | s) &#x3D; \frac{e^{\phi(s, a)^T \theta}}{\sum_{a’ \in A} e^{\phi(s, a’)^T \theta}}<br>$$</p>
<p>对应的策略梯度：</p>
<p>$$<br>\begin{aligned}<br>&amp;\quad \nabla_{\theta} \log \pi_{\theta}(a | s) \\<br>&amp;&#x3D; \nabla_{\theta} \left(\phi(s, a)^T \theta -  \log \sum_{a’ \in A} e^{\phi(s, a’)^T \theta} \right) \\<br>&amp;&#x3D; \phi(s, a) - \frac{\sum_{a’ \in A} \phi(s, a’) \cdot e^{\phi(s, a’)^T \theta}}{\sum_{a’ \in A} e^{\phi(s, a’)^T \theta}} \\<br>&amp;&#x3D; \phi(s, a) - \sum_{a’ \in A} \phi(s, a’) \cdot \pi_{\theta}(a’ | s)<br>\end{aligned}<br>$$</p>
<p>如果奖励信号很高并且观察到的向量与平均向量相差很大，就会有增加该动作概率的强烈趋势。</p>
<h3 id="高斯策略"><a href="#高斯策略" class="headerlink" title="高斯策略"></a>高斯策略</h3><p>对于连续动作空间：</p>
<p>$$<br>\pi_{\theta}(a | s) &#x3D; \frac{1}{\sqrt{2 \pi} \sigma_{\theta}} e^{- \frac{(a - \mu_{\theta})^2}{2 \sigma_{\theta}^2}}<br>$$</p>
<p>其中正态分布的均值$\mu_{\theta} &#x3D; \phi(s, a)^T \theta$。</p>
<p>对应的策略梯度：</p>
<p>$$<br>\begin{aligned}<br>&amp;\quad \nabla_{\theta} \log \pi_{\theta}(a | s) \\<br>&amp;&#x3D; \nabla_{\theta} \left(-\frac{1}{2} \cdot \log (2 \pi \sigma_{\theta}^2) - \frac{(a -\mu_{\theta})^2}{2 \sigma_{\theta}^2} \right) \\<br>&amp;&#x3D; \frac{(a - \mu_{\theta})\phi(s, a)}{\sigma_{\theta}^2}<br>\end{aligned}<br>$$</p>
<p>在高回报的情况下，远离均值的动作会触发强烈的更新信号。</p>
<p>在实际任务中，我们没有必要手动计算偏导数，使用深度学习框架的自动求导。定义损失函数：</p>
<p>$$<br>\mathcal{L}(a, s, r) &#x3D; -\log(\pi_\theta(a | s)) r<br>$$</p>
<p>即可让计算机自动求导。</p>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Network: theta := R^(|theta|)</span><br><span class="line">for n = 1 to N:</span><br><span class="line">    tau &lt;- pi(theta)</span><br><span class="line">    for t = 1 to T:</span><br><span class="line">        R(tau | t) = R[t] + R[t + 1] + ... + R[T]</span><br><span class="line">        theta &lt;- theta - alpha * R(tau | t) * grad(theta, pi(theta, a | s))</span><br></pre></td></tr></table></figure>

<p>这里对于一条路径，将路径上每一个状态都进行了计算，对信息的利用最大化。</p>
<h1 id="自然策略梯度算法"><a href="#自然策略梯度算法" class="headerlink" title="自然策略梯度算法"></a>自然策略梯度算法</h1><h2 id="传统策略梯度算法的缺陷"><a href="#传统策略梯度算法的缺陷" class="headerlink" title="传统策略梯度算法的缺陷"></a>传统策略梯度算法的缺陷</h2><p>在传统的策略梯度算法中，权重更新会遇到两个问题：</p>
<ul>
<li>过冲（Overshooting）: 更新错过了奖励峰值并落入了次优策略区域</li>
<li>下冲（Undershooting）: 在梯度方向上采取过小的更新步长会导致收敛缓慢</li>
</ul>
<p>在监督学习问题中，overshooting不是什么问题，因为数据是固定的，我们可以在下一个epoch中重新纠正；但在强化学习问题中，如果因为overshooting陷入了一个较差的策略区域，则未来的样本批次可能不会提供太多有意义的信息，用较差的数据样本再去更新策略，从而陷入了糟糕的正反馈中无法恢复。较小的学习率可能会解决这个问题，但会导致收敛速度变慢的undershooting问题。</p>
<h2 id="限制策略更新的差异"><a href="#限制策略更新的差异" class="headerlink" title="限制策略更新的差异"></a>限制策略更新的差异</h2><p>我们需要表示策略（分布）之间的差异，而不是参数本身的差异。计算两个概率分布之间的差异，最常见的是KL散度，也称为相对熵，描述了两个概率分布之间的距离：</p>
<p>$$<br>\mathcal{D}<em>{KL}(\pi</em>{\theta} || \pi_{\theta + \Delta \theta}) &#x3D; \sum_{x \in \Chi} \pi_{\theta}(x) \log \left( \frac{\pi_{\theta}(x)}{\pi_{\theta + \Delta \theta}(x)} \right)<br>$$</p>
<p>调整后的策略更新限制为：</p>
<p>$$<br>\Delta \theta^{*} &#x3D; \argmax_{\Delta \theta, \mathcal{D}<em>{KL}(\pi</em>{\theta} || \pi_{\theta + \Delta \theta}) \le \epsilon} J(\theta + \Delta \theta)<br>$$</p>
<p>然而，计算KL散度需要遍历所有的状态-动作对，因此我们需要一些化简来处理现实的RL问题。</p>
<p>首先，我们使用拉格朗日松弛将原表达式的发散约束转化为惩罚项，得到一个更容易求解的表达式：</p>
<p>$$<br>\Delta \theta^{*} &#x3D; \argmax_{\Delta \theta} J(\theta + \Delta \theta) - \lambda(\mathcal{D}<em>{KL}(\pi</em>{\theta} || \pi_{\theta + \Delta \theta}) - \epsilon)<br>$$</p>
<p>用近似方法来化简。通过泰勒展开：</p>
<p>$$<br>\begin{aligned}<br>\Delta \theta^{*} &amp;\approx \argmax_{\Delta \theta} J(\theta) + \nabla_{\theta} J(\theta) \cdot \Delta \theta - \frac{1}{2} \lambda (\Delta \theta^{T} F(\theta) \Delta \theta) + \lambda \epsilon \\<br>&amp;\approx \argmax_{\Delta \theta} \nabla_{\theta} J(\theta) \cdot \Delta \theta - \frac{1}{2} \lambda (\Delta \theta^{T} F(\theta) \Delta \theta) \\<br>F(\theta) &amp;&#x3D; \mathbb{E}<em>{\theta} [ \nabla</em>{\theta} \log \pi_{\theta}(x) \nabla_{\theta} \log \pi_{\theta}(x)^{T} ]<br>\end{aligned}<br>$$</p>
<p>KL散度近似于二阶泰勒展开。用Fisher信息矩阵代替二阶导数，除了符号紧凑性外，还可以大大减少计算开销。</p>
<h2 id="解决KL约束问题"><a href="#解决KL约束问题" class="headerlink" title="解决KL约束问题"></a>解决KL约束问题</h2><p>对于近似简化后的表达式，可以通过将关于$\Delta \theta$的梯度设置为0，来找到最优的权重更新$\Delta \theta$：</p>
<p>$$<br>\begin{aligned}<br>0 &amp;&#x3D; \frac{\partial}{\partial \Delta \theta} \left( \nabla_{\theta} J(\theta) \Delta \theta - \frac{1}{2} \lambda \Delta \theta^{T} F(\theta) \Delta \theta \right) \\<br>&amp;&#x3D; \nabla_{\theta} J(\theta) - \frac{1}{2} \lambda F(\theta) \Delta \theta \\<br>\Delta \theta &amp;&#x3D; - \frac{2}{\lambda} F(\theta)^{-1} \nabla_{\theta} J(\theta)<br>\end{aligned}<br>$$</p>
<p>其中，$\lambda$是一个常数，可以吸收到学习率$\alpha$中。根据$\mathcal{D}<em>{KL}(\pi</em>{\theta} || \pi_{\theta + \Delta \theta}) \le \epsilon$，我们可以推出动态学习率：</p>
<p>$$<br>\alpha &#x3D; \sqrt{\frac{2 \epsilon}{\nabla J(\theta)^T} F(\theta)^{-1} \nabla J(\theta)}<br>$$</p>
<p>可以确保每次更新的KL散度（近似）等于$\epsilon$。</p>
<p>自然策略梯度：</p>
<p>$$<br>\tilde{\nabla} J(\theta) &#x3D; F(\theta)^{-1} \nabla J(\theta)<br>$$</p>
<p>最终的权重更新方案为：</p>
<p>$$<br>\Delta \theta &#x3D; \sqrt{\frac{2 \epsilon }{\nabla J(\theta)^T F(\theta)^{-1} \nabla J(\theta)}} \tilde{\nabla} J(\theta)<br>$$</p>
<p>该方案的强大之处在于，无论分布的表示如何，它总是以相同的幅度改变策略。</p>
<h1 id="信赖域策略优化算法（TRPO）"><a href="#信赖域策略优化算法（TRPO）" class="headerlink" title="信赖域策略优化算法（TRPO）"></a>信赖域策略优化算法（TRPO）</h1><h2 id="自然策略梯度算法的缺陷"><a href="#自然策略梯度算法的缺陷" class="headerlink" title="自然策略梯度算法的缺陷"></a>自然策略梯度算法的缺陷</h2><ul>
<li>近似值可能会违反KL约束，从而导致分析得出的步长过大，超出限制要求</li>
<li>矩阵$F$的计算时间太长，是$O(N^3)$复杂度的运算</li>
<li>我们没有检查更新是否真的改进了策略。由于存在大量的近似过程，策略可能并没有优化</li>
</ul>
<h2 id="算法理论"><a href="#算法理论" class="headerlink" title="算法理论"></a>算法理论</h2><p>针对自然策略梯度算法的问题，我们希望可以对策略的优化进行量化，从而保证每次的更新一定是优化作用的。为此，我们需要计算两种策略之间预期回报的差异。这里采用的是原策略预期回报添加新策略预期优势的方式。该表达式在原策略下计算优势函数，无需重新采样：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) &#x3D; J(\pi_{\theta}) + \mathbb{E}<em>{\tau \sim \pi</em>{\theta + \Delta \theta}} \sum_{t &#x3D; 0}^{\infin} \gamma^{t} A^{\pi_{\theta}}(s_t, a_t)<br>$$</p>
<p>其中优势函数的定义为：</p>
<p>$$<br>A^{\pi_{\theta}}(s, a) &#x3D; \mathbb{E}(Q^{\pi_{\theta}}(s, a) - V^{\pi_{\theta}}(s))<br>$$</p>
<p>由于时间范围是无限的，引入状态的折扣分布：</p>
<p>$$<br>\rho_{\pi}(s) &#x3D; \sum_{k &#x3D; 0}^{\infin} \gamma^{k} P(s_k &#x3D; s)<br>$$</p>
<p>原差异表达式可重新表示为：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) &#x3D; J(\pi_{\theta}) + \sum_{s \in \mathcal{S}} \rho_{\pi_{\theta + \Delta \theta}}(s) \sum_{a \in \mathcal{A}} \pi_{\theta + \Delta \theta}(a | s) A^{\pi_{\theta}}(s, a)<br>$$</p>
<p>引入近似误差，使用当前策略近似：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) \approx J(\pi_{\theta}) + \sum_{s \in \mathcal{S}} \rho_{\pi_{\theta}}(s) \sum_{a \in \mathcal{A}} \pi_{\theta + \Delta \theta}(a | s) A^{\pi_{\theta}}(s, a)<br>$$</p>
<p>将状态分布求和替换为期望，方便实际计算时使用蒙特卡洛模拟进行采样，同时将动作求和替换为<a href="https://zhuanlan.zhihu.com/p/41217212">重要性采样</a>。通过重要性采样，可以有效利用当前策略的行动期望，并针对新策略下的概率进行了修正：</p>
<p>$$<br>\begin{aligned}<br>J(\pi_{\theta + \Delta \theta}) &amp;&#x3D; J(\pi_{\theta}) + \sum_{s \in \mathcal{S}} \rho_{\pi_{\theta + \Delta \theta}}(s) \sum_{a \in \mathcal{A}} \pi_{\theta + \Delta \theta}(a | s) A^{\pi_{\theta}}(s, a) \\<br>&amp;&#x3D; J(\pi_{\theta}) + \mathbb{E}<em>{s \sim \rho</em>{\pi_{\theta + \Delta \theta}}} \pi_{\theta + \Delta \theta}(a | s) A^{\pi_{\theta}}(s, a) \\<br>&amp;\approx J(\pi_{\theta}) + \mathbb{E}<em>{s \sim \rho</em>{\pi_{\theta}}} \frac{\pi_{\theta + \Delta \theta}(a | s)}{\pi_{\theta}(a | s)} A^{\pi_{\theta}}(s, a)<br>\end{aligned}<br>$$</p>
<p>描述更新策略相对于原策略的预期优势称为替代优势：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) - J(\pi_{\theta}) \approx \mathbb{E}<em>{s \sim \rho</em>{\pi_{\theta}}} \frac{\pi_{\theta + \Delta \theta}(a | s)}{\pi_{\theta}(a | s)} A^{\pi_{\theta}}(s, a) &#x3D; \mathcal{L}<em>{\pi</em>{\theta}}(\pi_{\theta + \Delta \theta})<br>$$</p>
<p>之前产生的近似误差可以用两种策略之间最坏情况的KL散度表示：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) - J(\pi_{\theta}) \ge \mathcal{L}<em>{\pi</em>{\theta}}(\pi_{\theta + \Delta \theta}) - C \mathcal{D}<em>{KL}^{\max} (\pi</em>{\theta} || \pi_{\theta + \Delta \theta})<br>$$</p>
<p>论文中推导出$C$的值以及目标函数改进的下限。如果我们改进右侧，可以保证左侧也得到改进。本质上，如果替代优势$\mathcal{L}<em>{\pi</em>{\theta}}(\pi_{\theta + \Delta \theta})$超过最坏情况下的近似误差$C \mathcal{D}<em>{KL}^{\max} (\pi</em>{\theta} || \pi_{\theta + \Delta \theta})$，我们一定会改进目标。</p>
<p>这就是<strong>单调改进定理</strong>。相应的过程是<strong>最小化最大化算法（MM）</strong>。即如果我们改进下限，我们也会将目标改进至少相同的量。</p>
<h2 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h2><p>在实际的算法实现方面，TRPO和自然策略梯度算法没有太大的区别。TRPO的核心是利用单调改进定理，验证更新是否真正改进了我们的策略。</p>
<p>咕咕咕</p>
<!-- ### **共轭梯度法（conjugate gradient method）**

在自然策略梯度算法中，计算逆Fisher矩阵是一个耗时且数值不稳定的过程，特别是对于神经网络，参数矩阵可以变得非常大，$O(\theta^3)$的时间复杂度将无法计算。

好消息是，我们对逆矩阵本身并不感兴趣。观察自然策略梯度的方程式，如果我们可以直接得到乘积$F^{-1}\nabla \log \pi_{\theta}(x)$，就不再需要逆。

引入共轭梯度法，这是一个近似上式乘积的数值过程，这样我们就可以避免计算逆矩阵。共轭梯度通常在$|\theta|$步内收敛，从而可以处理大矩阵。

### 线搜索（line search）

虽然自然梯度策略中提供了给定KL散度约束的最佳步长，但由于存在较多的近似值，实际上可能不满足该约束。

TRPO 通过执行线搜索来解决此问题，通过不断地迭代减小更新的大小，直到第一个不违反约束的更新。这个过程可以看作是不断缩小信任区域，即我们相信更新可以实际改进目标的区域。 -->

<h1 id="近端策略优化算法（PPO）"><a href="#近端策略优化算法（PPO）" class="headerlink" title="近端策略优化算法（PPO）"></a>近端策略优化算法（PPO）</h1><h2 id="TRPO算法的缺陷"><a href="#TRPO算法的缺陷" class="headerlink" title="TRPO算法的缺陷"></a>TRPO算法的缺陷</h2><ul>
<li>无法处理大参数矩阵</li>
<li>二阶优化很慢</li>
<li>TRPO 很复杂</li>
</ul>
<h2 id="PPO-Penalty"><a href="#PPO-Penalty" class="headerlink" title="PPO Penalty"></a>PPO Penalty</h2><p>TRPO在理论分析上推导出与KL散度相乘的惩罚项，但在实践中，这种惩罚往往过于严格，只产生非常小的更新。因此，问题是如何可靠地确定缩放参数$\beta$，同时避免overshooting：</p>
<p>$$<br>\Delta \theta^* &#x3D; \argmax_{\Delta \theta} \mathcal{L}<em>{\theta + \Delta \theta}(\theta + \Delta \theta) - \beta \mathcal{D}</em>{KL}(\pi_{\theta} || \pi_{\theta + \Delta \theta})<br>$$</p>
<p>PPO通过设置目标散度$\delta$的方式解决了这个问题，希望我们的每次更新都位于目标散度附近的某个地方。目标散度应该大到足以显著改变策略，但又应该小到足以使更新稳定。</p>
<p>每次更新后，PPO都会检查更新的大小。如果最终更新的散度超过目标散度的1.5倍，则下一次迭代我们将加倍$\beta$来更加重惩罚。相反，如果更新太小，我们将$\beta$减半，从而有效地扩大信任区域。迭代更新的思路与TRPO线搜索有一些相似之处，但PPO搜索是在两个方向上都有效的，而TRPO是单向减小的。</p>
<p>只是基于启发式确定的。根据经验，PPO对数值设置是非常不敏感的。总之，我们牺牲了一些数学上的严谨性来使实际的效果更好。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: initial policy parameters theta_0, initial KL penalty beta_0, target KL-divergence delta</span><br><span class="line">for k = 0, 1, 2, ... do</span><br><span class="line">    Collect set of partial trajectories D_k on policy pi_k = pi_&#123;theta_k&#125;</span><br><span class="line">    Estimate advantages A_t^&#123;pi_k&#125; using any advantage estimation algorithm</span><br><span class="line">    Compute policy update:</span><br><span class="line">        theta_&#123;k + 1&#125; = argmax(theta, L_&#123;theta_k&#125;(theta) - beta_k * D_&#123;KL&#125;(theta || theta_k))</span><br><span class="line">    by taking K steps of minibatch SGD (via Adam)</span><br><span class="line">    if D_&#123;KL&#125;(theta_&#123;k + 1&#125; || theta_k) &gt;= 1.5 delta then</span><br><span class="line">        beta_&#123;k + 1&#125; = beta_&#123;k&#125; * 2</span><br><span class="line">    else if D_&#123;KL&#125;(theta_&#123;k + 1&#125; || theta_k) &lt;= delta / 1.5 then</span><br><span class="line">        beta_&#123;k + 1&#125; = beta_&#123;k&#125; / 2</span><br><span class="line">    else</span><br><span class="line">        beta_&#123;k + 1&#125; = beta_k</span><br></pre></td></tr></table></figure>

<h2 id="PPO-Clip"><a href="#PPO-Clip" class="headerlink" title="PPO Clip"></a>PPO Clip</h2><p>与其费心随着时间的推移改变惩罚，PPO Clip直接限制策略可以改变的范围。我们重新定义了替代优势：</p>
<p>$$<br>\mathcal{L}<em>{\pi</em>{\theta}}^{CLIP}(\pi_{\theta_k}) \\<br>&#x3D; \mathbb{E}<em>{\tau \sim \pi</em>{\theta}} \left[ \sum_{t&#x3D;0}^T [\min \left( \rho_t(\pi_{\theta}, \pi_{\theta_k})A_{t}^{\pi_{\theta_k}}, clip(\rho_t(\pi_{\theta}, \pi_{\theta_k}), 1 - \epsilon, 1 + \epsilon)A_{t}^{\pi_{\theta_k}} \right)] \right]<br>$$</p>
<p>$\rho_t$ 为重要性采样：</p>
<p>$$<br>\rho_t(\theta) &#x3D; \frac{\pi_{\theta}(a_t | s_t)}{\pi_{\theta_k}(a_t | s_t)}<br>$$</p>
<p>为了实现想要达到的效果，我们应该调整$\epsilon$，作为对KL散度的隐式限制。根据经验，$\epsilon&#x3D;0.1 or 0.2$是实际效果较好的值。</p>
<h2 id="PPO2"><a href="#PPO2" class="headerlink" title="PPO2"></a>PPO2</h2><p>PPO2是Open AI发布的算法更新版本，是矢量化环境的PPO算法实现，针对 GPU 进行了优化，更好地支持并行训练。它与PPO也有许多实际实现的差异，例如优势被自动归一化、价值函数被裁剪等，但与本文概述的PPO具有相同的数学基础。如果需要直接使用OpenAI实现的PPO算法，则应该使用PPO2。</p>
]]></content>
      <tags>
        <tag>reinforcement learning</tag>
      </tags>
  </entry>
  <entry>
    <title>有关python环境的一些指南</title>
    <url>/2025/07/27/python-yi-xie-zhi-nan/</url>
    <content><![CDATA[<span id="more"></span>

<p><a href="https://pytorch.org/">&gt; PyTorch &lt;</a></p>
<p>[TOC]</p>
<h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n <span class="variable">$&#123;environment_name&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate <span class="variable">$&#123;environment_name&#125;</span></span><br><span class="line"><span class="comment"># conda deactivate $&#123;environment_name&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="选择python版本"><a href="#选择python版本" class="headerlink" title="选择python版本"></a>选择python版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install python=<span class="variable">$&#123;python_version&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="安装cuda"><a href="#安装cuda" class="headerlink" title="安装cuda"></a>安装cuda</h2><p><a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#ubuntu">&gt; official website &lt;</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install cudatoolkit==<span class="variable">$&#123;cuda_version&#125;</span> -c nvidia</span><br><span class="line">conda install cuda -c nvidia/label/cuda-<span class="variable">$&#123;cuda_version&#125;</span></span><br><span class="line">conda install nvidia::cuda-nvcc <span class="comment"># an alternative way</span></span><br></pre></td></tr></table></figure>

<h2 id="安装PyTorch"><a href="#安装PyTorch" class="headerlink" title="安装PyTorch"></a>安装PyTorch</h2><p><a href="https://pytorch.org/">&gt; PyTorch &lt;</a></p>
<h2 id="This-transaction-has-incompatible-packages-due-to-a-shared-path"><a href="#This-transaction-has-incompatible-packages-due-to-a-shared-path" class="headerlink" title="This transaction has incompatible packages due to a shared path."></a>This transaction has incompatible packages due to a shared path.</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda clean --all</span><br></pre></td></tr></table></figure>

<h2 id="安装torch-scatter"><a href="#安装torch-scatter" class="headerlink" title="安装torch-scatter"></a>安装torch-scatter</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pytorch-scatter -c pyg</span><br></pre></td></tr></table></figure>

<h2 id="查询cuda-memory"><a href="#查询cuda-memory" class="headerlink" title="查询cuda memory"></a>查询cuda memory</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi --query-gpu=memory.total,memory.used --format=csv</span><br></pre></td></tr></table></figure>

<h2 id="检查当前GPU内存占用情况"><a href="#检查当前GPU内存占用情况" class="headerlink" title="检查当前GPU内存占用情况"></a>检查当前GPU内存占用情况</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi --query-compute-apps=pid,name,gpu_bus_id,used_memory --format=csv</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvidia-smi --help-query-compute-apps</span><br><span class="line"></span><br><span class="line">List of valid properties to query <span class="keyword">for</span> the switch <span class="string">&quot;--query-compute-apps&quot;</span>:</span><br><span class="line"></span><br><span class="line">Section about Active Compute Processes properties</span><br><span class="line">List of processes having compute context on the device.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;timestamp&quot;</span></span><br><span class="line">The timestamp of when the query was made <span class="keyword">in</span> format <span class="string">&quot;YYYY/MM/DD HH:MM:SS.msec&quot;</span>.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gpu_name&quot;</span></span><br><span class="line">The official product name of the GPU. This is an alphanumeric string. For all products.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gpu_bus_id&quot;</span></span><br><span class="line">PCI bus <span class="built_in">id</span> as <span class="string">&quot;domain:bus:device.function&quot;</span>, <span class="keyword">in</span> hex.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gpu_serial&quot;</span></span><br><span class="line">This number matches the serial number physically printed on each board. It is a globally unique immutable alphanumeric value.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gpu_uuid&quot;</span></span><br><span class="line">This value is the globally unique immutable alphanumeric identifier of the GPU. It does not correspond to any physical label on the board.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;pid&quot;</span></span><br><span class="line">Process ID of the compute application</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;process_name&quot;</span> or <span class="string">&quot;name&quot;</span></span><br><span class="line">Process Name</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;used_gpu_memory&quot;</span> or <span class="string">&quot;used_memory&quot;</span></span><br><span class="line">Amount memory used on the device by the context. Not available on Windows when running <span class="keyword">in</span> WDDM mode because Windows KMD manages all the memory not NVIDIA driver.</span><br></pre></td></tr></table></figure>

<h1 id="orin安装pytorch"><a href="#orin安装pytorch" class="headerlink" title="orin安装pytorch"></a>orin安装pytorch</h1><h2 id="error-‘class-torch-Library’-has-no-member-named-‘set-python-module’-22"><a href="#error-‘class-torch-Library’-has-no-member-named-‘set-python-module’-22" class="headerlink" title="error: ‘class torch::Library’ has no member named ‘set_python_module’ 22"></a>error: ‘class torch::Library’ has no member named ‘set_python_module’ 22</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pytorch/vision torchvision</span><br><span class="line"><span class="built_in">cd</span> torchvision</span><br><span class="line">git checkout v0.16.0</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="安装timm"><a href="#安装timm" class="headerlink" title="安装timm"></a>安装timm</h2><p><a href="https://blog.csdn.net/zlbbme/article/details/128647059">&gt; link &lt;</a></p>
<p><a href="https://pypi.tuna.tsinghua.edu.cn/simple/timm/">&gt; package &lt;</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget &lt;package&gt;.whl</span><br><span class="line">pip install &lt;package&gt;.whl</span><br></pre></td></tr></table></figure>

<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><h2 id="下载数据集"><a href="#下载数据集" class="headerlink" title="下载数据集"></a>下载数据集</h2><h3 id="用-wget-下载-KITTI-上的数据"><a href="#用-wget-下载-KITTI-上的数据" class="headerlink" title="用 wget 下载 KITTI 上的数据"></a>用 wget 下载 KITTI 上的数据</h3><p>先开代理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -b &lt;<span class="built_in">link</span>&gt;.zip</span><br></pre></td></tr></table></figure>

<p>查看进度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f wget-log</span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip &lt;name&gt;.zip</span><br></pre></td></tr></table></figure>

<h3 id="从drive-google下载"><a href="#从drive-google下载" class="headerlink" title="从drive google下载"></a>从drive google下载</h3><p><a href="https://blog.csdn.net/qq_43235540/article/details/135976536">&gt; link &lt;</a></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="一文解决-RuntimeError-CUDA-out-of-memory-全网最全"><a href="#一文解决-RuntimeError-CUDA-out-of-memory-全网最全" class="headerlink" title="一文解决 RuntimeError: CUDA out of memory. 全网最全"></a>一文解决 RuntimeError: CUDA out of memory. 全网最全</h2><p><a href="https://blog.csdn.net/m0_50502579/article/details/126059178">&gt; link &lt;</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    depth_pred = model(rgb)</span><br></pre></td></tr></table></figure>

<h1 id="Linux的一些操作"><a href="#Linux的一些操作" class="headerlink" title="Linux的一些操作"></a>Linux的一些操作</h1><h2 id="读取当前路径下的文件总大小"><a href="#读取当前路径下的文件总大小" class="headerlink" title="读取当前路径下的文件总大小"></a>读取当前路径下的文件总大小</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>三（四）元环计数</title>
    <url>/2025/07/27/san-si-yuan-huan-ji-shu/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="无向图三元环计数"><a href="#无向图三元环计数" class="headerlink" title="无向图三元环计数"></a>无向图三元环计数</h3><p>将边定向，度数少的点连向度数多的点，度数相同时编号小的连向编号大的。这样保证一个点它的出度不会超过 $ O(\sqrt{m}) $ （因为原本度数大于 $ \sqrt{m} $ 的点不会超过 $ \sqrt{m} $ 个）。<br>然后暴力。对于每个$u$，找$ v \in e[u] $, $ w \in e[v] $ ,若 $ w \in e[u] $ 那么找到三元环。一个个数就行。  </p>
<h3 id="无向图四元环计数"><a href="#无向图四元环计数" class="headerlink" title="无向图四元环计数"></a>无向图四元环计数</h3><p>和无向图三元环计数一样将边定向，不同的是计数方式会麻烦一点。<br>定向后四元环会出现两种情况：<br>$$<br>1 \rightarrow 2, 2 \rightarrow 3, 3 \rightarrow 4, 1 \rightarrow 4\<br>1 \rightarrow 2, 2 \rightarrow 3, 1 \rightarrow 4, 4 \rightarrow 3<br>$$<br>考虑通过对角$2, 4$ 计数。先将点按照定向后的图拓扑排序。先对于每一个$2$，找$ 1 \in ee[2] $, $ 3 \in ee[2] $, $ 4 \in e[1] $, $ 4 \in e[1] $, $ 4 $的拓扑序在$2$后，其中ee代表的是原图的边，e代表的是定向后的边。开个数组统计。  </p>
<p>时间复杂度都是 $ O(m \sqrt{m}) $ 。  </p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, M = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m, d[N], id[N], rnk[N];</span><br><span class="line"><span class="type">int</span> ex[M], ey[M];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], ee[N];</span><br><span class="line"><span class="type">int</span> cnt3 = <span class="number">0</span>, cnt4 = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> vis[N]; <span class="type">int</span> num[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		e[i].<span class="built_in">clear</span>(), ee[i].<span class="built_in">clear</span>();</span><br><span class="line">		vis[i] = <span class="number">0</span>, num[i] = <span class="number">0</span>;</span><br><span class="line">		cnt3 = cnt4 = <span class="number">0</span>;</span><br><span class="line">		d[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;ex[i], &amp;ey[i]);</span><br><span class="line">		++d[ex[i]], ++d[ey[i]];</span><br><span class="line">		ee[ex[i]].<span class="built_in">pb</span>(ey[i]), ee[ey[i]].<span class="built_in">pb</span>(ex[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x = ex[i], y = ey[i];</span><br><span class="line">		<span class="keyword">if</span>(d[x] &gt; d[y] || (d[x] == d[y] &amp;&amp; x &gt; y)) <span class="built_in">swap</span>(x, y);</span><br><span class="line">		e[x].<span class="built_in">pb</span>(y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[i]) vis[v] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> u : e[i]) <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(vis[v]) ++cnt3;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[i]) vis[v] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) id[i] = i;</span><br><span class="line">	<span class="built_in">sort</span>(id + <span class="number">1</span>, id + n + <span class="number">1</span>, [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123; <span class="keyword">return</span> d[x] != d[y] ? d[x] &lt; d[y] : x &lt; y; &#125;);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rnk[id[i]] = i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> u : ee[i]) <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(rnk[v] &gt; rnk[i])</span><br><span class="line">			cnt4 = (cnt4 + num[v]) % mod, num[v]++;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> u : ee[i]) <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(rnk[v] &gt; rnk[i]) num[v] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, cnt3, cnt4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> T; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">	<span class="keyword">for</span>(; T; --T) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="有向图三（四）元环计数"><a href="#有向图三（四）元环计数" class="headerlink" title="有向图三（四）元环计数"></a>有向图三（四）元环计数</h3><p>先将边看作无向边，枚举（统计）环的时候再判断方向即可。  </p>
<h3 id="竞赛图找三元环"><a href="#竞赛图找三元环" class="headerlink" title="竞赛图找三元环"></a>竞赛图找三元环</h3><p>只要不是拓扑图就有三元环。  </p>
<h3 id="竞赛图三元环计数"><a href="#竞赛图三元环计数" class="headerlink" title="竞赛图三元环计数"></a>竞赛图三元环计数</h3><p>容斥。<br>$$<br>Ans &#x3D; C(n, 3) - \sum_{i&#x3D;1}^{n}C(d_i, 2) \space d_i表示i点的出度<br>$$</p>
]]></content>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>退役后的日子</title>
    <url>/2025/07/27/tui-yi-hou-de-ri-zi/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="2022-9-24"><a href="#2022-9-24" class="headerlink" title="2022.9.24"></a>2022.9.24</h3><p><a href="https://codeforces.com/contest/1479/problem/D">CF1479D Odd Mineral Resource</a><br>假如不需要知道路径上哪些数只出现奇数次，那么这道题及类似于<a href="https://uoj.ac/problem/207">共价大爷游长沙</a>。<br>现在考虑如何找出路径上出现奇数次，范围在 $ [l, r] $ 之间的任意数。考虑用欧拉序的方式来维护路径，具体用主席树维护某一个值的出现次数。<br><a href="https://codeforces.com/contest/1479/submission/172846022">My Submission</a>  </p>
<p><a href="https://codeforces.com/contest/1515/problem/I">CF1515I Phoenix and Diamonds</a><br>读错题意若干次QAQ<br>如果用线段树暴力维护，每次选择连续一段尽可能取走，很容易被卡复杂度，实测Time Limit Exceeded on Test 71。<br>由于 $ c $ 一开始非常大，$ w_i $ 则较小，前面可以尽可能取，直到剩下的 $ c $ 小于 $ 10^5 $ 。<br>考虑对于每个 $ c $ ，大于 $ \lfloor c \rfloor $ 最多取一次，剩下的要在小于 $ \lfloor c \rfloor $ 中取。由于取的顺序是一定的，所以可以通过线段树维护能取到 $ \lfloor c \rfloor $ 的哪一个钻石，对于小于 $ \lfloor c \rfloor $ 的可以用另一个线段树维护。<br>考虑对于不同的 $ c $，$ \lfloor c \rfloor $ 会不同，难以预处理。直接按二进制按位预处理即可。<br><a href="https://codeforces.com/contest/1515/problem/I">My Submission</a>  </p>
<p>昨天CF有点摆。。。周末还有icpc网络赛。。。<br>晚上打了把ABC，状态极度不佳，明天靠队友。。。  </p>
<h3 id="2022-9-25"><a href="#2022-9-25" class="headerlink" title="2022.9.25"></a>2022.9.25</h3><p>dbq QAQ，我是罚时机器。。。<br>今天状态很不对，很多莫名其妙的错误同一天犯（数组开小、忘记取min，题意看错），好在队友发挥了作用，最后八题垫底（我的锅）（但我还是写了七道）  </p>
<h3 id="2022-9-28"><a href="#2022-9-28" class="headerlink" title="2022.9.28"></a>2022.9.28</h3><p>技能CD了一下，稍微暖一下手感~<br><a href="https://www.luogu.com.cn/problem/P5115">Check,Check,Check one two!</a><br>用后缀自动机维护parent树，任意两个endpos的lca的len是它们的最长公共前缀。<br>对于点对 $ (i, j) $ ， $ s[i - a + 1, i + b - 1] &#x3D; s[j - a + 1, j + b - 1] $ ，则贡献为 $ a \times b $ 。我们现在很容易地维护了前缀，考虑后缀如何处理。由于每个点对 $ (i, j) $ ，它们会在 $ (i + 1, j + 1) $ 至 $ (i + b - 1, j + b - 1) $ 都计算一边，故每次加上贡献 $ a $ 即可。<br>考虑 $ k1, k2 $ 的限制。对 $ (i, j) $ 已知的前缀进行约束，即直接统计点对在该前缀子串上都合法的情况。此外，对于 $ s[m, m + k1] $ （举个栗子），之前在 $ m $ 处的贡献应减去，且减去后不会对此再有影响。<br><a href="https://www.luogu.com.cn/record/87858659">My Submission</a><br>PS: LJ不在QQ群里供题了啊QAQ，日常口胡断粮了<br>最近要期中考，考虑先放一放ACM，先苟住学分绩。。。  </p>
<h3 id="2022-10-3"><a href="#2022-10-3" class="headerlink" title="2022.10.3"></a>2022.10.3</h3><p><a href="https://www.cnblogs.com/daniel14311531/p/16751516.html">&gt; Here &lt;</a>  </p>
<h3 id="2022-10-4"><a href="#2022-10-4" class="headerlink" title="2022.10.4"></a>2022.10.4</h3><p><a href="https://codeforces.com/problemset/problem/1734/F">CF1734F Zeros and Ones</a><br>为什么我想不到QAQ<br><a href="https://zhuanlan.zhihu.com/p/567630176">Solution from Zhihu</a>  </p>
<h3 id="2022-10-5"><a href="#2022-10-5" class="headerlink" title="2022.10.5"></a>2022.10.5</h3><p><a href="https://codeforces.com/contest/1712/problem/F">CF1712F Triameter</a><br><a href="https://codeforces.com/contest/1712/submission/174760486">My Submission</a>  </p>
<h3 id="2022-10-8"><a href="#2022-10-8" class="headerlink" title="2022.10.8"></a>2022.10.8</h3><p><a href="https://atcoder.jp/contests/agc009/tasks/agc009_d">AGC009D Uninity</a><br>题意实际上是求最大深度最小的点分树的深度。<br>考虑正常点分治下层数已经是 $ \mathcal{O}(\log n) $ 的，那么最优状态下一定小于正常点分治的深度，即深度状态可以状态压缩。<br>将节点按 $ 0, 1, 2, \dots, k $ 编号表示节点的Uninity值，其中叶子节点编号为 $ 0 $ 。<br>根据点分树的性质，任意两个编号相同的节点路径上一定存在编号比它们大的节点。<br>每个节点存状态数组 $ ned[u] $ ，表示 $ u $ 节点的子树内未完成成对匹配的编号，按位存储。对于 $ u $ ，假设有两个不同的子节点 $ v, w $ ，若 $ \exist x, 2^{x} \in ned[v] \and ned[w] $ ，则 $ u $ 节点编号要大于 $ x $ ，否则 $ u $ 子树下编号为 $ x $ 将无法完成匹配。同时，若 $ \exist x, 2^{x} \in ned[v] $ ，则 $ u $ 也不能选 $ x $ ，否则 $ u $ 会与 $ v $ 子树内的同编号点无法匹配。<br>$ u $ 的编号从小到大贪心取即可。通过位运算骚操作可以让复杂度变为 $ \mathcal{O}(n) $ 。<br>[My Submission])(<a href="https://atcoder.jp/contests/agc009/submissions/35453858">https://atcoder.jp/contests/agc009/submissions/35453858</a>)  </p>
<h3 id="2022-10-9"><a href="#2022-10-9" class="headerlink" title="2022.10.9"></a>2022.10.9</h3><p>突然发现自己构造能力很差，再不补就是弱鸡水平了。<br>今天看到一个构造，要求构造一个 不存在长度大于等于3的等差子序列 的排列。方法大概是先将奇偶分开，奇数在前，偶数在后，这样不存在既有奇数又有偶数的等差子序列。再将奇数列和偶数列递归构造。这种方法同样适用于构造已知元素的数列，使它等差子序列个数尽可能少。<br>补了一下ICPC2022网络赛第一场的K题（可以在pintia上看）。可以发现最多不能击败 $ 2 \sqrt{\max{x_i}} $ ，因为可以先花 $ \sqrt{max{x_i}} $ 的时间叠buff，再花同样的时间将buff叠战力，然后无敌。同样，buff最多叠 $ \sqrt{max{x_i}} $ 层，因为多叠的一层的时间将它用来叠战力，到无敌时始终更优。然后dp，$ f[i][j][k] $ 表示干了第i个，没干掉j个，buff层数为k的最大战力。<br>这周戒题，准备期中考。  </p>
<h3 id="2022-10-18"><a href="#2022-10-18" class="headerlink" title="2022.10.18"></a>2022.10.18</h3><p><a href="https://atcoder.jp/contests/agc023/tasks/agc023_f">AGC023F 01 on Tree</a><br>观察不难发现，父亲节点一定先于儿子节点取，对于每个儿子向父亲合并时，最优策略一定是儿子的序列进行归并（每个儿子的子序列保持不变）。这有了递归的基础。<br>此外，我们还可以发现，假如当前有0，则能取尽取；如果有1，则取尽可能少的1去获得足量的0。考虑对于一个01序列，假如取了前面的一串1，则后面紧跟着的一串0都要跟着取，也就是类似11…100…0这样的取法是绑定的，不会在归并时改变。考虑取法的优先级。设这样的序列$a, b$ ，其中 $a_0, a_1, b_0, b_1$ 分别表示各自0、1的个数，比较相对位置，若$ a_1 \times b_0 &lt; b_1 \times a_0 $ ，则 $ a $ 在前更优。<br>此时已经可以直接dfs并用set维护11…100…0序列并暴力启发式合并了，不过这代码难度。。。<br>与其直接dfs，不如考虑一个序列如何直接接上父亲。如果这个序列是整棵树上最优的，那他可以直接接在父亲所在的序列后，然后合并成新的序列，虽然不满足11…100…0的形式，但是合并的贡献计算方式一致。用并查集和优先队列维护即可。<br><a href="https://atcoder.jp/contests/agc023/submissions/35758187">My Submission</a><br>（啊，这是凌晨写的）<br><a href="https://www.luogu.com.cn/blog/luotianze/solution-p5496#">PAM（回文自动机）</a>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2100010</span>;</span><br><span class="line"><span class="type">int</span> n, id[N];</span><br><span class="line"><span class="type">char</span> s[N]; <span class="type">int</span> len[N], fail[N], tot, sz[N], ch[N][<span class="number">26</span>], cur;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	len[<span class="number">0</span>] = <span class="number">0</span>, len[<span class="number">1</span>] = <span class="number">-1</span>, fail[<span class="number">0</span>] = <span class="number">1</span>, fail[<span class="number">1</span>] = <span class="number">0</span>, tot = <span class="number">1</span>, cur = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gfail</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(; now - len[x] - <span class="number">1</span> &lt; <span class="number">1</span> || s[now - len[x] - <span class="number">1</span>] != s[now]; x = fail[x]);</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> pos = <span class="built_in">gfail</span>(cur, now);</span><br><span class="line">	<span class="keyword">if</span>(!ch[pos][c]) &#123;</span><br><span class="line">		++tot;</span><br><span class="line">		fail[tot] = ch[<span class="built_in">gfail</span>(fail[pos], now)][c];</span><br><span class="line">		ch[pos][c] = tot, len[tot] = len[pos] + <span class="number">2</span>, sz[tot] = sz[fail[tot]] + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cur = ch[pos][c];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>), n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">		s[i] = (s[i] - <span class="number">97</span> + ans) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">		<span class="built_in">insert</span>(i, s[i] - <span class="number">97</span>), ans = sz[cur];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2022-10-26"><a href="#2022-10-26" class="headerlink" title="2022.10.26"></a>2022.10.26</h3><p>少年不知mt19937 rnd(time(0))贵，错把srand(time(0)) 当宝贝。  </p>
<h3 id="2022-11-6"><a href="#2022-11-6" class="headerlink" title="2022.11.6"></a>2022.11.6</h3><p>被各种事情搞得焦头烂额，又要大一年度项目又要思政实践项目又要考试又要竞赛，感觉再搞下去离大学ICPC&#x2F;CCPC退役都不远了。<br>今天下午是我的第一场ICPC，不奢求有多好的成绩吧，只希望能够尽可能好地发挥吧，最近状态极度不稳，水平在幼儿园和红名之间剧烈波动，构造题、思维题依旧是我的弱项。<br>铁了  </p>
<h3 id="2022-11-9"><a href="#2022-11-9" class="headerlink" title="2022.11.9"></a>2022.11.9</h3><p><a href="https://codeforces.com/gym/103428/problem/G">G. Shinyruo and KFC</a> 值域根号分治<br><a href="https://codeforces.com/gym/103428/problem/M">M. 810975</a> 隔板法  </p>
<h3 id="2022-11-12"><a href="#2022-11-12" class="headerlink" title="2022.11.12"></a>2022.11.12</h3><p>关于某个质数的剩余系的题原根是真的好用。原根可以把数的乘法变成原根上指数的加法，这样也可以快速计算二次剩余。对于每个质数都有原根。<br><a href="https://codeforces.com/gym/103428/problem/C">C. Assign or Multiply</a>利用原根把乘法变加法，用数组标记某个数是否出现过，每加入一个数，进行循环移位，找到循环移位后值不同的位置并修改，这个操作总共是不超过n次的，利用二分和树状数组维护的哈希来找到这些位置并修改。  </p>
<h3 id="2022-11-13"><a href="#2022-11-13" class="headerlink" title="2022.11.13"></a>2022.11.13</h3><p>假如不能比较两个数的两两关系（拓扑图而非竞赛图）的话还是不要用sort了吧。。。<br><a href="https://atcoder.jp/contests/abc277/tasks/abc277_h">Ex - Constrained Sums</a><br>约束 $ L \leq a + b, a \in [0, M], b \in [0, M] $ 等价于 $ \forall x \in [0, M], x \leq a \or L - x + 1 \leq b $ 成立，证明显然。如果是 $ a + b \leq R $ 的用互补律即可 $ (a \or b &#x3D; \overline{\overline{a} \and \overline{b}}) $ 。<br>然后2-sat，按照关系连边，详见代码<a href="https://atcoder.jp/contests/abc277/submissions/36472137">My Submission</a>  </p>
]]></content>
      <tags>
        <tag>口胡</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch-checkpoints相关</title>
    <url>/2025/07/27/pytorch-checkpoints/</url>
    <content><![CDATA[<span id="more"></span>

<p>[TOC]</p>
<h2 id="checkpoints-导出"><a href="#checkpoints-导出" class="headerlink" title="checkpoints 导出"></a>checkpoints 导出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.save(&#123;<span class="string">&#x27;model_state_dict&#x27;</span>: model.state_dict()&#125;, <span class="string">&#x27;/path/to/checkpoints&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="checkpoints-导入"><a href="#checkpoints-导入" class="headerlink" title="checkpoints 导入"></a>checkpoints 导入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">state = torch.load(<span class="string">&#x27;/path/to/checkpoints&#x27;</span>)</span><br><span class="line">model.load_state_dict(state[<span class="string">&#x27;model_state_dict&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h2 id="model-state-dict-描述"><a href="#model-state-dict-描述" class="headerlink" title="model.state_dict() 描述"></a>model.state_dict() 描述</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(method) <span class="keyword">def</span> <span class="title function_">state_dict</span>(<span class="params"></span></span><br><span class="line"><span class="params">    *,</span></span><br><span class="line"><span class="params">    prefix: <span class="built_in">str</span> = ...,</span></span><br><span class="line"><span class="params">    keep_vars: <span class="built_in">bool</span> = ...</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span><br></pre></td></tr></table></figure>

<h2 id="model-state-dict-keys"><a href="#model-state-dict-keys" class="headerlink" title="model.state_dict().keys()"></a>model.state_dict().keys()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sequential(</span><br><span class="line">  (0): Conv2d(3, 16, kernel_size=(11, 11), stride=(3, 3))</span><br><span class="line">  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span><br><span class="line">  (2): ReLU(inplace=True)</span><br><span class="line">  (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="line">  (4): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1))</span><br><span class="line">  (5): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span><br><span class="line">  (6): ReLU(inplace=True)</span><br><span class="line">  (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="line">  (8): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="line">  (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span><br><span class="line">  (10): ReLU(inplace=True)</span><br><span class="line">  (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))</span><br><span class="line">  (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span><br><span class="line">  (13): ReLU(inplace=True)</span><br><span class="line">  (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="line">  (15): Flatten(start_dim=1, end_dim=-1)</span><br><span class="line">  (16): Linear(in_features=3136, out_features=2048, bias=True)</span><br><span class="line">  (17): ReLU(inplace=True)</span><br><span class="line">  (18): Linear(in_features=2048, out_features=1, bias=True)</span><br><span class="line">  (19): Sigmoid()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(model.state_dict().keys())</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">odict_keys([&#x27;0.weight&#x27;, &#x27;0.bias&#x27;, &#x27;1.weight&#x27;, &#x27;1.bias&#x27;, &#x27;1.running_mean&#x27;, &#x27;1.running_var&#x27;, &#x27;1.num_batches_tracked&#x27;, &#x27;4.weight&#x27;, &#x27;4.bias&#x27;, &#x27;5.weight&#x27;, &#x27;5.bias&#x27;, &#x27;5.running_mean&#x27;, &#x27;5.running_var&#x27;, &#x27;5.num_batches_tracked&#x27;, &#x27;8.weight&#x27;, &#x27;8.bias&#x27;, &#x27;9.weight&#x27;, &#x27;9.bias&#x27;, &#x27;9.running_mean&#x27;, &#x27;9.running_var&#x27;, &#x27;9.num_batches_tracked&#x27;, &#x27;11.weight&#x27;, &#x27;11.bias&#x27;, &#x27;12.weight&#x27;, &#x27;12.bias&#x27;, &#x27;12.running_mean&#x27;, &#x27;12.running_var&#x27;, &#x27;12.num_batches_tracked&#x27;, &#x27;16.weight&#x27;, &#x27;16.bias&#x27;, &#x27;18.weight&#x27;, &#x27;18.bias&#x27;])</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Video Depth Anything</title>
    <url>/2025/07/27/video-depth-anything/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>Depth Anything 的问题：处理视频时遭受时间不一致性（temporal inconsistency）。  </p>
<p>作者提出了Video Depth Anything，能够对长视频高效地生成高质量持续的深度估计。  </p>
<p>Video Depth Anything 基于 Depth Anything v2 ，将它的 head 替换为高效的 spatial-temporal<br>head。  </p>
<p>作者设计了直接且高效的时间一致性损失函数，通过约束时间深度梯度，消除了额外的几何先验的需求。  </p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>特别地，作者先设计了轻量的 spatial-temporal head (STH) 去替换 DPT head ，然后使得时间信息能够交流。STH包含四个时间注意力层 (temporal attention layers) , 应用在每个空间位置的时间维度。只在 head 引入 时间注意力防止了已经学习过的表示（representation）被有限的视频数据破坏。  </p>
<p>接着，作者提出了时间梯度匹配损失函数，去约束沿着时间维度的深度估计梯度，匹配从ground truth 计算得到的值。这个损失函数同时用尺度平移不变损失和空间梯度匹配损失优化了。  </p>
<p>为了能够做长视频的推断，作者开发了新的分段处理策略（segment-wise processing strategy）。每一个新的段都用 8 个重叠的帧和之前视频片段的两个关键帧连接，共形成 32 帧。然后，为了保证平滑性，重叠的帧将逐步在两个连续的窗口插值。  </p>
<h1 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h1><p>略  </p>
<h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><p><img src="/2025/07/27/video-depth-anything/video_depth_anything_pipeline.jpg">  </p>
<h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p>由于缺少足够的视频资源，作者从预训练的 Depth Anything v2 开始，采用共同训练策略，同时用图像和视频数据。  </p>
<h3 id="Depth-Anything-Encoder"><a href="#Depth-Anything-Encoder" class="headerlink" title="Depth Anything Encoder"></a>Depth Anything Encoder</h3><p>用了 Depth Anything Encoder 作为模型的 encoder。为了减少训练损耗和保护训练好的特征，这个encoder要冻结参数。  </p>
<p>为了用image encoder提取视频帧里的特征，作者将视频片段中的时间维度折叠到批次（batch）维度中。  </p>
<p>输入：$ {X} \in \mathbb{R}^{(B \times N) \times C \times H \times W} $ ，B为batch大小，N为视频片段帧数，C为通道数。  </p>
<p>通过encoder后得到中间特征图 $ {F_{i}} \in \mathbb{R}^{(B \times N) \times (\frac{H}{p} \times \frac{W}{p}) \times C_i} $ ，p为encoder的patch大小。  </p>
<p>image encoder忽略了两帧之间时间信息，需要spatiotemporal head。  </p>
<h3 id="Spatiotemporal-Head-STH"><a href="#Spatiotemporal-Head-STH" class="headerlink" title="Spatiotemporal Head(STH)"></a>Spatiotemporal Head(STH)</h3><p>STH在DPT（Vision transformers for dense prediction） head的基础上多插入了一个时间层来捕获时间信息。一个时间层包含多头自注意力模型和前馈网络（feed-forward network）。当时间层输入一个特征 $ {F_{i}} $ ，时间维度N孤立，自注意力只在时间维度进行，以促进时间特征的交互。为了捕捉不同帧之间的时序位置关系，我们利用绝对位置嵌入来编码视频序列中的时序位置信息。  </p>
<p>STH在 $ {F_i} $ 均匀采样了4个特征图（包含最终特征，记为 $ {F_4} $）作为输入，预测深度图 $ {D} \in \mathbb{R}^{H \times W} $ 。选中的 $ {F_i} $ 输入reassemble layer生成特征金字塔。然后，特征从低分辨率到高分辨率通过fusion layer进行融合。reassemble layer和fusion layer由DPT提出。最终融合得到的高分辨率特征图通过输出层生成深度图 $ {D} $ 。为了减少计算量，作者在一些特征分辨率低的地方插入了temporal layer。  </p>
<h2 id="Temporal-Gradient-Matching-Loss"><a href="#Temporal-Gradient-Matching-Loss" class="headerlink" title="Temporal Gradient Matching Loss"></a>Temporal Gradient Matching Loss</h2><h3 id="OPW-Optical-Flow-Based-Warping-loss"><a href="#OPW-Optical-Flow-Based-Warping-loss" class="headerlink" title="OPW(Optical Flow Based Warping) loss"></a>OPW(Optical Flow Based Warping) loss</h3><p>为了约束时间一致性，之前的视频模型假定相邻帧对应位置的深度一致，通过光流检验。  </p>
<p>对于两个深度预测结果， $ p_{i}, p_{i + 1} $ ，根据从光流推出的扭曲关系， $ p_{i + 1} $ 被扭曲成 $ \hat{p}_{i} $ ，则损失函数为  </p>
<p>$$<br>\mathcal{L}<em>{OPW}&#x3D;\frac{1}{N - 1}\sum</em>{i &#x3D; 2}^{N} || p_{i} - \hat{p}_{i} ||<br>$$</p>
<p>N为视频窗口长度， $ ||\cdot || $ 为 $ l1 $ 距离。  </p>
<p>OPW的严重问题：相邻帧对应点的深度不是不变的。  </p>
<p>作者提出新的方式。  </p>
<h3 id="Temporal-gradient-matching-loss-TGM"><a href="#Temporal-gradient-matching-loss-TGM" class="headerlink" title="Temporal gradient matching loss(TGM)"></a>Temporal gradient matching loss(TGM)</h3><p>我们假设相邻预测帧中对应点的深度变化应与在ground truth中观察到的变化保持一致。  </p>
<p>$$<br>\mathcal{L}<em>{SE} &#x3D; \frac{1}{N - 1} \sum</em>{i &#x3D; 2}^{N}|| \  |\hat{d}_i - d_i| - |\hat{g}_i - g_i| \  ||<br>$$</p>
<p>这里d, g都是预测值和ground truth缩放和平移后的版本。  </p>
<p>然而，生成光流会带来额外的开销。  </p>
<p>事实上，不需要用光流得到对应点来使用，可以直接用相邻帧同一坐标系的深度计算损失。假设是相邻帧同一个 图像位置 的深度应当与ground truth一致。这个过程和在时间维度计算梯度一致。  </p>
<p>$$<br>\mathcal{L}<em>{TGM} &#x3D; \frac{1}{N - 1} \sum</em>{i &#x3D; 1}^{N - 1}|| \  |d_{i + 1} - d_i| - |g_{i + 1} - g_{i}| \  ||<br>$$</p>
<p>实践中，参考的点在ground truth里在相邻帧深度变化较小，$ |g_{i + 1} - g_i| &lt; 0.05 $ ，避免边缘、动态物体等因素对深度图产生突然变化使得训练不稳定。  </p>
<h3 id="总损失"><a href="#总损失" class="headerlink" title="总损失"></a>总损失</h3><p>$$<br>\mathcal{L}<em>{all}&#x3D;\alpha\mathcal{L}</em>{TGM}+\beta\mathcal{L}_{ssi}<br>$$</p>
<p>$ \mathcal{L}_{ssi} $ 是尺度和平移不变损失函数（见MiDaS）。$ \alpha, \beta $ 用于平衡时空一致性和单帧的空间结构。  </p>
<h2 id="Inference-strategy-for-super-long-sequence"><a href="#Inference-strategy-for-super-long-sequence" class="headerlink" title="Inference strategy for super-long sequence"></a>Inference strategy for super-long sequence</h2><p>提出了关键帧参考（key-frame referencing），继承之前预测的尺度和平移信息，将插值重叠保证平滑变化。  </p>
<h3 id="key-frame-referencing"><a href="#key-frame-referencing" class="headerlink" title="key-frame referencing"></a>key-frame referencing</h3><p><img src="/2025/07/27/video-depth-anything/inference_strategy_for_long_videos.jpg"></p>
<p>将一段视频分成三段：$ N - T_o - T_k $ 张未来的帧，$ T_o $ 张重叠的帧（之前的帧），$ T_k $ 张关键帧（之前的帧）。关键帧从之前的帧里子采样，间隔大小为 $ \Delta k $ 。这种方法将早期窗口的内容最小化计算量，融入当前窗口。根据实验结果，这种简单的策略可以显著减少累积的尺度漂移，特别是对于长视频。  </p>
<h3 id="Depth-clip-stitching"><a href="#Depth-clip-stitching" class="headerlink" title="Depth clip stitching"></a>Depth clip stitching</h3><p>相邻窗口的 $ T_o $ 张重叠的帧对避免深度图像闪烁很重要。  </p>
<ol>
<li><p>通过共享部分帧特征，连续窗口间的尺度和平移将更加相似。  </p>
</li>
<li><p>重叠帧的深度预测是通过在两个片段之间进行插值来更新的。</p>
</li>
</ol>
<p>假设之前的段第 $ o_i $ 张重叠帧的深度为 $ {D}<em>{o_i} ^{pre} $ ，当前的段深度为 $ {D}</em>{o_i}^{cur} $ ，则最终深度为 $ {D}<em>{o_i} &#x3D; {D}</em>{o_i}^{pre} \cdot w_i + {D}_{o_i}^{cur} \cdot (1 - w_i) $ ， $ w_i $ 大小从1到0、长度为 $ T_o $ 的线性衰减函数。  </p>
<h1 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h1><p>略  </p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>略  </p>
]]></content>
      <tags>
        <tag>Monocular Depth Estimation</tag>
      </tags>
  </entry>
  <entry>
    <title>「雅礼集训 2017 Day11」PATH</title>
    <url>/2025/07/27/ya-li-ji-xun-2017-day11-path/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/6051">「雅礼集训 2017 Day11」PATH</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$$<br>概率 &#x3D; \frac{合法方案数}{总方案数}\\<br>m &#x3D; \sum_{i &#x3D; 1}^{n} a_i\\<br>总方案数 &#x3D; \frac{m!}{\prod a_i!}\\<br>合法方案数 &#x3D; \frac{m!}{\prod hook(i, j)} &#x3D; \prod_{1 \leq k \leq i \leq n} \prod_{a_{i + 1} &lt; j \leq a_i} (a_k - k + i - j + 1)\\<br>&#x3D; \prod_{1 \leq j \leq i \leq n} \frac{(a_j - a_{i + 1} + i - j)!}{(a_j - a_i + i - j)!}\\<br>&#x3D; \frac{\prod_{i &#x3D; 1}^{n}(n - i + a_i)}{\prod_{1 \leq i &lt; j \leq n}((a_i - i) - (a_j - j))}<br>$$</p>
<p>$$<br>概率 &#x3D; (\prod_{i &#x3D; 1}^n \frac{a_i!}{(n + a_i - i)!})(\prod_{1 \leq i &lt; j \leq n} ((a_i - i) - (a_j - j)))<br>$$<br>我们可以快速处理左边的式子，对于右边的式子，令 $ b_i &#x3D; a_i - i $ 。  </p>
<p>$$<br>\prod_{1 \leq i \leq j \leq n} ((a_i - i) - (a_j - j)) &#x3D; \prod_{1 \leq i &lt; j \leq n} (b_i - b_j)<br>$$</p>
<p>将括号展开发现 $ b_i - b_j &gt; 0 (i &lt; j) $  ，所以当 $ i \geq j $ 时贡献记为负数，可以忽略。  </p>
<p>令 $ \prod_{1 \leq i &lt; j \leq n} (b_i - b_j) &#x3D; \sum x^{f(x)} $ ，显然可以通过卷积求出 $ \sum  x^{f(x)} $ 。  </p>
<p>注意根据费马小定理 $ f(x) $ 应由 $ mod - 1 $ 取模，所以不能写 $ ntt $ ，由于答案不会爆 $ long~long $ ，所以可以写 $ fft $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">double</span> ld;</span><br><span class="line"><span class="type">const</span> ld pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1004535809</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], b[N], ans = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> fac[N], ifac[N];</span><br><span class="line">vector&lt;ll&gt; f, g;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, ll y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y /= <span class="number">2</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y % <span class="number">2</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &lt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mul</span>(fac[x], <span class="built_in">mul</span>(ifac[y], ifac[x - y]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> M = <span class="number">32768</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">cp</span> &#123; ld x, y; <span class="built_in">cp</span>(ld X = <span class="number">0</span>, ld Y = <span class="number">0</span>) : <span class="built_in">x</span>(X), <span class="built_in">y</span>(Y) &#123;&#125; &#125;;</span><br><span class="line">	<span class="keyword">inline</span> cp <span class="keyword">operator</span>+(cp a, cp b) &#123; <span class="keyword">return</span> <span class="built_in">cp</span>(a.x + b.x, a.y + b.y); &#125;</span><br><span class="line">	<span class="keyword">inline</span> cp <span class="keyword">operator</span>-(cp a, cp b) &#123; <span class="keyword">return</span> <span class="built_in">cp</span>(a.x - b.x, a.y - b.y); &#125;</span><br><span class="line">	<span class="keyword">inline</span> cp <span class="keyword">operator</span>*(cp a, cp b) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">cp</span>(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dft</span><span class="params">(vector&lt;cp&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;cp&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="built_in">cp</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">			cp wn = <span class="built_in">cp</span>(<span class="built_in">cos</span>(opt * pi / mid), <span class="built_in">sin</span>(opt * pi / mid));</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = w[j - <span class="number">1</span>] * wn;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					cp x = A[j + k], y = A[j + mid + k] * w[k];</span><br><span class="line">					A[j + k] = x + y, A[j + mid + k] = x - y;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>) <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i].x /= lmt, A[i].x += <span class="number">0.5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;ll&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;ll&gt; &amp;A, <span class="type">const</span> vector&lt;ll&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		vector&lt;cp&gt; a, b; vector&lt;ll&gt; res;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) a.<span class="built_in">pb</span>(<span class="built_in">cp</span>(A[i], <span class="number">0</span>));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; B.<span class="built_in">size</span>(); i++) b.<span class="built_in">pb</span>(<span class="built_in">cp</span>(B[i], <span class="number">0</span>));</span><br><span class="line">		<span class="built_in">dft</span>(a, lmt, <span class="number">1</span>), <span class="built_in">dft</span>(b, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) a[i] = a[i] * b[i];</span><br><span class="line">		<span class="built_in">dft</span>(a, lmt, <span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>(); i++) res.<span class="built_in">pb</span>((ll)a[i].x);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), b[i] = a[i] + n - i;</span><br><span class="line">	fac[<span class="number">1</span>] = fac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = ifac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; i++) fac[i] = <span class="built_in">mul</span>(fac[i - <span class="number">1</span>], i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; i++) ifac[i] = <span class="built_in">mul</span>(mod - mod / i, ifac[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; i++) ifac[i] = <span class="built_in">mul</span>(ifac[i - <span class="number">1</span>], ifac[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = <span class="built_in">mul</span>(ans, <span class="built_in">mul</span>(fac[a[i]], ifac[b[i]]));</span><br><span class="line">	<span class="keyword">if</span>(n &lt;= <span class="number">3000</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">				ans = <span class="built_in">mul</span>(ans, a[i] - a[j] + j - i);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	f.<span class="built_in">resize</span>(N), g.<span class="built_in">resize</span>(N);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ++f[a[i] - i + n], ++g[i - a[i] + a[<span class="number">1</span>]];</span><br><span class="line">	<span class="keyword">for</span>(; !f.<span class="built_in">back</span>(); f.<span class="built_in">pop_back</span>()); <span class="keyword">for</span>(; !g.<span class="built_in">back</span>(); g.<span class="built_in">pop_back</span>());</span><br><span class="line">	f = Poly::<span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(N);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = a[<span class="number">1</span>] + n + <span class="number">1</span>; i &lt;= (a[<span class="number">1</span>] + n) * <span class="number">2</span>; i++)</span><br><span class="line">		ans = <span class="built_in">mul</span>(ans, <span class="built_in">ksm</span>(i - a[<span class="number">1</span>] - n, f[i]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 533A】Berland Miners</title>
    <url>/2025/07/27/%E3%80%90Codeforces%20533A%E3%80%91Berland%20Miners/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://codeforces.com/problemset/problem/533/A">【Codeforces 533A】Berland Miners</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>先判定不修改是否合法。对于一个点 $ i $ ，它的价值为它到根节点 $ 1 $ 的路径上的最小值 $ mn[i] $（存在修改可能为次小值 $ nxt[i] $ ），将所有人的高度和 $ mn[i] $ 排序，山洞权值为 $ 1 $ ，人的权值为 $ -1 $ ，若任意前缀和都不小于 $ 0 $ ，则无需修改。<br>如果存在修改，那么一定要使得最后一个前缀和小于 $ 0 $ 的位置不小于 $ 0 $ ，这样处理就不需要二分了。<br>记录有多少个节点是取了 $ i $ 节点的 $ h_i $ ， $ i $ 节点的修改会影响到这些节点的值。用线段树维护前缀和（需要实现离散化权值）即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> multiset&lt;pii&gt;::iterator IT;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, h[N], m, a[N], lb[N], ans = INF, pos;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], chs[N];</span><br><span class="line"><span class="type">int</span> mn[N], nxt[N];</span><br><span class="line">multiset&lt;pii&gt; st;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123; <span class="type">int</span> mn, lz; &#125;; P tr[N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> pii &amp;x, <span class="type">const</span> pii &amp;y)</span> </span>&#123; <span class="keyword">return</span> x.fst &gt; y.fst; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	st.<span class="built_in">insert</span>(<span class="built_in">mp</span>(h[u], u)); IT it = st.<span class="built_in">begin</span>();</span><br><span class="line">	mn[u] = it-&gt;fst, chs[it-&gt;snd].<span class="built_in">pb</span>(u);</span><br><span class="line">	++it;</span><br><span class="line">	<span class="keyword">if</span>(it != st.<span class="built_in">end</span>()) nxt[u] = it-&gt;fst; <span class="keyword">else</span> nxt[u] = INF;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff) <span class="built_in">dfs</span>(v, u);</span><br><span class="line">	st.<span class="built_in">erase</span>(st.<span class="built_in">find</span>(<span class="built_in">mp</span>(h[u], u)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; tr[u].mn = <span class="built_in">Min</span>(tr[u * <span class="number">2</span>].mn, tr[u * <span class="number">2</span> + <span class="number">1</span>].mn); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123; tr[u].mn = -(m - l + <span class="number">1</span>); <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(u * <span class="number">2</span>, l, mid), <span class="built_in">build</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> w)</span> </span>&#123; tr[u].mn += w, tr[u].lz += w; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u].lz) &#123;</span><br><span class="line">		<span class="built_in">pushtag</span>(u * <span class="number">2</span>, tr[u].lz), <span class="built_in">pushtag</span>(u * <span class="number">2</span> + <span class="number">1</span>, tr[u].lz);</span><br><span class="line">		tr[u].lz = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &gt; R) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(l == L &amp;&amp; r == R) &#123; <span class="built_in">pushtag</span>(u, w); <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(R &lt;= mid) <span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, L, R, w);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(L &gt; mid) <span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, w);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, L, mid, w);</span><br><span class="line">		<span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, R, w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> tr[u].mn;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">return</span> x &lt;= mid ? <span class="built_in">qry</span>(u * <span class="number">2</span>, l, mid, x) : <span class="built_in">qry</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>), <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		lb[i] = <span class="built_in">upper_bound</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>, mn[i]) - a - <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, m, <span class="number">1</span>, lb[i], <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tr[<span class="number">1</span>].mn &gt;= <span class="number">0</span>) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="keyword">for</span>(pos = m; pos &gt;= <span class="number">1</span>; pos--) <span class="keyword">if</span>(<span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, m, pos) &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(lb[i] &gt;= pos || nxt[i] &lt; a[pos] || chs[i].<span class="built_in">size</span>() &lt; -tr[<span class="number">1</span>].mn)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : chs[i]) &#123;</span><br><span class="line">			<span class="type">int</span> x = <span class="built_in">Min</span>(a[pos], nxt[v]);</span><br><span class="line">			x = <span class="built_in">upper_bound</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>, x) - a - <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, m, lb[v] + <span class="number">1</span>, x, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tr[<span class="number">1</span>].mn &gt;= <span class="number">0</span>) ans = <span class="built_in">Min</span>(ans, a[pos] - h[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : chs[i]) &#123;</span><br><span class="line">			<span class="type">int</span> x = <span class="built_in">Min</span>(a[pos], nxt[v]);</span><br><span class="line">			x = <span class="built_in">upper_bound</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>, x) - a - <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, m, lb[v] + <span class="number">1</span>, x, <span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(ans == INF) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>【libreoj573】单枪匹马</title>
    <url>/2025/07/27/%E3%80%90libreoj573%E3%80%91dan-qiang-pi-ma/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/573">【libreoj573】单枪匹马</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>可以证明直接计算不需要约分，可以直接取模。<br>证明：若 $ \frac{x}{y} $ 中 $ x, y $ 互质，则 $ a + \frac{x}{y} &#x3D; \frac{ay + x}{y} $ 中 $ ay + x, y $ 互质（考虑辗转相除法中 <code>gcd(X, Y) = gcd(Y, X % Y) (Y = y, X = ax + y)</code> ）。<br>这样可以得到 $ 35 pts $ 。<br>设 $ f[a_0 \dots a_n] &#x3D; \frac{x[a_0 \dots a_n]}{y[a_0 \dots a_n]} $ ，则：<br>$$<br>\frac{x[a_0 \dots a_n]}{y[a_0 \dots a_n]} &#x3D; a_0 + \frac{y[a_1 \dots a_n]}{x[a_1 \dots a_n]} &#x3D; \frac{y[a_1 \dots a_n] + a_0 x[a_1 \dots a_n]}{x[a_1 \dots a_n]}<br>$$<br>由于这些都是最简分数，所以：<br>$$<br>x[a_0 \dots a_n] &#x3D; y[a_1 \dots a_n] + a_0x[a_1 \dots a_n]\\<br>y[a_0 \dots a_n] &#x3D; x[a_1 \dots a_n]<br>$$<br>可以得到：<br>$$<br>x[a_0 \dots a_n] &#x3D; x[a_2 \dots a_n] + a_0x[a_1 \dots a_n]\\<br>y[a_0 \dots a_n] &#x3D; y[a_2 \dots a_n] + a_0y[a_1 \dots a_n]<br>$$<br>考虑在图上的意义。在一个由 $ n $ 个节点的有向图，$ i $ 向 $ i + 1 $ 连边权为 $ a_i $ 的边，向 $ i + 2 $ 连边权为 $ 1 $ 的边。最后的值为 $ 1 $ 到 $ n $ 的路径边权乘积之和。显然这些边可以反向。可以得到：<br>$$<br>x[a_0 \dots a_n] &#x3D; a_nx[a_0 \dots a_{n-1}] + x[a_0 \dots a_{n - 2}]\\<br>y[a_0 \dots a_n] &#x3D; a_ny[a_0 \dots a_{n-1}] + y[a_0 \dots a_{n - 2}]<br>$$<br>然后这个东西可以矩阵转移。<br>$$<br>A_i &#x3D; \left[<br>\begin{matrix}<br>a_i&amp;1\\<br>1&amp;0<br>\end{matrix}<br>\right],<br>inv_i &#x3D; \left[<br>\begin{matrix}<br>0&amp;1\\<br>1&amp;mod - a_i<br>\end{matrix}<br>\right]\\<br>\left[<br>\begin{matrix}<br>ansx\\<br>ansy<br>\end{matrix}<br>\right] &#x3D; \prod_{i &#x3D; l}^{r} A_i &#x3D; (\prod_{i &#x3D; 1}^{r}A_i) \times (\prod_{i &#x3D; 1}^{l - 1}inv_i)<br>$$<br>维护前缀积即可。<br>时间复杂度 $ O(n + m) $ （矩阵乘法常数堪比一个 $ \log $ ） 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, m, type, ansx, ansy;</span><br><span class="line"><span class="type">int</span> a[N], len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mtrx</span> &#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">2</span>][<span class="number">2</span>]; <span class="built_in">mtrx</span>() &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)); &#125;</span><br><span class="line">	<span class="keyword">inline</span> mtrx <span class="keyword">operator</span>*(<span class="type">const</span> mtrx &amp;yy)<span class="type">const</span> &#123;</span><br><span class="line">		mtrx res = <span class="built_in">mtrx</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">				res.a[i][j] = <span class="built_in">add</span>(res.a[i][j], <span class="built_in">mul</span>(a[i][k], yy.a[k][j]));</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; mtrx sum[N], inv[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	++len; mtrx mu; mu.a[<span class="number">1</span>][<span class="number">0</span>] = mu.a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	mu.a[<span class="number">0</span>][<span class="number">0</span>] = x, sum[len] = sum[len - <span class="number">1</span>] * mu;</span><br><span class="line">	mu.a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>, mu.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">sub</span>(<span class="number">0</span>, x), inv[len] = mu * inv[len - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;type);</span><br><span class="line">	sum[<span class="number">0</span>].a[<span class="number">0</span>][<span class="number">0</span>] = sum[<span class="number">0</span>].a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	inv[<span class="number">0</span>].a[<span class="number">0</span>][<span class="number">0</span>] = inv[<span class="number">0</span>].a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), <span class="built_in">insert</span>(x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> opt, x, y; m; --m) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); <span class="keyword">if</span>(type) x = x ^ ansx ^ ansy;</span><br><span class="line">			<span class="built_in">insert</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">			<span class="keyword">if</span>(type) x = x ^ ansx ^ ansy, y = y ^ ansx ^ ansy;</span><br><span class="line">			ans = inv[x - <span class="number">1</span>] * sum[y];</span><br><span class="line">			ansx = ans.a[<span class="number">0</span>][<span class="number">0</span>], ansy = ans.a[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ansx, ansy);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>「SNOI2017」遗失的答案</title>
    <url>/2025/07/27/SNOI2017-yi-shi-de-da-an/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2257">「SNOI2017」遗失的答案</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>先判断有无解（ $ L \mod G &#x3D; 0 $ ），然后将 $ n &#x2F;&#x3D; G, L &#x2F;&#x3D; G $ 。<br>由于 $ n \leq 1e8 $ ，所以每个数最多有 $ 8 $ 个不同的质因数。<br>令 $ L &#x3D; p_{1}^{a_1}p_{2}^{a_2} \dots p_{t}^{a_t} $ ，则素数 $ p_i $ 的指数上界为 $ a_i $ 。<br>由题意得对于每个质因数所选的数既有恰好达到上界，由于恰好为下界的。由于状态数为 $ 16 $ ，所以可以状压。<br>可以通过 $ dfs $ 处理出所有 $ x $ 使得 $ x \leq n $ 且 $ x &#x3D; p_{1}^{b_1}p_{2}^{b_2} \dots p_{t}^{b_t} (b_i \leq a_i) $ ，然后将 $ x $ 分类统计。<br>于是问题转化为给出一个集合，求或为全集的方案数。<br>设 $ f_s $ 表示或为 $ s $ 的方案数。<br>设 $ g_s &#x3D; \sum_{i \in s} f_i &#x3D; 2^{cnt_s} - 1 $ 表示或为 $ s $ 子集的方案数。<br>容斥得 $ f_s &#x3D; \sum_{i \in s} (-1)^{|s| - |i|} g_i $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, L, G, m, mx;</span><br><span class="line"><span class="type">int</span> p[<span class="number">20</span>], lp, cnt[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> ba[N], g[N], sz[N];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (ll)x * y % mod; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> state, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(w &gt; n) <span class="keyword">return</span> ; <span class="keyword">if</span>(u &gt; lp) &#123; ++g[state]; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="built_in">dfs</span>(u + <span class="number">1</span>, state | (<span class="number">1</span> &lt;&lt; u - <span class="number">1</span>), w);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, cnt[u] - <span class="number">1</span>) w *= p[u], <span class="built_in">dfs</span>(u + <span class="number">1</span>, state, w);</span><br><span class="line">	<span class="built_in">dfs</span>(u + <span class="number">1</span>, state | (<span class="number">1</span> &lt;&lt; u + lp - <span class="number">1</span>), w * p[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> state)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, mx) &#123;</span><br><span class="line">		<span class="keyword">if</span>((state &amp; i) != state) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(sz[i] &amp; <span class="number">1</span>) res = <span class="built_in">sub</span>(res, ba[g[i] - <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">else</span> res = <span class="built_in">add</span>(res, ba[g[i] - <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;G, &amp;L, &amp;m);</span><br><span class="line">	<span class="keyword">if</span>(L % G) &#123; <span class="keyword">for</span>(; m; --m, <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>)); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	L /= G, n /= G; ll tt = L;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= tt; i++) <span class="keyword">if</span>(tt % i == <span class="number">0</span>) &#123;</span><br><span class="line">		p[++lp] = i; <span class="keyword">for</span>(; tt % i == <span class="number">0</span>; tt /= i) ++cnt[lp];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tt &gt; <span class="number">1</span>) p[++lp] = tt, ++cnt[lp];</span><br><span class="line">	mx = (<span class="number">1</span> &lt;&lt; lp + lp) - <span class="number">1</span>, <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, lp + lp) <span class="built_in">rep</span>(j, <span class="number">0</span>, mx)</span><br><span class="line">		<span class="keyword">if</span>(j &amp; (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>)) g[j] += g[j ^ (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>)];</span><br><span class="line">	ba[<span class="number">0</span>] = <span class="number">1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, g[mx]) ba[i] = <span class="built_in">add</span>(ba[i - <span class="number">1</span>], ba[i - <span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, mx) sz[i] = sz[i &gt;&gt; <span class="number">1</span>] + (i &amp; <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x; m; --m) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); <span class="keyword">if</span>(x % G) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">		x /= G; <span class="keyword">if</span>(L % x || x &gt; n) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">		<span class="keyword">if</span>(ans.<span class="built_in">find</span>(x) != ans.<span class="built_in">end</span>()) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[x]); <span class="keyword">continue</span>; &#125;</span><br><span class="line">		<span class="type">int</span> state = <span class="number">0</span>, t = <span class="number">0</span>, tmp = x;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lp; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(; x % p[i] == <span class="number">0</span>; x /= p[i], ++t);</span><br><span class="line">			<span class="keyword">if</span>(!t) state |= (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span>(t == cnt[i]) state |= (<span class="number">1</span> &lt;&lt; i + lp - <span class="number">1</span>);</span><br><span class="line">			t = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[tmp] = <span class="built_in">calc</span>(state));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
</search>
