<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【BZOJ3160】万径人踪灭</title>
    <url>/2025/07/27/BZOJ3160-wan-jing-ren-zong-mie/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3160">【BZOJ3160】万径人踪灭</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>不包含连续下标的回文子序列 &#x3D; 所有回文子序列 - 连续下标的回文子序列。<br>对于连续下标的回文子序列，可以用 $ Manacher $ 算法快速计算。<br>对于所有回文子序列，考虑枚举对称中心 $ r $ ， 若有 $ k $ 组 $ (x, y) $ 满足 $ x \not&#x3D; y $ 且 $ x + y &#x3D; 2r $ 且 $ s_x &#x3D; s_y $ ，那么方案数为 $ 2^{k + 1} - 1 $ （$ k $ 组 $ (x, y) $ 加上 $ r $）。若对称中心在 $ r $ 和 $ r + 1 $ 之间，此时 $(x, y)$ 应当满足 $ x + y &#x3D; 2r + 1 $ ， 方案数为 $ 2^k - 1 $ 。<br>发现寻找 $ s_x, s_y $ 可以用卷积来写，就直接 $ NTT $ 了。<br>时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, m, RL[N + N], cnt[N + N], ba[N];</span><br><span class="line"><span class="type">char</span> s[N], t[N + N];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a, b, res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="type">int</span>)((ll) x * y % mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> ss = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">		<span class="keyword">return</span> ss;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		a.<span class="built_in">resize</span>(lmt);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(a[i], a[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; mid; i++) w[i] = <span class="built_in">mul</span>(w[i - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; lmt; j += mid &lt;&lt; <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = a[j + k], y = <span class="built_in">mul</span>(a[j + mid + k], w[k]);</span><br><span class="line">					a[j + k] = <span class="built_in">add</span>(x, y), a[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++)</span><br><span class="line">				a[i] = <span class="built_in">mul</span>(a[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; a = A, b = B; <span class="type">int</span> lmt = <span class="built_in">Get</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(a, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(b, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) a[i] = <span class="built_in">mul</span>(a[i], b[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(a, lmt, <span class="number">-1</span>); <span class="keyword">return</span> a.<span class="built_in">resize</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">1</span>), a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> mx = <span class="number">0</span>, pos = <span class="number">0</span>; RL[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		RL[i] = mx &gt; i ? <span class="built_in">Min</span>(RL[pos * <span class="number">2</span> - i], mx - i) : <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; t[i - RL[i]] == t[i + RL[i]]; ++RL[i]);</span><br><span class="line">		<span class="keyword">if</span>(i + RL[i] &gt; mx) mx = i + RL[i], pos = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) ans = (ans - RL[i] / <span class="number">2</span> + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s), n = <span class="built_in">strlen</span>(s);</span><br><span class="line">	t[m++] = <span class="string">&#x27;*&#x27;</span>; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) t[m++] = <span class="string">&#x27;#&#x27;</span>, t[m++] = s[i];</span><br><span class="line">	t[m++] = <span class="string">&#x27;#&#x27;</span>, <span class="built_in">Manacher</span>();</span><br><span class="line">	ba[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ba[i] = (ba[i - <span class="number">1</span>] + ba[i - <span class="number">1</span>]) % mod;</span><br><span class="line">	<span class="comment">//solve a</span></span><br><span class="line">	a.<span class="built_in">clear</span>(), b.<span class="built_in">clear</span>(), res.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) a.<span class="built_in">pb</span>(s[i] == <span class="string">&#x27;a&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">	b = a, res = Poly::<span class="built_in">Mul</span>(a, b), res.<span class="built_in">resize</span>(n + n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(s[i] == <span class="string">&#x27;a&#x27;</span>) --res[i + i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + n - <span class="number">2</span>; i++) cnt[i] += res[i] / <span class="number">2</span>;</span><br><span class="line">	<span class="comment">//solve b</span></span><br><span class="line">	a.<span class="built_in">clear</span>(), b.<span class="built_in">clear</span>(), res.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) a.<span class="built_in">pb</span>(s[i] == <span class="string">&#x27;b&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">	b = a, res = Poly::<span class="built_in">Mul</span>(a, b), res.<span class="built_in">resize</span>(n + n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(s[i] == <span class="string">&#x27;b&#x27;</span>) --res[i + i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + n - <span class="number">2</span>; i++) cnt[i] += res[i] / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//	for(int i = 0; i &lt;= n + n - 2; i++)</span></span><br><span class="line"><span class="comment">//		printf(&quot;&gt;&gt;&gt; %d -&gt; %d : %d\n&quot;, i / 2, (i + 1) / 2, cnt[i]);</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + n - <span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(i &amp; <span class="number">1</span>) ans = ((ans + ba[cnt[i]]) % mod + mod - <span class="number">1</span>) % mod;</span><br><span class="line">		<span class="keyword">else</span> ans = ((ans + ba[cnt[i] + <span class="number">1</span>]) % mod + mod - <span class="number">1</span>) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>【APIO2019】桥梁</title>
    <url>/2025/07/27/APIO2019-qiao-liang/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problem/P5443">【APIO2019】桥梁</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑对询问分块，选择块大小为 $ S $ ，每次对块内的操作进行处理。因此对于之前的修改可以预处理出来。<br>对于块内询问，将所有没有在这个块内修改的边按权值大到小排序，将询问按权值大到小排序，然后用两个指针维护。若此时指向边权大于询问的权值，则加入一条边；否则询问。<br>考虑加入可能被修改的边。按照时间将边进行修改，然后将边权权不小于询问权值的边加入，在进行询问。这部分可以暴力进行。考虑做完后需要撤销操作，所以需要用按秩合并的并查集。<br>这样询问的复杂度为 $ O(S^3 \log n + m \log n) $ 。<br>考虑对边修改后进行排序。暴力排序时间复杂度 $ O(n \sqrt{n} \log n) $ ，而分类后归并排序时间复杂度 $ O(n \sqrt{n \log n}) $ ，此时 $ S &#x3D; \sqrt{n \log n} $ 最优。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, BLO = <span class="number">700</span>;</span><br><span class="line"><span class="type">int</span> n, m, q, fa[N], sz[N], ans[N], pos[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y, w, id; <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> w &gt; yy.w; &#125;</span><br><span class="line">&#125;; Edge e[N], a1[N], a2[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Q</span> &#123;</span><br><span class="line">	<span class="type">int</span> opt, x, y, id; <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Q &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> y &gt; yy.y; &#125;</span><br><span class="line">&#125;; Q qry[N], qq[N]; <span class="type">int</span> len, pre[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">S</span> &#123;</span><br><span class="line">	<span class="type">int</span> id, fa, sz; <span class="built_in">S</span>(<span class="type">int</span> x = <span class="number">0</span>, <span class="type">int</span> y = <span class="number">0</span>, <span class="type">int</span> z = <span class="number">0</span>) : <span class="built_in">id</span>(x), <span class="built_in">fa</span>(y), <span class="built_in">sz</span>(z) &#123;&#125;</span><br><span class="line">&#125;; S sta[N]; <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> used[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gi</span><span class="params">(<span class="type">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(); <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : <span class="built_in">Find</span>(fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	x = <span class="built_in">Find</span>(x), y = <span class="built_in">Find</span>(y); <span class="keyword">if</span>(x == y) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(sz[x] &gt; sz[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">	sta[++top] = <span class="built_in">S</span>(x, fa[x], sz[x]), fa[x] = y, sz[y] += sz[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	S u = sta[top--]; sz[fa[u.id]] -= u.sz, fa[u.id] = u.fa, sz[u.id] = u.sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n), <span class="built_in">gi</span>(m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i, sz[i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">gi</span>(e[i].x), <span class="built_in">gi</span>(e[i].y), <span class="built_in">gi</span>(e[i].w), e[i].id = i;</span><br><span class="line">	<span class="built_in">gi</span>(q);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">		<span class="built_in">gi</span>(qry[i].opt), <span class="built_in">gi</span>(qry[i].x), <span class="built_in">gi</span>(qry[i].y), qry[i].id = i;</span><br><span class="line">	<span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>); <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) pos[e[i].id] = i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">1</span>, r; l &lt;= q; l += BLO) &#123;</span><br><span class="line">		r = <span class="built_in">min</span>(q, l + BLO - <span class="number">1</span>), len = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) used[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(qry[i].opt == <span class="number">2</span>) qq[++len] = qry[i]; <span class="keyword">else</span> used[qry[i].x] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">stable_sort</span>(qq + <span class="number">1</span>, qq + len + <span class="number">1</span>);</span><br><span class="line">		<span class="type">int</span> p1 = <span class="number">1</span>, p2 = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; p1 &lt;= m || p2 &lt;= len;) &#123;</span><br><span class="line">			<span class="keyword">for</span>(; p1 &lt;= m &amp;&amp; used[e[p1].id]; ++p1);</span><br><span class="line">			<span class="keyword">if</span>(p1 &gt; m &amp;&amp; p2 &gt; len) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(p2 &gt; len || (p1 &lt;= m &amp;&amp; e[p1].w &gt;= qq[p2].y)) <span class="built_in">Union</span>(e[p1].x, e[p1].y), ++p1;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="type">int</span> cur = top, ps = l - <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r &amp;&amp; i &lt;= qq[p2].id; i++) &#123;</span><br><span class="line">					ps = i;</span><br><span class="line">					<span class="keyword">if</span>(qry[i].opt == <span class="number">1</span>)</span><br><span class="line">						pre[qry[i].id] = e[pos[qry[i].x]].w, e[pos[qry[i].x]].w = qry[i].y;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">					<span class="keyword">if</span>(qry[i].opt == <span class="number">1</span> &amp;&amp; e[pos[qry[i].x]].w &gt;= qq[p2].y)</span><br><span class="line">						<span class="built_in">Union</span>(e[pos[qry[i].x]].x, e[pos[qry[i].x]].y);</span><br><span class="line">				ans[qq[p2].id] = sz[<span class="built_in">Find</span>(qq[p2].x)];</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = ps; i &gt;= l; i--)</span><br><span class="line">					<span class="keyword">if</span>(qry[i].opt == <span class="number">1</span>) e[pos[qry[i].x]].w = pre[qry[i].id];</span><br><span class="line">				<span class="keyword">for</span>(; top &gt; cur; <span class="built_in">Undo</span>()); ++p2;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(; top; <span class="built_in">Undo</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i++) <span class="keyword">if</span>(qry[i].opt == <span class="number">1</span>) e[pos[qry[i].x]].w = qry[i].y;</span><br><span class="line">		<span class="type">int</span> len1 = <span class="number">0</span>, len2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(used[e[i].id]) a1[++len1] = e[i]; <span class="keyword">else</span> a2[++len2] = e[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(a1 + <span class="number">1</span>, a1 + len1 + <span class="number">1</span>), p1 = p2 = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(p2 &gt; len2 || (p1 &lt;= len1 &amp;&amp; a1[p1] &lt; a2[p2])) e[i] = a1[p1++];</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(p2 &lt;= len2) e[i] = a2[p2++];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) pos[e[i].id] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) <span class="keyword">if</span>(ans[i]) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title>【APIO2018】新家</title>
    <url>/2025/07/27/APIO2018-xin-jia/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2585">【APIO2018】新家</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>对于这种区间修改、单点询问的题目，可以将询问离线再扫描线。<br>考虑对于一个答案 $ ans_i $ 合法，当且仅当 $ (l_i + ans_i, INF) $ 中每种店上一次出现的位置不小于 $ l_i + ans_i $ 。对于每种店都开一个 multiset 即可维护前驱。<br>这样每一次加入&#x2F;删除会需要区间修改前驱，代码难度大，考虑 $ (l_i + ans_i, INF) $ 中每种店上一次出现的位置不小于 $ l_i + ans_i $ 的另一种解释，即 $ (l_i + ans_i, INF) $ 每个位置中每种店每个位置上一次出现的位置最小值不小于 $ l_i + ans_i $ ，然后就可以单点修改了。用线段树维护前驱最小值。<br>询问可以二分答案，更优秀的做法是在线段树上二分。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> multiset&lt;<span class="type">int</span>&gt;::iterator IT;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">600010</span>, LG = <span class="number">20</span>, INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="type">int</span> n, k, m, ans[N], clr;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Q</span> &#123;</span><br><span class="line">	<span class="type">int</span> opt, pos, type, pri;</span><br><span class="line">	<span class="built_in">Q</span>(<span class="type">int</span> Opt = <span class="number">0</span>, <span class="type">int</span> Pos = <span class="number">0</span>, <span class="type">int</span> Type = <span class="number">0</span>, <span class="type">int</span> Pri = <span class="number">0</span>) :</span><br><span class="line">		<span class="built_in">opt</span>(Opt), <span class="built_in">pos</span>(Pos), <span class="built_in">type</span>(Type), <span class="built_in">pri</span>(Pri) &#123;&#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Q &amp;yy)<span class="type">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> pri == yy.pri ? opt &lt; yy.opt : pri &lt; yy.pri;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; Q q[N + N]; <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; pp[N], st[N * LG];</span><br><span class="line"><span class="type">int</span> rt, tot, cnt, lf[N * LG], rf[N * LG], mn[N * LG], id[N * LG];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> ad, <span class="type">int</span> dl)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) u = ++tot;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!id[u]) id[u] = ++cnt;</span><br><span class="line">		multiset&lt;<span class="type">int</span>&gt; &amp;s = st[id[u]];</span><br><span class="line">		<span class="keyword">if</span>(ad) s.<span class="built_in">insert</span>(ad);</span><br><span class="line">		<span class="keyword">if</span>(dl) s.<span class="built_in">erase</span>(s.<span class="built_in">find</span>(dl));</span><br><span class="line">		mn[u] = s.<span class="built_in">size</span>() ? *s.<span class="built_in">begin</span>() : INF; <span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= mid) <span class="built_in">mdy</span>(lf[u], l, mid, x, ad, dl);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">mdy</span>(rf[u], mid + <span class="number">1</span>, r, x, ad, dl);</span><br><span class="line">	mn[u] = <span class="built_in">Min</span>(mn[lf[u]], mn[rf[u]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Q x)</span> </span>&#123;</span><br><span class="line">	multiset&lt;<span class="type">int</span>&gt; &amp;s = pp[x.type];</span><br><span class="line">	IT itr = s.<span class="built_in">upper_bound</span>(x.pos), itl = itr; --itl;</span><br><span class="line">	<span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, *itr, x.pos, *itl), <span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, x.pos, *itl, <span class="number">0</span>);</span><br><span class="line">	s.<span class="built_in">insert</span>(x.pos); <span class="keyword">if</span>(s.<span class="built_in">size</span>() == <span class="number">3</span>) ++clr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(Q x)</span> </span>&#123;</span><br><span class="line">	multiset&lt;<span class="type">int</span>&gt; &amp;s = pp[x.type]; s.<span class="built_in">erase</span>(s.<span class="built_in">find</span>(x.pos));</span><br><span class="line">	IT itr = s.<span class="built_in">upper_bound</span>(x.pos), itl = itr; --itl;</span><br><span class="line">	<span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, *itr, *itl, x.pos), <span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, x.pos, <span class="number">0</span>, *itl);</span><br><span class="line">	<span class="keyword">if</span>(s.<span class="built_in">size</span>() == <span class="number">2</span>) --clr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(Q x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(clr &lt; k) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>, r = INF, mid, t, tt = INF, u = rt;</span><br><span class="line">	<span class="keyword">for</span>(; l &lt; r;) &#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>, t = <span class="built_in">Min</span>(tt, mn[rf[u]]);</span><br><span class="line">		<span class="keyword">if</span>(x.pos &lt;= mid &amp;&amp; t + mid &gt;= x.pos * <span class="number">2</span>)</span><br><span class="line">			tt = t, r = mid, u = lf[u];</span><br><span class="line">		<span class="keyword">else</span> u = rf[u], l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l - x.pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;m), mn[<span class="number">0</span>] = INF;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">		pp[i].<span class="built_in">insert</span>(-INF), pp[i].<span class="built_in">insert</span>(INF), <span class="built_in">mdy</span>(rt, <span class="number">0</span>, INF, INF, -INF, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, t, a, b; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x, &amp;t, &amp;a, &amp;b);</span><br><span class="line">		q[++len] = <span class="built_in">Q</span>(<span class="number">1</span>, x, t, a), q[++len] = <span class="built_in">Q</span>(<span class="number">2</span>, x, t, b + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= m; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), q[++len] = <span class="built_in">Q</span>(<span class="number">3</span>, x, i, y);</span><br><span class="line">	<span class="built_in">sort</span>(q + <span class="number">1</span>, q + len + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) <span class="built_in">add</span>(q[i]);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(q[i].opt == <span class="number">2</span>) <span class="built_in">del</span>(q[i]);</span><br><span class="line">		<span class="keyword">else</span> ans[q[i].type] = <span class="built_in">ask</span>(q[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>「CTSC2018」暴力写挂</title>
    <url>/2025/07/27/CTSC2018-bao-li-xie-gua/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2553">「CTSC2018」暴力写挂</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$$<br>dep(x) + dep(y) - dep(LCA(x, y)) - dep’(LCA’(x, y))\\<br> &#x3D; \frac{1}{2} (dep(x) + dep(y) - 2dep(LCA(x, y)) + dep(x) + dep(y) - 2dep’(LCA’(x, y)))\\<br> &#x3D; \frac{1}{2}(dis(x, y) + dep(x) + dep(y) - 2dep’(LCA’(x, y)))<br>$$</p>
<p>考虑对第一棵树边分治。设当前分治重心为 $ U, V $ ，选择 $ U $ 侧节点 $ X $ ，选择 $ V $ 侧节点 $ Y $ ，则令 $ X $ 为一类节点，贡献为 $ e1(X) &#x3D; dep(X) + dis(V, X) $ ；令 $ Y $ 为二类节点，贡献为 $ e2(Y) &#x3D; dep(Y) + dis(V, Y) $ 。枚举第二颗树的 $ LCA $ ，设 $ X, Y $ 在第二颗树中的 $ LCA $ 为 $ lca $ ，则对答案的贡献为 $ \frac{1}{2}(e1(X) + e2(Y) - 2dep(lca)) $ 。由于需要正确的时间复杂度，所以需要对第二颗树建虚树进行 $ DP $ 。<br>不优秀的实现会导致时间复杂度为 $ O(n \log^2 n) $ ，由于每次建虚树的时间复杂度应为 $ O(k) $ ，所以需要用 $ RMQ $ 实现 $ O(1) $ 的 $ LCA $ ；另外每次建虚树需要将点排序，将排序放在分治之前，然后按照分治将数列分成两段，每次建虚树直接调用数组（或者先分治下去再归并排序然后建虚树）。更改后时间复杂度为 $ O(n \log n) $ 。<br>注意 $ x $ 可以与 $ y $ 相同，而边分治未考虑这一点，所以还要考虑 $ x &#x3D; y $ 的情况。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, ll&gt; pil;</span><br><span class="line"><span class="type">const</span> ll INF = <span class="number">1e17</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">800010</span>;</span><br><span class="line"><span class="type">int</span> n, m; ll ans = -INF, w[N], fw[N];</span><br><span class="line">vector&lt;pil&gt; e1[N], e2[N]; vector&lt;<span class="type">int</span>&gt; E[N]; <span class="type">int</span> ar[N], len;</span><br><span class="line"><span class="type">int</span> dep[N], dfn[N], idx, a[N], st[<span class="number">20</span>][N], lg[N]; ll Dep[N];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>, to[N + N], nxt[N + N], hed[N]; ll val[N + N]; <span class="type">bool</span> used[N + N];</span><br><span class="line"><span class="type">int</span> size, rte, mn, sz[N], tot;</span><br><span class="line">ll value[N], f1[N], f2[N]; <span class="type">int</span> flag[N], sta[N], top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(), pre = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; pre = c, c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = x * <span class="number">10ll</span> + (c ^ <span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(pre == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, ll z)</span> </span>&#123;</span><br><span class="line">	to[++cnt] = y, nxt[cnt] = hed[x], hed[x] = cnt, val[cnt] = z;</span><br><span class="line">	to[++cnt] = x, nxt[cnt] = hed[y], hed[y] = cnt, val[cnt] = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> dfn[x] &lt; dfn[y]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getdfn</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	dfn[u] = ++idx, a[idx] = u, dep[u] = dep[ff] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e2[u]) <span class="keyword">if</span>(v.fst != ff) Dep[v.fst] = Dep[u] + v.snd, <span class="built_in">getdfn</span>(v.fst, u), a[++idx] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	x = dfn[x], y = dfn[y]; <span class="keyword">if</span>(x &gt; y) <span class="built_in">swap</span>(x, y); <span class="type">int</span> k = y - x + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> dep[st[lg[k]][x]] &lt;= dep[st[lg[k]][y - (<span class="number">1</span> &lt;&lt; lg[k]) + <span class="number">1</span>]] ? st[lg[k]][x] : st[lg[k]][y - (<span class="number">1</span> &lt;&lt; lg[k]) + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ar[l];</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, u = ++m, ls = <span class="built_in">build</span>(l, mid), rs = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">	<span class="keyword">if</span>(ls) <span class="built_in">addedge</span>(u, ls, fw[ls]); <span class="keyword">if</span>(rs) <span class="built_in">addedge</span>(u, rs, fw[rs]); <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rebuild</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	len = <span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">auto</span> v : e1[u]) <span class="keyword">if</span>(v.fst != ff) ar[++len] = v.fst, fw[v.fst] = v.snd;</span><br><span class="line">	<span class="type">int</span> mid = (<span class="number">1</span> + len) &gt;&gt; <span class="number">1</span>, ls = <span class="built_in">build</span>(<span class="number">1</span>, mid), rs = <span class="built_in">build</span>(mid + <span class="number">1</span>, len);</span><br><span class="line">	<span class="keyword">if</span>(ls) <span class="built_in">addedge</span>(u, ls, fw[ls]); <span class="keyword">if</span>(rs) <span class="built_in">addedge</span>(u, rs, fw[rs]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e1[u]) <span class="keyword">if</span>(v.fst != ff) w[v.fst] = w[u] + v.snd, <span class="built_in">rebuild</span>(v.fst, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getrt</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> ed)</span> </span>&#123;</span><br><span class="line">	sz[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] != ff &amp;&amp; !used[i])</span><br><span class="line">		<span class="built_in">getrt</span>(to[i], u, i), sz[u] += sz[to[i]];</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">abs</span>(size - <span class="number">2</span> * sz[u]) &lt; mn) mn = <span class="built_in">abs</span>(size - <span class="number">2</span> * sz[u]), rte = ed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> opt, ll d)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u &lt;= n) value[u] = d + w[u], flag[u] = opt;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] != ff &amp;&amp; !used[i]) <span class="built_in">Find</span>(to[i], u, opt, d + val[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	f1[u] = f2[u] = -INF;</span><br><span class="line">	<span class="keyword">if</span>(flag[u] == <span class="number">1</span>) f1[u] = <span class="built_in">max</span>(f1[u], value[u]);</span><br><span class="line">	<span class="keyword">if</span>(flag[u] == <span class="number">2</span>) f2[u] = <span class="built_in">max</span>(f2[u], value[u]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : E[u]) &#123;</span><br><span class="line">		<span class="built_in">Dfs</span>(v);</span><br><span class="line">		ans = <span class="built_in">max</span>(ans, <span class="built_in">max</span>(f1[u] + f2[v], f2[u] + f1[v]) - Dep[u] - Dep[u]);</span><br><span class="line">		f1[u] = <span class="built_in">max</span>(f1[u], f1[v]), f2[u] = <span class="built_in">max</span>(f2[u], f2[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	E[u].<span class="built_in">clear</span>(), flag[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">(vector&lt;<span class="type">int</span>&gt; p)</span> </span>&#123;</span><br><span class="line">	sta[top = <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : p) &#123;</span><br><span class="line">		<span class="keyword">if</span>(v == <span class="number">1</span>) <span class="keyword">continue</span>; <span class="type">int</span> lca = <span class="built_in">LCA</span>(v, sta[top]);</span><br><span class="line">		<span class="keyword">if</span>(lca == sta[top]) &#123; sta[++top] = v; <span class="keyword">continue</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span>(; top &gt; <span class="number">1</span> &amp;&amp; dep[sta[top - <span class="number">1</span>]] &gt;= dep[lca]; --top) E[sta[top - <span class="number">1</span>]].<span class="built_in">pb</span>(sta[top]);</span><br><span class="line">		<span class="keyword">if</span>(lca != sta[top]) E[lca].<span class="built_in">pb</span>(sta[top]), sta[top] = lca;</span><br><span class="line">		sta[++top] = v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(; top &gt; <span class="number">1</span>; --top) E[sta[top - <span class="number">1</span>]].<span class="built_in">pb</span>(sta[top]); <span class="built_in">Dfs</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u, vector&lt;<span class="type">int</span>&gt; p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u == <span class="number">-1</span> || used[u]) <span class="keyword">return</span> ;</span><br><span class="line">	used[u] = used[u ^ <span class="number">1</span>] = <span class="number">1</span>; <span class="type">int</span> rt1 = to[u], rt2 = to[u ^ <span class="number">1</span>], t1, t2;</span><br><span class="line">	<span class="built_in">Find</span>(rt1, rt2, <span class="number">1</span>, val[u]), <span class="built_in">Find</span>(rt2, rt1, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; ls, rs; <span class="keyword">for</span>(<span class="keyword">auto</span> v : p) flag[v] == <span class="number">1</span> ? ls.<span class="built_in">pb</span>(v) : rs.<span class="built_in">pb</span>(v);</span><br><span class="line">	<span class="built_in">Solve</span>(p);</span><br><span class="line">	size = ls.<span class="built_in">size</span>(), mn = m + <span class="number">1</span>, <span class="built_in">getrt</span>(rt1, rt2, <span class="number">-1</span>), <span class="built_in">solve</span>(rte, ls);</span><br><span class="line">	size = rs.<span class="built_in">size</span>(), mn = m + <span class="number">1</span>, <span class="built_in">getrt</span>(rt2, rt1, <span class="number">-1</span>), <span class="built_in">solve</span>(rte, rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n), m = n;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y; ll z; <span class="built_in">gi</span>(x), <span class="built_in">gi</span>(y), <span class="built_in">gi</span>(z), e1[x].<span class="built_in">pb</span>(<span class="built_in">mp</span>(y, z)), e1[y].<span class="built_in">pb</span>(<span class="built_in">mp</span>(x, z)); &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y; ll z; <span class="built_in">gi</span>(x), <span class="built_in">gi</span>(y), <span class="built_in">gi</span>(z), e2[x].<span class="built_in">pb</span>(<span class="built_in">mp</span>(y, z)), e2[y].<span class="built_in">pb</span>(<span class="built_in">mp</span>(x, z)); &#125;</span><br><span class="line">	<span class="built_in">getdfn</span>(<span class="number">1</span>, <span class="number">0</span>); <span class="built_in">rep</span>(i, <span class="number">1</span>, idx) st[<span class="number">0</span>][i] = a[i];</span><br><span class="line">	lg[<span class="number">0</span>] = <span class="number">-1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, idx) lg[i] = lg[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= idx; j++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= idx - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; i++)</span><br><span class="line">			st[j][i] = dep[st[j - <span class="number">1</span>][i]] &lt;= dep[st[j - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)]] ? st[j - <span class="number">1</span>][i] : st[j - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)];</span><br><span class="line">	<span class="built_in">rebuild</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; p; <span class="built_in">rep</span>(i, <span class="number">1</span>, n) p.<span class="built_in">pb</span>(i); <span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), cmp);</span><br><span class="line">	size = m, mn = m + <span class="number">1</span>, <span class="built_in">getrt</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>), <span class="built_in">solve</span>(rte, p), ans /= <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) ans = <span class="built_in">max</span>(ans, w[i] - Dep[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>虚树</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>CS188人工智能课程翻译</title>
    <url>/2025/07/27/CS188/</url>
    <content><![CDATA[<p><a href="https://www.zhihu.com/column/c_1099720701925302272">前文内容</a>  </p>
<p><a href="https://www.bilibili.com/video/BV1M24y1x7mM?p=56&vd_source=ae5e67f6772cc15652faf9cbf1b41d59">英文实在看不下去了</a></p>
<p>[TOC]</p>
<h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note09.pdf">RL I notes</a>  </p>
<p>在前面的笔记中，我们讨论了马尔可夫决策过程(Markov decision processes, MDP)，即通过值迭代(value iteration)和决策迭代(policy iteration)的方式去计算状态的最优价值(optimal value of states)并得到最优策略(optimal policy)。解决马尔可夫决策过程是 <strong>离线规划(offline planning)</strong> 的一个例子，此时 agent 知道每一处的转换函数(transition function)和奖励函数(reward function)，所有用来预处理最有价值的信息都不需要任何操作(action)来获取。在这节中，我们将讨论 <strong>在线规划(online planning)</strong> ，此时 agent 对任何一处的转换函数和奖励函数都一无所知。在在线规划中，agent 必须尝试 <strong>探索(exploration)</strong> ，在探索中它进行操作(actions)并在后继状态(successor states)得到反馈(feedbacks)并得到相应的奖励(rewards)。agent用反馈的信息去估计(estimate)最优策略，这个过程被称作 <strong>强化学习(reinforcement learning)</strong> ，再用估计过的最优策略去探索或者说使奖励最大化(reward maximization)。</p>
<p>先从基本的术语开始。在在线规划的每一步，agent 从状态 $ s $ 出发，然后通过操作 $ a $ 最后到达后继状态 $ s’ $ ，获得奖励 $ r $ 。每一个多元组 $ (s, a, s’, r) $ 被称作 <strong>样本(sample)</strong> 。 agent 持续地进行操作并在后继状态收集样本直到到达结束状态(terminal state)。像这样的一组样本(a collection of sample)称作一个周期(episode)。agents会进行多个周期以得到足够的数据进行学习。</p>
<p>有两种强化学习的类型——基于模型的学习(model-based learning)和不基于模型的学习(model-free learning)。基于模型的学习尝试用样本去估计转换和奖励函数，再用这些估计进行MDP（值迭代、策略迭代）。不基于模型的学习尝试去直接估计状态的 Q 值(Q-values of states)，而不用空间去构造MDP中转换函数和奖励函数的模型。</p>
<h3 id="基于模型的学习"><a href="#基于模型的学习" class="headerlink" title="基于模型的学习"></a>基于模型的学习</h3><p>用某个策略 $ \pi_{explore} $ 探索。</p>
<p>agent 生成转换函数的近似值 $ \hat{T}(s, a, s’) $ ，通过记录从 Q 状态 $ (s, a) $ 转换到状态 $ s’ $ 的次数，并规范化（即古典概率， $ \hat{T}(s, a, s’) &#x3D; \frac{count((s, a) \rightarrow s’)}{count((s, a))} $ ）。根据大数定律，收集的样本越多， $ \hat{T} $ 越接近真实值。</p>
<p>agent 生成奖励函数 $ \hat{R} $ ，通过不断探索未知的多元组 $ (s, a, s’) $ 。</p>
<p>当我们觉得合适的时候，我们结束 agent 的训练(training)，通过值迭代或者策略迭代在当前的模型（包含 $ \hat{T}, \hat{R} $ ）生成开发策略 $ \pi_{exploit} $ ，目标是使奖励最大化。我们将要讨论如何有效地在探索(exloration)和开发(exploitation)之间分配时间的方法。</p>
<p>基于模型的学习简单易懂且高效，但是维护所有收集的多元组 $ (s, a, s’) $ 的成本昂贵（空间、时间），所以在下一节——不基于模型的学习，我们将开发一种方法，免于多元组 $ (s, a, s’) $ 的维护，避免基于模型学习的内存开销。</p>
<h3 id="不基于模型的学习"><a href="#不基于模型的学习" class="headerlink" title="不基于模型的学习"></a>不基于模型的学习</h3><p>有很多不基于模型的学习算法，我们将讲以下三种：直接估值(direct evaluation)，时间差异学习(temporal difference learning)和 Q-learning 。直接估值和时间差异学习属于 <strong>被动强化学习(passive reinforcement learning)</strong> 的一类算法。在被动强化学习中，agent 遵循已知的策略操作并在过程中得到状态的值，这正是在 $ T $ 和 $ R $ 已知时 MDP 的策略评估所做的。 Q-learning 属于另一类不基于模型的学习—— <strong>主动强化学习(active reinforcement learning)</strong>，即agent在学习过程中可以通过反馈多次更新策略并最后经历足够多的探索后决定最优策略。</p>
<h4 id="直接估值"><a href="#直接估值" class="headerlink" title="直接估值"></a>直接估值</h4><p>先确定一个策略 $ \pi $ ，然后让 agent 遵循策略 $ \pi $ 进行多个周期。在 agent 收集样本的同时也维护每个状态下得到的价值和(counts of the total utility)以及 agent 访问到每个状态的次数(the number of times it visited the state)。任何时候，我们可以计算任意状态 $ s $ 的价值（即期望收益）：状态 $ s $ 的价值和除以状态 $ s $ 的访问次数。</p>
<p>例子：</p>
<p>策略 $ \pi $ 如下，衰减系数 $ \gamma &#x3D; 1 $ ，每条边奖励函数为 $ -1 $ 。</p>
<p><img src="/2025/07/27/CS188/fig1.png" alt="fig1.png"></p>
<p>状态 C 有概率走向状态 A 和状态 D，在探索次数较少时，从状态 B 出发和从状态 E 出发可能导致计算出的期望收益不同。在探索次数增多后会收敛成同一个值，但是这将会花费大量的时间。这个问题可以通过另一个被动强化学习——时间差异学习(temporal difference learning)来减轻。</p>
<h4 id="时间差异学习"><a href="#时间差异学习" class="headerlink" title="时间差异学习"></a>时间差异学习</h4><p>时间差异学习(temporal difference learning， TD learning)用了<code>从每一次经历中学习</code>的想法，而不是像直接估值那样先对状态价值和以及访问次数统计再做学习。在策略评估中，我们用固定的策略生成的方程组和 Bellman 方程组决定状态的值（或者迭代更新，像值迭代一样）。</p>
<p>$$<br>V^{\pi}(s) &#x3D; \sum_{s’}T(s, \pi(s), s’)[R(s, \pi(s), s’) + \gamma V^{\pi}(s’)]<br>$$</p>
<p>TD learning 尝试去解决如何在没有权重的情况下计算加权平均值的问题，用 <strong>指数滑动平均(exponential moving average)</strong> 的方式。</p>
<p>步骤：</p>
<ol>
<li>初始化：</li>
</ol>
<p>$$<br>\forall s, V^{\pi}(s) &#x3D; 0<br>$$</p>
<ol start="2">
<li>对于每一步，agent 进行操作 $ \pi(s) $ ，从状态 $ s $ 转移到状态 $ s’ $ ，获得奖励 $ R(s, \pi(s), s’) $ 。我们可以得到样本值(sample value)：</li>
</ol>
<p>$$<br>sample &#x3D; R(s, \pi(s), s’) + \gamma V^{\pi}(s’)<br>$$</p>
<p>$ \space \space \space \space \space \space $ 这是对 $ V^{\pi}(s) $ 的新的估计。</p>
<ol start="3">
<li>将样本值用指数滑动平均的方式纳入对 $ V^{\pi}(s) $ 的估计，对 $ V^{\pi}(s) $ 进行更新 ：</li>
</ol>
<p>$$<br>V^{\pi}(s) \leftarrow (1 - \alpha)V^{\pi}(s) + \alpha \cdot sample<br>$$</p>
<p>$ \space \space \space \space \space \space $ 其中 $ \alpha (0 \leq \alpha \leq 1) $ 被称为 <strong>学习速率(learning rate)</strong> 。</p>
<p>由这个更新规则可知，越旧的样本的权重指数级减小，这正是我们更新 $ V^{\pi}(s) $ 所需要的（因为越旧的样本往往意味着较劣的策略，也意味着错误）！这就是 TD learning 的美妙之处——用一个简单直接的更新规则，我们能够：</p>
<ul>
<li>在每一步学习，因此没得到状态的值的信息可以直接使用。</li>
<li>给较旧的、不太准确的样本给予指数级减小的权重。</li>
<li>相比于直接估值，可以在更少的周期内更快地向正确的状态的值收敛。</li>
</ul>
<h4 id="Q-learning"><a href="#Q-learning" class="headerlink" title="Q-learning"></a>Q-learning</h4><p>无论是直接估值还是 TD learning ，它们都会在所遵循的策略下得到真实的状态的值。但是，它们都有一个固有的问题——我们想要找一个最优的策略，这需要知道每个状态的 Q 值。为了计算 Q 值，我们需要转换函数和奖励函数并用 Bellman 方程表示。</p>
<p>$$<br>Q^{<em>}(s, a) &#x3D; \sum_{s’}T(s, a, s’)[R(s, a, s’) + \gamma V^{</em>}(s’)]<br>$$</p>
<p>因此，为了高效地更新 agent 的策略，TD learning 和直接估值通常与一些基于模型的学习一起使用，以获得 $ T $ 和 $ R $ 的估计。这种情况可以通过 Q-learning 的思想避免，即绕过对转换函数、奖励函数的需要，直接对 Q 值进行学习。因此，Q-learning 是完全不基于模型的。Q-learning 用了 Q 值迭代进行更新：</p>
<p>$$<br>Q_{k + 1}(s, a) \leftarrow \sum_{s’}T(s, a, s’)[R(s, a, s’) + \gamma \max_{a’} Q(s’, a’)]<br>$$</p>
<p>有了这个新的更新规则，和 TD learning 一样，用指数滑动平均：</p>
<p>$$<br>sample &#x3D; R(s, a, s’) + \gamma \max_{a’} Q(s’, a’)\<br>Q(s, a) \leftarrow (1 - \alpha) Q(s, a) + \alpha \cdot sample<br>$$</p>
<p>只要我们花足够多的时间去探索，并且用恰当的速率去减小 $ \alpha $ ，Q-learning 会对每个 Q 状态得到最优的 Q 值。这使得 Q-learning 具有革命性的意义——当 TD learning 和直接估值在某个策略下得到状态的值再用其他技巧决定最优策略时，Q-learning 可以直接得到最优策略，即使做出的次优或者随机的操作。这就是所谓的 <strong>离线策略学习(off-policy learning)</strong> （相较于直接估值和 TD learning 作为 <strong>在线策略学习(on-policy learning)</strong> 的例子）。</p>
<h4 id="Approximate-Q-learning"><a href="#Approximate-Q-learning" class="headerlink" title="Approximate Q-learning"></a>Approximate Q-learning</h4><p>Q-learning 还有进步的空间。Q-learning 将所有的状态以表格的形式存储，当状态数很多时，Q-learning 的效率并不高。这意味着我们不能访问所有状态并且不能存储所有的 Q 值，因为空间不够。</p>
<p>假如一个局势下 Q-learning 判断出是不利的，那么对于类似的情况 Q-learning 无法判断也是不利的。Approximate Q-learning 尝试去学习一些一般的情况并外推到许多类似的情况来解释这一点。生成学习经验的关键是对状态的 <strong>基于特征的表示(feature-based representation)</strong> ，即用一个 <strong>特征向量(feature vector)</strong> 来表示状态。例如，吃豆人的特征向量可以编码为：</p>
<ul>
<li>距离最近的幽灵的距离</li>
<li>距离最近的食物的距离</li>
<li>幽灵的个数</li>
<li>吃豆人是否被困(True&#x2F;False)</li>
</ul>
<p>使用特征向量，我们可以将状态的值和 Q 值视为线性函数：</p>
<p>$$<br>\begin{aligned}<br>    V(s) &amp;&#x3D; \sum_{k &#x3D; 1}^{n} w_{k} \cdot f_{k}(s) &#x3D; \vec{w} \cdot \vec{f}(s)\<br>    Q(s, a) &amp;&#x3D; \vec{w} \cdot \vec{f}(s, a)<br>\end{aligned}<br>$$</p>
<p>其中 $ \vec{f}(s) $ 表示状态的特征向量，$ \vec{f}(s, a) $ 表示 Q-状态 $ (s, a) $ 的特征向量，$ \vec{w} $ 表示权重向量。定义偏差(difference)为：</p>
<p>$$<br>difference &#x3D; [R(s, a, s’) + \gamma \max_{a’} Q(s’, a’)] - Q(s, a)<br>$$</p>
<p>Approximate Q-learning 的更新规则和 Q-learning 完全一致（实际上是最小二乘，不知道为什么笔记里写的是和 Q-learning 更新方式一致的）：</p>
<p>$$<br>w_{k} \leftarrow w_{k} + \alpha \cdot difference \cdot f_{k}(s, a)<br>$$</p>
<p>放弃对每个状态的 Q 值存储，使用 Approximate Q-learning 我们只需要存储一个权重向量就可以计算需要的 Q 值。因此，这不仅给了我们一个更泛用的 Q-learning 版本，并且显著提升了存储效率。</p>
<p>用偏差来重写 Q-learning 的更新规则：</p>
<p>$$<br>Q(s, a) \leftarrow Q(s, a) + \alpha \cdot difference<br>$$</p>
<p>这个更新规则和 $ w_{k} \leftarrow w_{k} + \alpha \cdot difference \cdot f_{k}(s, a) $ 略有不同但同样具有价值：它计算估计值和当前值的偏差，然后往估计值方向趋近，幅度和偏差值成正比。</p>
<h4 id="策略搜索-policy-search"><a href="#策略搜索-policy-search" class="headerlink" title="策略搜索(policy search)"></a>策略搜索(policy search)</h4><p>（note 里没写，PPT 里讲地不清楚，视频里一笔带过，以下内容疑似 PPT 内容的机翻）</p>
<p>问题：通常，运行良好的基于特征的策略（能赢，最大化得分）不是去选 V 值或者 Q 值最好的策略。</p>
<p>解决方案：学习奖励最大化的策略，而不是预测的值。</p>
<p>策略搜索：从一个不错的策略开始（例如：Q-learning 生成的策略），然后（在特征权重(feature weights)上）用爬山微调。</p>
<p>最简单的策略搜索：</p>
<ul>
<li>从线性的初始状态值或者 Q 值开始。</li>
<li>稍稍增加或者减小每个特征的权重，然后观察策略是否更优。</li>
</ul>
<p>问题：</p>
<ul>
<li>我们怎样认为这个策略更好？</li>
<li>这需要运行很多次样例的周期！</li>
<li>当特征很多时，这种方法就显得不实用。</li>
</ul>
<p>更好的方法利用前瞻性结构(lookahead structure)，聪明地取样，改变多个参数等等。</p>
<p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note10.pdf">RL II notes</a></p>
<p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/lectures/cs188-fa22-lec10.pdf">RL II slides</a></p>
<h3 id="探索和开发-exploration-and-exploitation"><a href="#探索和开发-exploration-and-exploitation" class="headerlink" title="探索和开发(exploration and exploitation)"></a>探索和开发(exploration and exploitation)</h3><h4 id="如何去探索？"><a href="#如何去探索？" class="headerlink" title="如何去探索？"></a>如何去探索？</h4><p>最简单的方式：随机操作( $ \varepsilon $ - greedy)</p>
<ul>
<li>每一步，进行两种选择。</li>
<li>一个较小的概率 $ \varepsilon $ ，随机操作。</li>
<li>一个较大的概率 $ 1 - \varepsilon $ ，按当前策略操作。</li>
</ul>
<p>随机操作的问题：</p>
<ul>
<li>最终会探索整个空间，但一旦完成了学习，就会到处乱走。</li>
<li>一个解决方法： $ \varepsilon $ 随时间减小。</li>
<li>另一个解决办法：用探索函数(exploration functions)。</li>
</ul>
<h4 id="探索函数-exploration-functions"><a href="#探索函数-exploration-functions" class="headerlink" title="探索函数(exploration functions)"></a>探索函数(exploration functions)</h4><p>对于随机操作，可以探索一定次数后结束。</p>
<p>更好的想法是，去探索访问次数少的点，最后停止探索(explore areas whose badness is not (yet) established, eventually stop exlporing)。</p>
<p>用估计的值 $ u $ 和访问次数 $ n $ 来定义探索函数，返回一个乐观的估计，例如 $ f(u, n) &#x3D; u + k &#x2F; n $ 。</p>
<p>对 Q 值更新规则进行修改：</p>
<p>$$<br>\begin{aligned}<br>    sample &amp;&#x3D; R(s, a, s’) + \gamma \max_{a’}f(Q(s’, a’), N(s’, a’))\<br>    Q(s, a) &amp;\leftarrow (1 - \alpha) Q(s, a) + \alpha \cdot sample<br>\end{aligned}<br>$$</p>
<h4 id="反悔-regret"><a href="#反悔-regret" class="headerlink" title="反悔(regret)"></a>反悔(regret)</h4><p>即使你能找到最优策略，在过程中你依旧可能会犯错误。</p>
<p>反悔值是你衡量错误成本的指标：最优（期望）的奖励和你（期望）的奖励（包括早期的次优选）的差。</p>
<p>最大限度地减少反悔不仅仅是为了得到最优策略，它还需要最优化学习以达到最优策略。</p>
<p>例如：随机探索和用探索函数探索都能得到最优策略，但是随机探索有更高的反悔值。</p>
<h2 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/lectures/cs188-fa22-lec11.pdf">Probability slides</a></p>
<p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note11.pdf">Probability notes</a></p>
<p>条件独立：事件A，B关于事件C条件独立（只要C事件发生，A、B相互独立），当且仅当：</p>
<p>$$<br>P(A | BC) &#x3D; P(A | C)\<br>or \<br>P(AB | C) &#x3D; P(A | C)P(B | C)<br>$$</p>
<p>记作：</p>
<p>$$<br>A \perp B \vert {C}<br>$$</p>
<p>推导：</p>
<p>$$<br>\begin{aligned}<br>    P(A | BC) &amp;&#x3D; \frac{P(ABC)}{P(BC)} \<br>    &amp;&#x3D; \frac{P(ABC)}{P(C)} \frac{P(C)}{P(BC)} \<br>    &amp;&#x3D; \underline{P(AB | C)} \frac{P(C)}{P(BC)} \<br>    &amp;&#x3D; \underline{P(A | C) P(B | C)} \frac{P(C)}{P(BC)} \<br>    &amp;&#x3D; P(A | C) \frac{P(BC)}{P(C)} \frac{P(C)}{P(BC)} \<br>    &amp;&#x3D; P(A | C)<br>\end{aligned}<br>$$</p>
<h2 id="贝叶斯网络"><a href="#贝叶斯网络" class="headerlink" title="贝叶斯网络"></a>贝叶斯网络</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/lectures/cs188-fa22-lec12.pdf">BN: Representation slides</a></p>
<p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note12.pdf">BN: Representation notes</a></p>
<h3 id="贝叶斯网络表达-Bayesian-Network-Representation"><a href="#贝叶斯网络表达-Bayesian-Network-Representation" class="headerlink" title="贝叶斯网络表达(Bayesian Network Representation)"></a>贝叶斯网络表达(Bayesian Network Representation)</h3><p>虽然枚举可以计算我们所有想要知道的概率，在计算机中用内存存储所有的联合分布(joint distribution)对于实际问题是不切实际的——假如有 n 个变量，每个变量有 d 个取值，那联合分布表会有 d^n^ 个条目，呈指数级。</p>
<p>贝叶斯网络通过条件概率(conditional probility)避免了这个问题。概率被存储在一些小的条件概率表并用有向无环图(directed acyclic graph, DAG)描述变量之间的关系。本地的概率表和DAG一起将信息存储，并足以计算任何条件概率分布。</p>
<p>我们定义贝叶斯网络包含：</p>
<ul>
<li>一个DAG，一个节点表示一个变量 $ X $ 。</li>
<li>对于每个节点有一个条件概率分布 $ P(X | A_1 \dots A_n) $ ，其中 $ A_i $ 表示 $ X $ 的第 $ i $ 个父亲，用条件概率表(conditional probability table, CPT)存储。每个CPT含有 $ n + 2 $ 列：$ n $ 个父亲，一个 $ X $ ，还有一个条件概率。</li>
</ul>
<p>贝叶斯网络的结构对不同节点间条件独立关系进行编码。这些条件独立性使我们可以存储多个小表，而非一个大表。</p>
<p>很重要的一点是贝叶斯网络节点之间的边并非表示两者之间存在相关性，不是因果关系。</p>
<p>例如，假设有一个模型，包含5个二进制随机变量：</p>
<ul>
<li>B：发生盗窃</li>
<li>A：警报响起</li>
<li>E：发生地震</li>
<li>J：John报警</li>
<li>M：Mary报警</li>
</ul>
<p>它们的关系可以用下图表示。</p>
<p><img src="/2025/07/27/CS188/fig2.png" alt="fig2.png"></p>
<p>在贝叶斯网络里，我们存储概率表 $ P(B), P(E), P(A | BE), P(J | A), P(M | A) $ 。</p>
<p>我们可以计算概率：</p>
<p>$$<br>P(X_1 X_1 \dots X_n) &#x3D; \prod_{i &#x3D; 1}^{n} P(X_i | parents(X_i))<br>$$</p>
<p>例如：</p>
<p>$$<br>P(-b, -e, +a, +j, -m) &#x3D; P(-b) \cdot P(-e) \cdot P(+a | -b, -e) \cdot P(+j | +a) \cdot P(-m | +a)<br>$$</p>
<h3 id="贝叶斯网络结构-Structure-of-Bayes-Nets"><a href="#贝叶斯网络结构-Structure-of-Bayes-Nets" class="headerlink" title="贝叶斯网络结构(Structure of Bayes Nets)"></a>贝叶斯网络结构(Structure of Bayes Nets)</h3><p>$$<br>P(x_i | x_1 x_2 \dots x_{i - 1}) &#x3D; P(x_i | parents(x_i))\<br>\Rightarrow P(x_1 x_2 \dots x_{i - 1}) &#x3D; \prod_{i &#x3D; 1}^{n} P(x_i | parents(x_i))<br>$$</p>
<p>即 $ x_i $ 与 $ x_1, x_2, \dots x_{i - 1} &#x2F; parents(x_i) $ 在 $ parents(x_i) $ 下条件独立。</p>
<p>例如：</p>
<p><img src="/2025/07/27/CS188/fig2.png" alt="fig2.png"></p>
<p>$$<br>\begin{aligned}<br>    P(BEAJM) &amp;&#x3D; P(B) P(B | E)P(A | BE) P(J | BEA) P(M | BEAJ) \<br>    &amp;&#x3D; P(B) P(E) P(A | BE) P(J | A) P(M | A)<br>\end{aligned}<br>$$</p>
<p>一一对应可得条件独立关系。</p>
<p>每个节点与其马尔可夫覆盖(Markov blanket)之外的点条件独立。</p>
<p>一个变量的马尔可夫覆盖包含它的父亲、儿子和儿子的其他父亲（因为是DAG）。</p>
<h3 id="D分离-D-Seperation"><a href="#D分离-D-Seperation" class="headerlink" title="D分离(D-Seperation)"></a>D分离(D-Seperation)</h3><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/notes/cs188-fa22-note13.pdf">Slides</a></p>
<p>D分离（D-Separation）又被称作有向分离，是一种用来判断变量是否条件独立的图形化方法。相比于非图形化方法，D-Separation更加直观且计算简单。对于一个DAG（有向无环图），D-Separation方法可以快速的判断出两个节点之间是否是条件独立的。</p>
<p>查询：$ x_i \perp x_j \vert {x_{k_1}, x_{k_2}, \dots x_{k_n}} $</p>
<p>检查所有连接 $ x_i $ 和 $ x_j $ 的路径。如果一条或者多条路径是 <strong>激活</strong> 的，那么，条件独立性不成立。</p>
<p>否则，条件独立性成立： $ x_i \perp x_j \vert {x_{k_1}, x_{k_2}, \dots x_{k_n}} $ 。</p>
<p>如果路径中所有的三元组都是 <strong>激活</strong> 的，则该路径是 <strong>激活</strong> 的。</p>
<p>三元组的三种形式（又或者没有证据变量）：</p>
<ul>
<li>因果链条</li>
</ul>
<blockquote>
<p>A(0) -&gt; B(1) -&gt; C(0)</p>
</blockquote>
<p>$$<br>P(ABC) &#x3D; P(A)P(B | A)P(C | B) \<br>A \perp C ? \space (P(AC) &#x3D; P(A)P(C) ?) \<br>No. \<br>A \perp C | B ? \space (P(AC | B) &#x3D; P(A | B)P(C | B) ? )\<br>Yes. \<br>P(AC | B) &#x3D; \frac{P(ABC)}{P(B)}\<br>&#x3D; \frac{P(A)P(B|A)P(C|B)}{P(B)}<br>\&#x3D; \frac{P(AB)}{P(A)} \times P(C|B)\<br>&#x3D; P(A|B)P(C|B)<br>$$</p>
<p>链上的中间变量可以阻隔影响传播。</p>
<ul>
<li>共同原因<blockquote>
<p>A(0) &lt;- B(1) -&gt; C(0)</p>
</blockquote>
</li>
</ul>
<p>$$<br>P(ABC) &#x3D; P(B)P(A|B)P(C|B) \<br>A \perp C ? \space (P(AC) &#x3D; P(A)P(C) ?) \<br>No. \<br>A \perp C | B ? \space (P(AC | B) &#x3D; P(A | B)P(C | B) ? )\<br>Yes. \<br>P(AC|B) &#x3D; \frac{P(ABC)}{P(B)}\<br>&#x3D; \frac{P(B)P(A|B)P(C|B)}{P(B)}\<br>&#x3D; P(A|B)P(C|B)<br>$$</p>
<ul>
<li>共同结果<blockquote>
<p>A(0) -&gt; B(1) &lt;- C(0)</p>
</blockquote>
</li>
</ul>
<p>$$<br>P(ABC) &#x3D; P(A)P(C)P(B|AC)\<br>P(A)P(C) &#x3D; P(AC)\<br>A \perp C | B ? \space (P(AC | B) &#x3D; P(A | B)P(C | B) ? )\<br>No. \<br>P(A) &#x3D; P(C) &#x3D; \frac{1}{2}\<br>P(B) &#x3D; A \space or \space C\<br>P(AC|B) &#x3D; \frac{1}{3}\<br>P(A|B) &#x3D; P(C|B) &#x3D; \frac{2}{3}<br>$$</p>
<p>如果路径中某三元组是非激活的，那么这条路径就是非激活的。</p>
<h4 id="贝叶斯网络独立性问题的形式化定义"><a href="#贝叶斯网络独立性问题的形式化定义" class="headerlink" title="贝叶斯网络独立性问题的形式化定义"></a>贝叶斯网络独立性问题的形式化定义</h4><ul>
<li><p>问题：给定证据变量(evidence variables) $ {Z} $ ， $ X $ 是否条件独立于 $ Y $ ?</p>
</li>
<li><p>D-分离：在贝叶斯网络中寻找关联路径，并基于路径作独立性判断。</p>
</li>
</ul>
<ol>
<li>列出所有连接 $ X $ 和 $ Y $ 的路径。</li>
<li>没有激活路径 &#x3D; 独立性，有激活路径 &#x3D; 独立性不成立。</li>
</ol>
<ul>
<li>路径的独立性判断：将路径拆解为多个三元组，检查三元组的独立性。</li>
</ul>
<h4 id="激活-非激活路径"><a href="#激活-非激活路径" class="headerlink" title="激活 &#x2F; 非激活路径"></a>激活 &#x2F; 非激活路径</h4><p>如果每个三元组都是激活的，那这条路径就是激活的。</p>
<ul>
<li>因果链条：若 $ B $ 未被观察， $ A $ 和 $ C $ 不相互独立；否则相互独立。</li>
<li>共同原因：若 $ B $ 未被观察， $ A $ 和 $ C $ 不相互独立；否则相互独立。</li>
<li>共同结果：若 $ B $ 或者其子孙节点未被观察， $ A $ 和 $ C $ 相互独立；否则不相互独立。</li>
</ul>
<p>出现不独立的情况，这个三元组就被激活。</p>
<p>如果任一三元组不激活，这条路径就不激活。</p>
<h4 id="贝叶斯网络中的条件独立性"><a href="#贝叶斯网络中的条件独立性" class="headerlink" title="贝叶斯网络中的条件独立性"></a>贝叶斯网络中的条件独立性</h4><p>给定贝叶斯网络，运用 D-分离 方法，可以得到所有形式的条件独立性。</p>
<p>$$<br>x_i \perp x_j | {x_{k_1}, \dots, x_{k_n}}<br>$$</p>
<p>基于得到的条件独立列表，可以确定贝叶斯网络能够表达的所有概率分布。</p>
<h3 id="贝叶斯网络的独立性隐含关系"><a href="#贝叶斯网络的独立性隐含关系" class="headerlink" title="贝叶斯网络的独立性隐含关系"></a>贝叶斯网络的独立性隐含关系</h3><p>给定贝叶斯网络，只有特定的联合分布能够被表达。</p>
<p>贝叶斯网络中的某些（条件）独立性，确立了能被表达的联合分布。</p>
<p>表达扩充：在贝叶斯网络中增加边，可以扩充能表达的分布范围。</p>
<p>极端情况：节点不存在独立性，能表达任意分布。</p>
<h3 id="概率推断"><a href="#概率推断" class="headerlink" title="概率推断"></a>概率推断</h3><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/lectures/cs188-fa22-lec14.pdf">Slides</a></p>
<p>询问</p>
<p>$$<br>P(Q | e_1 e_2 \dots e_k)<br>$$</p>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>通常情况：</p>
<ul>
<li>证据变量： $ e_1, e_2, \dots , e_k $</li>
<li>询问变量： $ Q $</li>
<li>隐藏变量： $ H_1, \dots , H_r $</li>
</ul>
<p>步骤：</p>
<ol>
<li>选出包含证据变量的条件概率表的条目。</li>
<li>将 $ H $ 相加：</li>
</ol>
<p>$$<br>P(Q \space e_1 \dots e_k) &#x3D; \sum_{h_1, h_2, \dots , h_r} P(Q \space h_1 \dots h_r \space e_1 \dots e_k)<br>$$</p>
<ol start="3">
<li>规范化</li>
</ol>
<p>$$<br>Z &#x3D; \sum_{q} P(Q \space e_1 \dots e_k) \<br>P(Q | e_1 \dots e_k) &#x3D; \frac{P(Q \space e_1 \dots e_k)}{Z}<br>$$</p>
<p>时间复杂度是指数级的，能够得到准确的答案。</p>
<h4 id="消元法"><a href="#消元法" class="headerlink" title="消元法"></a>消元法</h4><p>联合分布 $ P(x y) $ 的和为 $ 1 $ 。</p>
<p>选定几个节点固定： $ P(x Y) $ 。这是联合分布的一部分，其和为 $ P(x) $ 。</p>
<p>大写字母（未确定变量）的个数即概率表的维数。</p>
<p>单个条件概率： $ P(Y | x) $ 。</p>
<ul>
<li>包含所有 $ P(y | x) $ 的固定 $ x $ 的条目。</li>
<li>和为 $ 1 $ 。</li>
</ul>
<p>条件概率组： $ P(Y | X) $ ：</p>
<ul>
<li>包含所有 $ P(y | x) $ 的所有条目。</li>
<li>和为 $ X $ 的集合大小 $ |X| $ 。</li>
</ul>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>一个一个消除隐藏变量。要消除隐藏变量 $ X $ ，我们要：</p>
<ol>
<li>将包含 $ X $ 的因子(factor)乘起来。</li>
<li>加起来消除 $ X $ 。</li>
</ol>
<p>一个因子定义为未被规范化的概率。在变量消除期间的所有时候，每个因子都将与其对应的概率成正比，但每个因子的基础分布不一定像概率分布那样总和 $ 1 $ 。伪代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">elimination</span>(<span class="params">X, e, bn</span>): <span class="comment"># returns a distribution of X</span></span><br><span class="line">    <span class="comment"># X : query variable.</span></span><br><span class="line">    <span class="comment"># e : observed values for variables E(evidence variables).</span></span><br><span class="line">    <span class="comment"># bn : a Bayesian network specifying joint distribution</span></span><br><span class="line">    <span class="comment"># P(x1, ..., xn).</span></span><br><span class="line">    factors = []</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> ORDER(var, e):</span><br><span class="line">        factors = [MAKE_FACTOR(var, e) | factors]</span><br><span class="line">        <span class="keyword">if</span> var <span class="keyword">is</span> hidden variable:</span><br><span class="line">            factors = SUM_OUT(var, factors)</span><br><span class="line">    <span class="keyword">return</span> NORMALIZE(POINTWISE_PRODUCT(factors))</span><br></pre></td></tr></table></figure>

<p>（CS188 Notes 里写得和天书一样）</p>
<p>举个例子：</p>
<p><img src="/2025/07/27/CS188/fig3.png" alt="fig3.png"></p>
<p>这个贝叶斯网络给定了 $ P(C), P(C | T), P(S | T), P(E | CS) $ 的联合分布。</p>
<p>假设我们要求 $ P(T | +e) $ 。假如用枚举的方法我们需要 16 行的概率分布函数 $ P(T, C, S, E) $ ，选择包含 $ +e $ 的行，对 $ C, S $ 求和最后规范化。</p>
<p>用消元法就先将 $ C $ 消掉，再把 $ S $ 消掉。</p>
<ol>
<li>将包含 $ C $ 的因子乘起来， $  f_1(C, +e, T, S) &#x3D; P(C | T) \cdot P(+e | C, S)  $ ，也写作 $ P(C, +e | T, S) $ 。</li>
<li>在这个新的因子里将 $ C $ 求和，得到新的因子 $ f_2(+e, T, S) $ ，也写作 $ P(+e | T, S) $ 。</li>
<li>将包含 $ S $ 的因子乘起来， $  f_3(+e, T, S) &#x3D; P(S | T) \cdot f_2(+e, T, S) $ ，也写作 $ P(+e, S | T) $ 。</li>
<li>将 $ S $ 求和，得到新的因子 $ f_4(+e, T) $ ，也写作 $ P(+e | T) $ 。</li>
<li>将剩下的因子乘起来，$ f_5(+e, T) &#x3D; f_4(+e, T) \cdot P(T) $ 。</li>
</ol>
<p>消元的顺序也会影响复杂度。如图：</p>
<p><img src="/2025/07/27/CS188/fig4.png" alt="fig4.png"></p>
<p>我们在进行变量消除的过程中，会进行多次乘法，这就可能会产生各种尺寸的因子，如果最大的因子中有 $ w $ 个变量，那么，单次消元的代码复杂度为 $ O(2^w) $ 。我们把 $ w $ 这个数字称为消除顺序 (Elimination Order) 的宽度 (Width)，这是衡量一个消除顺序的重要指标，我们希望能找到一个具备最小宽度的消除顺序，也就是希望最大因子的尺寸尽可能小。</p>
<h3 id="概率推断是-NPC-问题"><a href="#概率推断是-NPC-问题" class="headerlink" title="概率推断是 NPC 问题"></a>概率推断是 NPC 问题</h3><p>Slides 提到了一种用贝爷斯网络构造 3-sat 问题的方法。众所周知 3-sat 是无法在多项式时间复杂度内解决的问题，所以概率推断是 np-hard 的。</p>
<h3 id="取样-sampling"><a href="#取样-sampling" class="headerlink" title="取样(sampling)"></a>取样(sampling)</h3><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><ul>
<li>从分布 S 中取 N 个样本。</li>
<li>计算后验概率。</li>
<li>体现这个概率收敛于真实概率 P 。</li>
</ul>
<h4 id="先验采样-Prior-Sampling"><a href="#先验采样-Prior-Sampling" class="headerlink" title="先验采样(Prior Sampling)"></a>先验采样(Prior Sampling)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">For i = 1, 2, ..., n</span><br><span class="line">    Sample x_i from P(X_i | Parents(X_i))</span><br><span class="line">return (x_1, x_2, ..., x_n)</span><br></pre></td></tr></table></figure>

<ul>
<li>这个过程生成样本，其中有 $ P(x_1, \dots, x_n) $ 的概率生成样本 $ (x_1, \dots, x_n) $ 。</li>
<li>令一个事件的样本数量为 $ N_{PS}(x_1, \dots, x_n) $ 。</li>
<li></li>
</ul>
<p>$$<br>\begin{aligned}<br>    \lim_{N \rightarrow \infin} \hat{P}(x_1, \dots, x_n) &amp;&#x3D; \lim_{N \rightarrow \infin} N_{PS}(x_1, \dots, x_n) &#x2F; N \<br>    &amp;&#x3D; P(x_1, \dots, x_n)<br>\end{aligned}<br>$$</p>
<h4 id="拒绝采样-Rejection-Sampling"><a href="#拒绝采样-Rejection-Sampling" class="headerlink" title="拒绝采样(Rejection Sampling)"></a>拒绝采样(Rejection Sampling)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: evidence instantiation</span><br><span class="line">For i = 1, 2, ..., n</span><br><span class="line">    Sample x_i from P(X_i | Parents(X_i))</span><br><span class="line">    if x_i not consistent with evidence</span><br><span class="line">        return: reject this sample</span><br><span class="line">return (x_1, x_2, ..., x_n)</span><br></pre></td></tr></table></figure>

<p>在 Prior Sampling 的基础上把不符合条件（不满足证据变量条件）的样本直接在采样的时候删去。</p>
<h4 id="Likelihood-Weighting"><a href="#Likelihood-Weighting" class="headerlink" title="Likelihood Weighting"></a>Likelihood Weighting</h4><ul>
<li>rejection sampling 的问题：当证据变量的概率很小时，会拒绝很多样本。</li>
<li>Idea：直接固定证据变量(要赋予一定的权重，大小为得到证据变量的条件概率)。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: evidence instantiation</span><br><span class="line">w = 1.0</span><br><span class="line">For i = 1, 2, ..., n</span><br><span class="line">    if x_i is an evidence variable</span><br><span class="line">        X_i = observation x_i for X_i</span><br><span class="line">        set w = w * P(x_i | Parents(X_i))</span><br><span class="line">    else</span><br><span class="line">        sample x_i from P(x_i | Parents(X_i))</span><br><span class="line">return (x_1, x_2, ..., x_n), w</span><br></pre></td></tr></table></figure>

<ul>
<li>Likelihood Weighting 的问题：Evidence influences the choice of downstream variables, but not upstream ones (C isn’t more<br>likely to get a value matching the evidence) （没看懂，大概是拓扑序前面的节点会影响后面的节点，但是后面的节点不会对前面的节点有影响，但这怎么成了问题）（哦，大概是条件概率表不构成拓扑关系，这时候就不能用之前的方式）</li>
</ul>
<h4 id="吉布斯采样-Gibbs-Sampling"><a href="#吉布斯采样-Gibbs-Sampling" class="headerlink" title="吉布斯采样(Gibbs Sampling)"></a>吉布斯采样(Gibbs Sampling)</h4><p>假设有一随机向量 $ (x_1,x_2,\dots,x_n) $ ，每一维是一随机变量。</p>
<p>显然想要从多元分布的联合概率分布中直接抽样是相当困难的。</p>
<p>先从任意一个初始状态 $ (x_1^{(0)}, \dots, x_n^{(0)}) $ 开始，每一维度单独采样，迭代多次。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for t = 1, 2, ..., T</span><br><span class="line">    for i = 1, 2, ..., n</span><br><span class="line">        if x_i is not an evident variable</span><br><span class="line">            sample x_i^&#123;(t)&#125; from P(x_i | (x_1^&#123;(t - 1)&#125;, ..., x_n^&#123;(t - 1)&#125;) \ x_i^&#123;(t - 1)&#125;)</span><br><span class="line">        else</span><br><span class="line">            x_i^&#123;(t)&#125; = x_i^&#123;(t - 1)&#125; (remain the evident value)</span><br><span class="line">    cnt[(x_1^&#123;(T)&#125;, ..., x_n^&#123;(T)&#125;)] += 1</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>CSP2019 游记</title>
    <url>/2025/07/27/CSP2019-you-ji/</url>
    <content><![CDATA[<span id="more"></span>  

<p>这是高中倒数第二年的机会，天已入秋，一片片枯黄的叶离开了它的大树，我的时间也不多了。<br>经过一年的磨练，总想着 Day1 AK。。。<br>时间一分一秒地流过，赶 T3 的手不停地抖动。。。<br>来不及了。<br>冷汗直逼颈部，耳中回荡着不停滞的时间滴答声和追求满分的欲望，眼前的屏幕字符变成一团团扭动的蛆虫。<br>我试图上厕所冷静一下，可是小脑发晕，跌倒在路障上，精神如同粉尘一般湮没在空气中。<br>啊啊啊，这便是我的绝望啊！<br>冥冥中仿佛回到了机位前，不知谁的声音在呼唤。<br>“就这样放弃吗？”<br>“不。我还要写题。”<br>“那再给你最后一次机会吧。”<br>待我醒转过来，已经过了 5 分钟。<br>知道比赛结束，我最后一题一分未得，第二题还面临被卡常的风险。<br>真是不长记性啊。。。<br>时至今日，我经常在梦中看到自己FST，猛然惊醒，然而天未亮。<br>能够在黑暗中给予我安慰的，恐怕只有我自己了吧。<br><img src="/2025/07/27/CSP2019-you-ji/%5C1.png" alt="photo">  </p>
]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title>【CodeChef】Count on a Treap</title>
    <url>/2025/07/27/CodeChef-Count-on-a-Treap/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.codechef.com/problems/COT5">【CodeChef】Count on a Treap</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>将元素按权值排序，再按键值建笛卡尔树，得到的树就是原 $ Treap $ 。<br>树上两个点的距离等于两个点的深度之和减去它们 $ LCA $ 深度的两倍。<br>考虑如何计算两个点的 $ LCA $。根据笛卡尔树的性质，任意点对 $ x, y (x \leq y) $ 的 $ LCA $ 为序列 $ [x, y] $ 中的键值最大值所在点的编号。<br>考虑如何计算一个点的深度。一个点的深度等于从他开始的前缀&#x2F;后缀键值最大值个数，可以用线段树维护（update 时间复杂度会因在线段树中二分查找前缀&#x2F;后缀键值最大值个数而多一个 $ \log $ ）。<br>时间复杂度为 $ O(n \log^2 n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">400010</span>;</span><br><span class="line"><span class="type">int</span> n, lca; ll value;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>, rt = <span class="number">0</span>, lf[N * <span class="number">2</span>], rf[N * <span class="number">2</span>], lx[N * <span class="number">2</span>], rx[N * <span class="number">2</span>];</span><br><span class="line">ll mx[N * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Opt</span> &#123; <span class="type">int</span> opt; ll x, y; &#125;; Opt q[N];</span><br><span class="line">ll p[N]; <span class="type">int</span> lp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Max</span><span class="params">(<span class="type">const</span> ll &amp;x, <span class="type">const</span> ll &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	u = ++tot; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">build</span>(lf[u], l, mid), <span class="built_in">build</span>(rf[u], mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">glx</span><span class="params">(<span class="type">int</span> u, ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!lf[u]) <span class="keyword">return</span> x &lt; mx[u];</span><br><span class="line">	<span class="keyword">return</span> x &lt; mx[rf[u]] ? (lx[u] + <span class="built_in">glx</span>(rf[u], x)) : <span class="built_in">glx</span>(lf[u], x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">grx</span><span class="params">(<span class="type">int</span> u, ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!lf[u]) <span class="keyword">return</span> x &lt; mx[u];</span><br><span class="line">	<span class="keyword">return</span> x &lt; mx[lf[u]] ? (rx[u] + <span class="built_in">grx</span>(lf[u], x)) : <span class="built_in">grx</span>(rf[u], x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	mx[u] = <span class="built_in">Max</span>(mx[lf[u]], mx[rf[u]]);</span><br><span class="line">	lx[u] = <span class="built_in">glx</span>(lf[u], mx[rf[u]]), rx[u] = <span class="built_in">grx</span>(rf[u], mx[lf[u]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, ll w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123; mx[u] = w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	x &lt;= mid ? <span class="built_in">mdy</span>(lf[u], l, mid, x, w) : <span class="built_in">mdy</span>(rf[u], mid + <span class="number">1</span>, r, x, w);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gmx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(L == l &amp;&amp; r == R) &#123;</span><br><span class="line">		<span class="keyword">if</span>(mx[u] &lt; value) <span class="keyword">return</span> ;</span><br><span class="line">		value = mx[u]; <span class="keyword">if</span>(l &gt;= r) &#123; lca = l; <span class="keyword">return</span> ; &#125;</span><br><span class="line">		<span class="built_in">gmx</span>(lf[u], l, mid, L, mid), <span class="built_in">gmx</span>(rf[u], mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, R);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(R &lt;= mid) <span class="built_in">gmx</span>(lf[u], l, mid, L, R);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(L &gt; mid) <span class="built_in">gmx</span>(rf[u], mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">gmx</span>(lf[u], l, mid, L, mid), <span class="built_in">gmx</span>(rf[u], mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">asklx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &gt;= r) &#123;</span><br><span class="line">		ss = <span class="built_in">glx</span>(u, value); value = <span class="built_in">Max</span>(value, mx[u]); <span class="keyword">return</span> ss;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(mid &lt; x) ss += <span class="built_in">asklx</span>(rf[u], mid + <span class="number">1</span>, r, x);</span><br><span class="line">	ss += <span class="built_in">asklx</span>(lf[u], l, mid, x); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">askrx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= l) &#123;</span><br><span class="line">		ss = <span class="built_in">grx</span>(u, value); value = <span class="built_in">Max</span>(value, mx[u]); <span class="keyword">return</span> ss;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(mid &gt;= x) ss += <span class="built_in">askrx</span>(lf[u], l, mid, x);</span><br><span class="line">	ss += <span class="built_in">askrx</span>(rf[u], mid + <span class="number">1</span>, r, x); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dep</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">-1</span>;</span><br><span class="line">	value = <span class="number">0</span>, ss += <span class="built_in">asklx</span>(rt, <span class="number">1</span>, lp, x);</span><br><span class="line">	value = <span class="number">0</span>, ss += <span class="built_in">askrx</span>(rt, <span class="number">1</span>, lp, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	value = <span class="number">0</span>; <span class="keyword">if</span>(x &gt; y) <span class="built_in">swap</span>(x, y); <span class="built_in">gmx</span>(rt, <span class="number">1</span>, lp, x, y); <span class="keyword">return</span> lca;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dis</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">dep</span>(x) + <span class="built_in">dep</span>(y) - <span class="number">2</span> * <span class="built_in">dep</span>(<span class="built_in">LCA</span>(x, y)); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;q[i].opt, &amp;q[i].x);</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt ^ <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;q[i].y);</span><br><span class="line">		<span class="keyword">if</span>(!q[i].opt) p[++lp] = q[i].x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>), lp = <span class="built_in">unique</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>) - p - <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(rt, <span class="number">1</span>, lp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		q[i].x = <span class="built_in">lower_bound</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>, q[i].x) - p;</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">0</span>) <span class="built_in">mdy</span>(rt, <span class="number">1</span>, lp, q[i].x, q[i].y);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) <span class="built_in">mdy</span>(rt, <span class="number">1</span>, lp, q[i].x, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			q[i].y = <span class="built_in">lower_bound</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>, q[i].y) - p;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">dis</span>(q[i].x, q[i].y));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>笛卡尔树</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 1109F】 Sasha and Algorithm of Silence&#39;s Sounds</title>
    <url>/2025/07/27/Codeforces-1109F-Sasha-and-Algorithm-of-Silence&#39;s-Sounds/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://codeforces.com/problemset/problem/1109/F">【Codeforces 1109F】 Sasha and Algorithm of Silence’s Sounds</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>当区间 $ [l, r] $ 中不存在环且点数与边数之差为 $ 1 $ 时是一棵树。当 $ r $ 增加时， $ l $ 也会增加，所以只要维护两个端点。<br>对于环的部分，可以用 $ LCT $ 快速维护（ $ findroot $ 后要 $ splay $ 一下，否则会 $ T $）。<br>对于维护点数与边数之差，可以用线段树维护针对当前询问左端点为某个位置时点数与边数之差， $ r $ 增加时直接继承上一个 $ r $ 。若新加的点 $ r $ ，则线段树区间 $ [l, r] $ 的权值加一；若新加的点 $ r $ 对 $ k \in [l, r] $ 有边，则线段树区间 $ [l, k] $ 的权值减一。然后数线段树中权值为 $ 1 $ 的位置的个数即可。<br>复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc ch[0][u]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc ch[1][u]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N= <span class="number">1010</span>, M = <span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> n, m, lb = <span class="number">1</span>, rb = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> a[N][N], idx[M], idy[M];</span><br><span class="line"><span class="type">int</span> fa[M], ch[<span class="number">2</span>][M], sta[M], top; <span class="type">bool</span> rv[M];</span><br><span class="line"><span class="type">int</span> tr[M * <span class="number">4</span>], sum[M * <span class="number">4</span>], lz[M * <span class="number">4</span>], fst, snd;</span><br><span class="line">ll ans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">nroot</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="keyword">return</span> ch[<span class="number">0</span>][fa[u]] == u || ch[<span class="number">1</span>][fa[u]] == u; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Rev</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; rv[u] ^= <span class="number">1</span>, <span class="built_in">swap</span>(lc, rc); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="keyword">if</span>(rv[u]) <span class="built_in">Rev</span>(lc), <span class="built_in">Rev</span>(rc), rv[u] = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> y = fa[u], z = fa[y], k = ch[<span class="number">1</span>][y] == u, w = ch[k ^ <span class="number">1</span>][u];</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) ch[ch[<span class="number">1</span>][z] == y][z] = u; ch[k][y] = w, ch[k ^ <span class="number">1</span>][u] = y;</span><br><span class="line">	<span class="keyword">if</span>(w) fa[w] = y; fa[u] = z, fa[y] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> y = u, z; <span class="keyword">for</span>(sta[top = <span class="number">1</span>] = y; <span class="built_in">nroot</span>(y); sta[++top] = y = fa[y]);</span><br><span class="line">	<span class="keyword">for</span>(; top; <span class="built_in">pd</span>(sta[top--]));</span><br><span class="line">	<span class="keyword">for</span>(; <span class="built_in">nroot</span>(u); <span class="built_in">rotate</span>(u)) &#123;</span><br><span class="line">		y = fa[u], z = fa[y];</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) <span class="built_in">rotate</span>((ch[<span class="number">0</span>][y] == u) ^ (ch[<span class="number">0</span>][z] == y) ? u : y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">0</span>; u; u = fa[y = u]) <span class="built_in">splay</span>(u), rc = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="built_in">access</span>(u), <span class="built_in">splay</span>(u), <span class="built_in">Rev</span>(u); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="built_in">makeroot</span>(x), <span class="built_in">access</span>(y), <span class="built_in">splay</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">findroot</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">access</span>(u), <span class="built_in">splay</span>(u); <span class="keyword">for</span>(; lc; <span class="built_in">pd</span>(u), u = lc); <span class="built_in">splay</span>(u); <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">lnk</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="built_in">makeroot</span>(x), fa[x] = y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="built_in">split</span>(x, y), fa[x] = ch[<span class="number">0</span>][y] = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	sum[u] = <span class="number">0</span>, tr[u] = <span class="built_in">Min</span>(tr[u * <span class="number">2</span>], tr[u * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">if</span>(tr[u] == tr[u * <span class="number">2</span>]) sum[u] += sum[u * <span class="number">2</span>];</span><br><span class="line">	<span class="keyword">if</span>(tr[u] == tr[u * <span class="number">2</span> + <span class="number">1</span>]) sum[u] += sum[u * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!lz[u]) <span class="keyword">return</span> ;</span><br><span class="line">	lz[u * <span class="number">2</span>] += lz[u], lz[u * <span class="number">2</span> + <span class="number">1</span>] += lz[u];</span><br><span class="line">	tr[u * <span class="number">2</span>] += lz[u], tr[u * <span class="number">2</span> + <span class="number">1</span>] += lz[u];</span><br><span class="line">	lz[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	tr[u] = <span class="number">0</span>, sum[u] = r - l + <span class="number">1</span>; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(u * <span class="number">2</span>, l, mid), <span class="built_in">build</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123; tr[u] += w, lz[u] += w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= mid) <span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, L, R, w);</span><br><span class="line">	<span class="keyword">if</span>(R &gt; mid) <span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, w);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">		<span class="keyword">if</span>(fst &gt; tr[u]) fst = tr[u], snd = <span class="number">0</span>; <span class="keyword">if</span>(fst == tr[u]) snd += sum[u];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= mid) <span class="built_in">ask</span>(u * <span class="number">2</span>, l, mid, L, R);</span><br><span class="line">	<span class="keyword">if</span>(R &gt; mid) <span class="built_in">ask</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> tmp[<span class="number">5</span>]; <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x = idx[rb + <span class="number">1</span>] + dir[i][<span class="number">0</span>], y = idy[rb + <span class="number">1</span>] + dir[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span>(!x || !y || x &gt; n || y &gt; m || a[x][y] &lt; lb || a[x][y] &gt; rb)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		tmp[++len] = <span class="built_in">findroot</span>(a[x][y]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(tmp + <span class="number">1</span>, tmp + len + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) <span class="keyword">if</span>(tmp[i] == tmp[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]), idx[a[i][j]] = i, idy[a[i][j]] = j;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n * m), <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, n * m, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(; rb &lt; n * m;) &#123;</span><br><span class="line">		<span class="keyword">for</span>(; lb &lt; rb &amp;&amp; !<span class="built_in">check</span>(); ++lb) <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> x = idx[lb] + dir[i][<span class="number">0</span>], y = idy[lb] + dir[i][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span>(!x || !y || x &gt; n || y &gt; m || a[x][y] &lt; lb || a[x][y] &gt; rb)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">cut</span>(lb, a[x][y]);</span><br><span class="line">		&#125;</span><br><span class="line">		++rb, <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, n * m, lb, rb, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> x = idx[rb] + dir[i][<span class="number">0</span>], y = idy[rb] + dir[i][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span>(!x || !y || x &gt; n || y &gt; m || a[x][y] &lt; lb || a[x][y] &gt; rb)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">lnk</span>(rb, a[x][y]), <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, n * m, lb, a[x][y], <span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		fst = M, snd = <span class="number">0</span>, <span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n * m, lb, rb); <span class="keyword">if</span>(fst == <span class="number">1</span>) ans += snd;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%I64d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 923E】Perpetual Subtraction</title>
    <url>/2025/07/27/Codeforces-923E-Perpetual-Subtraction/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://codeforces.com/problemset/problem/923/E">【Codeforces 923E】Perpetual Subtraction</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>设当前取到 $ i \in [0, n] $ 的概率生成函数为 $ f(x) $ ， 下一步后为 $ F(x) $ ，则：<br>$$ F(x) &#x3D; \sum_{ i &#x3D; 0 }^{ n }{ x^i \sum_{ j &#x3D; 0 }^{ n }{ \frac{ [x^j] f(x) }{ j + 1 } } } $$<br>$$ &#x3D; \sum_{ j &#x3D; 0 }^{ n }{ \frac{ [x^j] f(x) }{ j + 1 } \frac{ x^{ j + 1 } - 1 }{ x - 1 } } $$<br>$$ &#x3D; \frac{ 1 }{ x-1 } { \sum_{ j &#x3D; 0 }^{ n } [x^j] f(x) \int_{ 1 }^{ x } t^j { \rm d } t } $$<br>$$ &#x3D; \frac{ \int_{ 1 }^{ x } f(t) { \rm d } t }{ x - 1 } $$<br>令 $ g(x) &#x3D; f(x + 1) $ ，则：<br>$$ G(x) &#x3D; F(x + 1) &#x3D; \frac{ \int_{ 0 }^{ x } g(t) { \rm d } t }{ x } $$<br>$$ [x^i] G(x) &#x3D; \frac{ [x^i] g(x) }{ i + 1 } $$<br>$ m $ 次操作后 $ [x^i] G(x) &#x3D; \frac{ [x^i] g(x) }{ (i + 1)^m } $<br>已知 $ [x^i] f(x) $ 求 $ [x^i] g(x) $ ：<br>$$ \sum_{ i &#x3D; 0 }^{ n }{ g_i x^i } &#x3D; \sum_{ i &#x3D; 0 }^{ n }{ f_j (x + 1)^j } &#x3D; \sum_{ j &#x3D; 0 }^{ n }{ f_j \sum_{ i &#x3D; 0 }{ j }{ C(j, i) x^i } } $$<br>$$ g_i &#x3D; \sum_{ j &#x3D; i }^{ n }{ C(j, i)f_j } $$<br>$$ i! g_i &#x3D; \sum_{ j &#x3D; i }^{ n }{ \frac{ j! f_j }{ (j - i)! } } $$<br>已知 $ [x^i] g(x) $ 求 $ [x^i] f(x) $ ：<br>$$ i! f_i &#x3D; \sum_{ j&#x3D;1 }^{ n }{ \frac{ j! f_j }{ (-1)^{ j - i }( j - i )! } } $$<br>$ NTT $ 卷积即可。时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>, N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span>(<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, ll y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y /= <span class="number">2</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y % <span class="number">2</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; lmt; j += mid &lt;&lt; <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> inv = <span class="built_in">ksm</span>(lmt), i = <span class="number">0</span>; i &lt; lmt; i++)</span><br><span class="line">				A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n; ll m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f, g;</span><br><span class="line"><span class="type">int</span> fa[N], fb[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%I64d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	fa[<span class="number">0</span>] = fa[<span class="number">1</span>] = fb[<span class="number">0</span>] = fb[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fa[i] = <span class="built_in">mul</span>(fa[i - <span class="number">1</span>], i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fb[i] = <span class="built_in">mul</span>(mod - mod / i, fb[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fb[i] = <span class="built_in">mul</span>(fb[i - <span class="number">1</span>], fb[i]);</span><br><span class="line">	f.<span class="built_in">resize</span>(n + <span class="number">1</span>), g.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;f[n - i]), f[n - i] = <span class="built_in">mul</span>(f[n - i], fa[i]), g[i] = fb[i];</span><br><span class="line">	g = Poly::<span class="built_in">Mul</span>(f, g), g.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) g[n - i] = <span class="built_in">mul</span>(g[n - i], <span class="built_in">ksm</span>(<span class="built_in">ksm</span>(i + <span class="number">1</span>, m)));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) f[i] = (i &amp; <span class="number">1</span>) ? (mod - fb[i]) : fb[i];</span><br><span class="line">	f = Poly::<span class="built_in">Mul</span>(f, g);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">mul</span>(f[n - i], fb[i]));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
        <tag>积分</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 908H】 New year and Boolean Bridges</title>
    <url>/2025/07/27/Codeforces-908H-New-year-and-Boolean-Bridges/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://codeforces.com/problemset/problem/908/H">【Codeforces 908H】 New year and Boolean Bridges</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>发现 $ f(u, v)<del>OR</del>f(v, u) $ 满足当且仅当 $ f(u, v)<del>AND</del>f(v, u) $ 和  $ f(u, v)<del>XOR</del>f(v, u) $ 满足，故 $ f(u, v)<del>OR</del>f(v, u) $ 不予考虑。<br>若 $ f(u, v)<del>AND</del>f(v, u) $ 满足，则 $ u, v $ 在同一联通块；若 $ f(u, v)<del>XOR</del>f(v, u) $ 满足，则 $ u, v $ 不在同一联通块，所以可能产生矛盾，需要判无解。<br>最后的图一定是个弱连通块，即至少有 $ n - 1 $ 条边，由于一个大小为 $ 1 $ 的独立点对答案贡献为 $ 1 $ ，所以我们要最小化大小 $ \geq 2 $ 的连通块数目，而这样的连通块数目最多有 $ m &#x3D; \lfloor \frac{ n }{ 2 } \rfloor &#x3D; 23 $ 个。<br>考虑状压。令 $ fb[i] $ 表示 $ i $ 号点不能与那些点作为一个强连通块， $ le[i] $ 表示选择状态为 $ i $ 的点作为一个强联通块的合法性，可以通过 $ lowbit $ 从 $ fb[i] $ 推出 $ le[i] $ 。<br>每新加入一条边，弱连通块合法性满足 $ F[i] &#x3D; \sum_{ j | k &#x3D; i }{ F’[j] \times le[k] } $ ， $ F’[j] $ 表示上一次操作的 $ F[j] $ 。<br>这样可以 $ FWT $ 优化，最多进行 $ m $ 次，时间复杂度 $ O(m^2 2^{m}) $ ，并不能过去。<br>考虑我们 $ FWT $ 后不需要 $ IFWT $ 回去，每次求单点系数。 $ FWT $ 的过程可以理解为一个行向量右乘一个矩阵得到新的行向量，这个矩阵就是我们想要的系数，可以证明：  </p>
<blockquote>
<p>mu[x][y] &#x3D; (x &amp; y) !&#x3D; x ? 0 : ksm(-1, popcount(ksm(x, y));  </p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50</span>, M = <span class="number">10000000</span>;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">int</span> n, f[N], ans;</span><br><span class="line"><span class="type">int</span> sz[N], id[N], lg[M], len, cnt = <span class="number">0</span>, fb[N], le[M];</span><br><span class="line"><span class="type">int</span> nw[M], mu[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span>(<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">find</span>(f[x]); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fwt</span><span class="params">(<span class="type">int</span> *A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; lmt; j += mid &lt;&lt; <span class="number">1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(opt == <span class="number">1</span>) A[j + mid + k] = <span class="built_in">add</span>(A[j + mid + k], A[j + k]);</span><br><span class="line">				<span class="keyword">else</span> A[j + mid + k] = <span class="built_in">sub</span>(A[j + mid + k], A[j + k]);</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i] + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;A&#x27;</span>) f[<span class="built_in">find</span>(i)] = <span class="built_in">find</span>(j);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">			<span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;X&#x27;</span> &amp;&amp; <span class="built_in">find</span>(i) == <span class="built_in">find</span>(j)) &#123; <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	ans = n - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ++sz[<span class="built_in">find</span>(i)];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">find</span>(i) == i &amp;&amp; sz[i] &gt; <span class="number">1</span>) id[i] = cnt, lg[<span class="number">1</span> &lt;&lt; cnt] = cnt, ++cnt;</span><br><span class="line">	<span class="keyword">if</span>(!cnt) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	len = (<span class="number">1</span> &lt;&lt; cnt);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(g[i][j] != <span class="string">&#x27;X&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(sz[<span class="built_in">find</span>(i)] &gt; <span class="number">1</span> &amp;&amp; sz[<span class="built_in">find</span>(j)] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">				fb[id[<span class="built_in">find</span>(i)]] |= (<span class="number">1</span> &lt;&lt; id[<span class="built_in">find</span>(j)]);</span><br><span class="line">				fb[id[<span class="built_in">find</span>(j)]] |= (<span class="number">1</span> &lt;&lt; id[<span class="built_in">find</span>(i)]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	le[<span class="number">0</span>] = <span class="number">1</span>; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) le[<span class="number">1</span> &lt;&lt; i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(le[i]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="type">int</span> x = lg[i &amp; -i], y = i - (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">		<span class="keyword">if</span>(le[y] &amp;&amp; (fb[x] &amp; y) == <span class="number">0</span>) le[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fwt</span>(le, len, <span class="number">1</span>);</span><br><span class="line">	mu[<span class="number">0</span>] = (cnt &amp; <span class="number">1</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) mu[i] = <span class="built_in">sub</span>(<span class="number">0</span>, mu[i ^ (i &amp; -i)]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) nw[i] = le[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;; i++) &#123;</span><br><span class="line">		<span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) z = <span class="built_in">add</span>(z, <span class="built_in">mul</span>(mu[j], nw[j]));</span><br><span class="line">		<span class="keyword">if</span>(z) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans + i); <span class="keyword">break</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) nw[j] = <span class="built_in">mul</span>(nw[j], le[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FWT</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces809E】Surprise me</title>
    <url>/2025/07/27/Codeforces-809E-Surprise-me/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://codeforces.com/problemset/problem/809/E">【Codeforces809E】Surprise me</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>已知 $ \phi(xy) &#x3D; \frac{ \phi(x) \phi(y) \gcd(x, y) }{ \phi(gcd(x, y)) } $<br>代入并莫比乌斯反演得：<br>$$ n(n - 1) Ans &#x3D; \sum_{ T &#x3D; 1 }^{ n } \sum_{ d | T } \frac{ d \mu(\frac{ T }{ d }) }{ \phi(d) } \sum_{ d | a_i } \sum_{ d | a_j } \phi(a_i) \phi(a_j) dist(i, j) $$<br>发现 $ \sum_{ T &#x3D; 1 }^{ n } \sum_{ d | T } \frac{ d \mu(\frac{ T }{ d }) }{ \phi(d) } $ 可以调和级数， $ \sum_{ d | a_i } \sum_{ d | a_j } \phi(a_i) \phi(a_j) dist(i, j) $ 建的虚树点数总数也是调和级数。<br>可以用 RMQ_LCA 实现复杂度 $ O(n \log n) $ 。<br><del>作为一个懒汉我写树剖LCA。</del>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], id[N], inv[N], ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> p[N], mu[N], phi[N], lp; <span class="type">bool</span> pri[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], E[N];</span><br><span class="line"><span class="type">int</span> fa[N], sz[N], son[N], dep[N], top[N], dfn[N], idx = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> s[N], f[N], g[N], ss[N];</span><br><span class="line"><span class="type">int</span> pp[N], len, sta[N], Top = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> flag[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> dfn[x] &lt; dfn[y]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>, phi[<span class="number">1</span>] = mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) inv[i] = <span class="built_in">mul</span>(mod - mod / i, inv[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!pri[i]) p[++lp] = i, mu[i] = mod - <span class="number">1</span>, phi[i] = i - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; p[j] * i &lt;= n; j++) &#123;</span><br><span class="line">			pri[p[j] * i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i % p[j] == <span class="number">0</span>) &#123; phi[p[j] * i] = phi[i] * p[j]; <span class="keyword">break</span>; &#125;</span><br><span class="line">			mu[p[j] * i] = <span class="built_in">sub</span>(<span class="number">0</span>, mu[i]);</span><br><span class="line">			phi[p[j] * i] = phi[i] * (p[j] - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt;= n; j += i)</span><br><span class="line">		s[j] = <span class="built_in">add</span>(s[j], <span class="built_in">mul</span>(<span class="built_in">mul</span>(i, mu[j / i]), inv[phi[i]]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	fa[u] = ff, dep[u] = dep[ff] + <span class="number">1</span>, sz[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v ^ ff) &#123;</span><br><span class="line">		<span class="built_in">dfs1</span>(v, u), sz[u] += sz[v]; <span class="keyword">if</span>(sz[son[u]] &lt; sz[v]) son[u] = v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> tp)</span> </span>&#123;</span><br><span class="line">	top[u] = tp, dfn[u] = ++idx; <span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u], tp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(!top[v]) <span class="built_in">dfs2</span>(v, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(; top[x] != top[y]; x = fa[top[x]])</span><br><span class="line">		<span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">	<span class="keyword">return</span> dep[x] &lt; dep[y] ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> lca = <span class="built_in">LCA</span>(x, sta[Top]);</span><br><span class="line">	<span class="keyword">if</span>(Top == <span class="number">1</span> || lca == sta[Top]) &#123; sta[++Top] = x; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="keyword">for</span>(; Top &gt; <span class="number">1</span> &amp;&amp; dfn[sta[Top - <span class="number">1</span>]] &gt;= dfn[lca]; --Top)</span><br><span class="line">		E[sta[Top - <span class="number">1</span>]].<span class="built_in">pb</span>(sta[Top]);</span><br><span class="line">	<span class="keyword">if</span>(lca != sta[Top]) E[lca].<span class="built_in">pb</span>(sta[Top]), sta[Top] = lca;</span><br><span class="line">	sta[++Top] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	ss[u] = flag[u] * phi[a[u]], f[u] = g[u] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : E[u]) &#123;</span><br><span class="line">		<span class="built_in">dp</span>(v); <span class="type">int</span> w = dep[v] - dep[u];</span><br><span class="line">		g[u] = <span class="built_in">add</span>(g[v], <span class="built_in">add</span>(<span class="built_in">add</span>(g[u], <span class="built_in">mul</span>(ss[v], <span class="built_in">add</span>(<span class="built_in">mul</span>(w, ss[u]), f[u]))), <span class="built_in">mul</span>(ss[u], f[v])));</span><br><span class="line">		ss[u] = <span class="built_in">add</span>(ss[u], ss[v]), f[u] = <span class="built_in">add</span>(f[u], <span class="built_in">add</span>(f[v], <span class="built_in">mul</span>(ss[v], w)));</span><br><span class="line">	&#125;</span><br><span class="line">	E[u].<span class="built_in">clear</span>(), flag[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	len = <span class="number">0</span>; <span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= n; i += x) pp[++len] = id[i];</span><br><span class="line">	<span class="built_in">sort</span>(pp + <span class="number">1</span>, pp + len + <span class="number">1</span>, cmp), sta[Top = <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">		flag[pp[i]] = <span class="number">1</span>; <span class="keyword">if</span>(pp[i] != <span class="number">1</span>) <span class="built_in">insert</span>(pp[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(; Top &gt; <span class="number">1</span>; --Top) E[sta[Top - <span class="number">1</span>]].<span class="built_in">pb</span>(sta[Top]);</span><br><span class="line">	<span class="built_in">dp</span>(<span class="number">1</span>); <span class="keyword">return</span> g[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), <span class="built_in">Sieve</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), id[a[i]] = i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(<span class="built_in">calc</span>(i), s[i]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">mul</span>(<span class="built_in">add</span>(ans, ans), <span class="built_in">mul</span>(inv[n], inv[n - <span class="number">1</span>])));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>虚树</tag>
        <tag>DP</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces水题选做</title>
    <url>/2025/07/27/Codeforces-shui-ti-xuan-zuo/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />
    <label for="pass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>CF</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces1187F】Expected Square Beauty</title>
    <url>/2025/07/27/Codeforces1187F-Expected-Square-Beauty/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h3><p><a href="https://codeforces.com/contest/1187/problem/F">【Codeforces1187F】Expected Square Beauty</a>  </p>
<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>有一个长度为 $ n $ 的数列，第 $ i $ 个数的取值范围为 $ [l_i, r_i] $ ，定义一个数列的价值为这个数列极长连续相同段的个数，求一个数列价值的平方期望，对 $ 10^9 + 7 $ 取模 。<br>$ n \leq 200000 $ 。  </p>
<h3 id="做法："><a href="#做法：" class="headerlink" title="做法："></a>做法：</h3><p>定义 $ F(x) $ 为数列的价值， $ I_i(x) $ 为数列中第 $ i $ 项与第 $ i - 1 $ 项是否不同 $ (I_i(x) &#x3D; [x_i \neq x_{i - 1}]) $ ，则有 $ F(x) &#x3D; \sum_{i &#x3D; 1}^{n} I_i(x) $ 。<br>$$ E(B(x)^2) &#x3D; E(\sum_{i &#x3D; 1}^{n}I_i(x)\sum_{j &#x3D; 1}^{n}I_j(x))\ &#x3D; E(\sum_{i &#x3D; 1}^{n}\sum_{j &#x3D; 1}^{n}I_i(x)I_j(x))\ &#x3D; \sum_{i &#x3D; 1}^{n}\sum_{j &#x3D; 1}^{n}E(I_i(x)I_j(x)) $$<br>考虑计算 $ E(I_i(x)I_j(x)) $ ，分三种情况考虑。<br>当 $ i &#x3D; j $ 时， $ E(I_i(x)I_j(x)) &#x3D; E(I_i(x)) $ 。<br>当 $ | i - j | &gt; 1 $ 时， $ I_i(x), I_j(x) $ 互不影响， $ E(I_i(x)I_j(x)) &#x3D; E(I_i(x))E(I_j(x)) $ 。<br>当 $ | i - j | &#x3D; 1 $ 时，仅考虑 $ j &#x3D; i + 1 $ 的贡献（ $ i &#x3D; j + 1 $ 同理）。$ E(I_i(x)I_j(x)) &#x3D; P(x_{i - 1} \neq x_i &amp;&amp; x_i \neq x_{i + 1}) $ 。考虑容斥， $ E(I_i(x)I_j(x)) &#x3D; 1 - p_i - p_{i + 1} + P(x_{i - 1} &#x3D; x_i &amp;&amp; x_i &#x3D; x_{i + 1}) $ ，就可以计算了。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, l[N], r[N], inv[N], ans;</span><br><span class="line"><span class="type">int</span> e[N], pre[N], suf[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> w = <span class="built_in">min</span>(<span class="built_in">min</span>(r[y], r[x]), r[z]) - <span class="built_in">max</span>(<span class="built_in">max</span>(l[y], l[x]), l[z]) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(w &lt; <span class="number">0</span>) w = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> val = <span class="built_in">mul</span>(<span class="built_in">mul</span>(inv[x], inv[y]), inv[z]); <span class="keyword">return</span> <span class="built_in">mul</span>(w, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;l[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;r[i]);</span><br><span class="line">	e[<span class="number">1</span>] = <span class="number">1</span>, inv[<span class="number">1</span>] = <span class="built_in">ksm</span>(r[<span class="number">1</span>] - l[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		inv[i] = <span class="built_in">ksm</span>(r[i] - l[i] + <span class="number">1</span>);</span><br><span class="line">		e[i] = <span class="built_in">min</span>(r[i], r[i - <span class="number">1</span>]) - <span class="built_in">max</span>(l[i], l[i - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(e[i] &lt; <span class="number">0</span>) e[i] = <span class="number">0</span>;</span><br><span class="line">		e[i] = <span class="built_in">mul</span>(e[i], <span class="built_in">mul</span>(inv[i - <span class="number">1</span>], inv[i])), e[i] = <span class="built_in">sub</span>(<span class="number">1</span>, e[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pre[i] = <span class="built_in">add</span>(pre[i - <span class="number">1</span>], e[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) suf[i] = <span class="built_in">add</span>(suf[i + <span class="number">1</span>], e[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(i &lt; n) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(e[i], suf[i + <span class="number">2</span>]));</span><br><span class="line">		<span class="keyword">if</span>(i &gt; <span class="number">1</span>) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(e[i], pre[i - <span class="number">2</span>]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = <span class="built_in">add</span>(ans, e[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> sum = <span class="built_in">sub</span>(<span class="number">1</span>, <span class="built_in">add</span>(<span class="built_in">sub</span>(<span class="number">1</span>, e[i + <span class="number">1</span>]), <span class="built_in">sub</span>(<span class="number">1</span>, e[i])));</span><br><span class="line">		sum = <span class="built_in">add</span>(sum, <span class="built_in">calc</span>(i - <span class="number">1</span>, i, i + <span class="number">1</span>));</span><br><span class="line">		ans = <span class="built_in">add</span>(ans, <span class="built_in">add</span>(sum, sum));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title>「HNOI2017」单旋</title>
    <url>/2025/07/27/HNOI2017-dan-xuan/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2018">「HNOI2017」单旋</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>对于 $ splay $ 操作，模拟发现整棵树的形态不变且深度加一（除了 $ splay $ 的节点的子树深度不变）， $ splay $ 的点深度变为 $ 1 $ 。<br>用线段树维护每个权值深度。<br>对于操作 $ 1 $ ，用 $ set $ 维护已经存在的节点，新插入的节点父亲一定为它前驱、后继中的一个。<br>对于操作 $ 2, 3, 4, 5 $ ，模拟 $ splay $ 第一次和最后一次旋转子树操作，用线段树维护深度即可。<br>时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> m, p[N], lp;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Q</span> &#123; <span class="type">int</span> opt, x; &#125;; Q q[N];</span><br><span class="line"><span class="type">int</span> tr[N * <span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> rt, fa[N], ch[<span class="number">2</span>][N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(), pre = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; pre = c, c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = x * <span class="number">10ll</span> + (c ^ <span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(pre == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u]) tr[u * <span class="number">2</span>] += tr[u], tr[u * <span class="number">2</span> + <span class="number">1</span>] += tr[u], tr[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123; tr[u] = w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	x &lt;= mid ? <span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, x, w) : <span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, x, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123; tr[u] += w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= mid) <span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, L, R, w);</span><br><span class="line">	<span class="keyword">if</span>(R &gt; mid) <span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> tr[u];</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">return</span> x &lt;= mid ? <span class="built_in">qry</span>(u * <span class="number">2</span>, l, mid, x) : <span class="built_in">qry</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt;::iterator it = s.<span class="built_in">insert</span>(x).fst;</span><br><span class="line">	<span class="keyword">if</span>(!rt) &#123; rt = x, <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x, <span class="number">1</span>); <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="keyword">if</span>(it != s.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">		--it; <span class="keyword">if</span>(!ch[<span class="number">1</span>][*it]) ch[<span class="number">1</span>][*it] = x, fa[x] = *it; ++it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!fa[x]) ++it, ch[<span class="number">0</span>][*it] = x, fa[x] = *it;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, lp, fa[x]) + <span class="number">1</span>; <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x, dep); <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">splaymin</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x); <span class="keyword">if</span>(x == rt) <span class="keyword">return</span> dep;</span><br><span class="line">	<span class="keyword">if</span>(x + <span class="number">1</span> &lt;= fa[x] - <span class="number">1</span>) <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x + <span class="number">1</span>, fa[x] - <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">	++tr[<span class="number">1</span>], <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x, <span class="number">1</span>);</span><br><span class="line">	ch[<span class="number">0</span>][fa[x]] = ch[<span class="number">1</span>][x], fa[ch[<span class="number">1</span>][x]] = fa[x];</span><br><span class="line">	fa[rt] = x, fa[x] = <span class="number">0</span>, ch[<span class="number">1</span>][x] = rt, rt = x; <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">splaymax</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x); <span class="keyword">if</span>(x == rt) <span class="keyword">return</span> dep;</span><br><span class="line">	<span class="keyword">if</span>(x - <span class="number">1</span> &gt;= fa[x] + <span class="number">1</span>) <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, fa[x] + <span class="number">1</span>, x - <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">	++tr[<span class="number">1</span>], <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, lp, x, <span class="number">1</span>);</span><br><span class="line">	ch[<span class="number">1</span>][fa[x]] = ch[<span class="number">0</span>][x], fa[ch[<span class="number">0</span>][x]] = fa[x];</span><br><span class="line">	fa[rt] = x, fa[x] = <span class="number">0</span>, ch[<span class="number">0</span>][x] = rt, rt = x; <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erasemin</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">splaymin</span>(x); --tr[<span class="number">1</span>];</span><br><span class="line">	rt = ch[<span class="number">1</span>][x], fa[rt] = <span class="number">0</span>, ch[<span class="number">1</span>][x] = <span class="number">0</span>, s.<span class="built_in">erase</span>(x); <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erasemax</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> dep = <span class="built_in">splaymax</span>(x); --tr[<span class="number">1</span>];</span><br><span class="line">	rt = ch[<span class="number">0</span>][x], fa[rt] = <span class="number">0</span>, ch[<span class="number">0</span>][x] = <span class="number">0</span>, s.<span class="built_in">erase</span>(x); <span class="keyword">return</span> dep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(m);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123; <span class="built_in">gi</span>(q[i].opt); <span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) <span class="built_in">gi</span>(q[i].x), p[++lp] = q[i].x; &#125;</span><br><span class="line">	<span class="built_in">sort</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>), lp = <span class="built_in">unique</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>) - p - <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m)</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) q[i].x = <span class="built_in">lower_bound</span>(p + <span class="number">1</span>, p + lp + <span class="number">1</span>, q[i].x) - p;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">insert</span>(q[i].x));</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">splaymin</span>(*s.<span class="built_in">begin</span>()));</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">splaymax</span>(*(--s.<span class="built_in">end</span>())));</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">erasemin</span>(*s.<span class="built_in">begin</span>()));</span><br><span class="line">		<span class="keyword">if</span>(q[i].opt == <span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">erasemax</span>(*(--s.<span class="built_in">end</span>())));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>「JLOI2015」有意义的字符串</title>
    <url>/2025/07/27/JLOI2015-you-yi-yi-de-zi-fu-chuan/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2106">「JLOI2015」有意义的字符串</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$ \frac{b + \sqrt{d}}{2} $ 和 $ \frac{b - \sqrt{d}}{2} $ 是二元一次方程 $ x^2 - bx + \frac{b^2 - d}{4} &#x3D; 0 $ 的解。<br>则 $ x^2 &#x3D; bx + \frac{d - b^2}{4} $ 。<br>两边同时乘 $ x^{n - 2} $ 得： $ x^n &#x3D; bx^{n - 1} + \frac{d - b^2}{4}x^{n - 2} $ 。<br>设 $ f[i] &#x3D; (\frac{b + \sqrt{d}}{2})^{i} + (\frac{b - \sqrt{d}}{2})^{i} $ ，则存在递推式 $ f[i] &#x3D; bf[i - 1] + \frac{d - b^2}{4}f[i - 2] $ 。其中 $ f[0] &#x3D; 2, f[1] &#x3D; b $ 。<br>这样就矩阵乘法得到 $ f[n] $ 。题目中有 $ b^2 \leq d &lt; (b + 1)^2 $ ，所以 $ \frac{b - \sqrt{d}}{2} \leq 0 $ 。特判 $ b^2 \neq d $ 且 $ n \mod 2 &#x3D; 0 $ 来判断是否减一。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">7528443412579576937ll</span>;</span><br><span class="line">ll b, d, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">add</span><span class="params">(<span class="type">const</span> ll &amp;x, <span class="type">const</span> ll &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (ull)x + (ull)y &lt; (ull)mod ? (ull)x + (ull)y : (ull)x + (ull)y - (ull)mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sub</span><span class="params">(<span class="type">const</span> ll &amp;x, <span class="type">const</span> ll &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (ull)x - (ull)y &lt; (ull)<span class="number">0</span> ? (ull)x - (ull)y + (ull)mod : (ull)x - (ull)y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">	ll ss = <span class="number">0</span>; <span class="keyword">for</span>(; y; y /= <span class="number">2</span>, x = <span class="built_in">add</span>(x, x)) <span class="keyword">if</span>(y % <span class="number">2</span>) ss = <span class="built_in">add</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mtrx</span> &#123;</span><br><span class="line">	ll a[<span class="number">2</span>][<span class="number">2</span>]; <span class="built_in">mtrx</span>() &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)); &#125;</span><br><span class="line">	<span class="keyword">inline</span> mtrx <span class="keyword">operator</span>*(<span class="type">const</span> mtrx &amp;yy)<span class="type">const</span> &#123;</span><br><span class="line">		mtrx res;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">					res.a[i][j] = <span class="built_in">add</span>(res.a[i][j], <span class="built_in">mul</span>(a[i][k], yy.a[k][j]));</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; mtrx sum, ba;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	ll ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y /= <span class="number">2</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y % <span class="number">2</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;b, &amp;d, &amp;n); ll flag = (n % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; b * b != d);</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">0</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, b + (ll)<span class="built_in">sqrt</span>(d)); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	sum.a[<span class="number">0</span>][<span class="number">0</span>] = b, sum.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">	ba.a[<span class="number">0</span>][<span class="number">0</span>] = b, ba.a[<span class="number">0</span>][<span class="number">1</span>] = (d - b * b) / <span class="number">4</span>, ba.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	n -= <span class="number">1</span>; <span class="keyword">if</span>(n &lt; <span class="number">0</span>) n = <span class="number">0</span>; mtrx tmp; tmp.a[<span class="number">0</span>][<span class="number">0</span>] = tmp.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(; n; n /= <span class="number">2</span>, ba = ba * ba) <span class="keyword">if</span>(n % <span class="number">2</span>) tmp = tmp * ba;</span><br><span class="line">	sum = tmp * sum;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">sub</span>(sum.a[<span class="number">0</span>][<span class="number">0</span>], flag));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>Image Quality Assessment</title>
    <url>/2025/07/27/IQA/</url>
    <content><![CDATA[<p>参考资料：</p>
<p><a href="https://zhuanlan.zhihu.com/p/210887209">图像质量评价（一）：IQA介绍</a></p>
<p><a href="https://github.com/chaofengc/Awesome-Image-Quality-Assessment">Awesome Image Quality Assessment (IQA)</a></p>
<p>DeepSeek</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>Image Quality Assessment (IQA)</strong>，即<strong>图像质量评估</strong>，是计算机视觉和图像处理领域的一个重要研究方向，旨在通过算法自动评估图像的质量，模拟人类视觉系统（HVS）对图像的主观感知。其核心任务是量化图像的失真程度或感知质量，广泛应用于图像压缩、传输、增强、修复等场景。</p>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="全参考-Full-Reference-FR-IQA"><a href="#全参考-Full-Reference-FR-IQA" class="headerlink" title="全参考 (Full-Reference, FR-IQA)"></a><strong>全参考 (Full-Reference, FR-IQA)</strong></h2><p>需要完整的原始无失真图像作为参考，通过对比失真图像与参考图像的差异来量化质量。</p>
<h3 id="典型方法"><a href="#典型方法" class="headerlink" title="典型方法"></a>典型方法</h3><h4 id="PSNR（峰值信噪比）"><a href="#PSNR（峰值信噪比）" class="headerlink" title="PSNR（峰值信噪比）"></a><strong>PSNR（峰值信噪比）</strong></h4><p>PSNR 基于<strong>均方误差（MSE, Mean Squared Error）<strong>计算，单位为</strong>分贝（dB）</strong>，值越大表示图像质量越好。<br>$$<br>PSNR &#x3D; 10 \cdot \log_{10} \left( \frac{MAX_I^2}{MSE} \right)<br>$$<br>$MAX_I$：图像像素的最大可能值（如8位图像为255）。</p>
<p>$MSE$：均方误差，计算两图像像素差的平方均值：<br>$$<br>MSE &#x3D; \frac{1}{MN} \sum_{i&#x3D;0}^{M - 1} \sum_{j&#x3D;0}^{N - 1} [I(i, j) - K(i, j)]^2<br>$$<br>$I$：原始图像。$K$：失真图像。</p>
<ul>
<li>优点：计算简单、物理意义明确、通用性强</li>
<li>局限性：对局部失真不敏感、依赖参考图像、对图像内容不敏感</li>
</ul>
<h4 id="SSIM（结构相似性）"><a href="#SSIM（结构相似性）" class="headerlink" title="SSIM（结构相似性）"></a><strong>SSIM（结构相似性）</strong></h4><p>SSIM 认为，人眼对图像的<strong>亮度（Luminance）</strong>、<strong>对比度（Contrast）</strong> 和 <strong>结构（Structure）</strong> 三个维度最为敏感，因此分别计算这三者的相似度，再综合得到最终评分：<br>$$<br>SSIM(x, y) &#x3D; [l(x, y)]^{\alpha}[c(x, y)]^{\beta}[s(x, y)]^{\gamma}<br>$$<br>$x$为参考图像，$y$为失真图像。</p>
<p>$l(x, y), c(x, y), s(x, y)$分别为亮度相似度、对比度相似度、结构相似度。</p>
<p>$\alpha, \beta, \gamma$通常设为1 。<br>$$<br>SSIM(x, y) &#x3D; \frac{(2 \mu_x \mu_y + C_1)(2 \sigma_{xy} + C_2)}{(\mu_x^2 + \mu_y^2 + C_1)(\sigma_x^2 + \sigma_y^2 + C_2)}<br>$$<br>$\mu_x, \mu_y$：图像的均值（亮度）。</p>
<p>$\sigma_x, \sigma_y$：图像标准差（对比度）。</p>
<p>$\sigma_{xy}$：协方差（结构相似性）。</p>
<p>$C_1, C_2$：防止分母为0的小常数。</p>
<ul>
<li>优点：更符合人眼感知、多维度评估、鲁棒性强</li>
<li>缺点：计算复杂度高、不适用于极端失真、依赖参考图像</li>
</ul>
<h4 id="MS-SSIM（多尺度SSIM）"><a href="#MS-SSIM（多尺度SSIM）" class="headerlink" title="MS-SSIM（多尺度SSIM）"></a><strong>MS-SSIM（多尺度SSIM）</strong></h4><p>在多分辨率下计算SSIM，更适合复杂失真。</p>
<h4 id="VIF（视觉信息保真度）"><a href="#VIF（视觉信息保真度）" class="headerlink" title="VIF（视觉信息保真度）"></a><strong>VIF（视觉信息保真度）</strong></h4><p>VIF 将图像视为信息源，将人类视觉系统视为通信信道，通过计算参考图像和失真图像通过HVS（人类视觉系统）信道后的**互信息（Mutual Information）**来评估质量。</p>
<ul>
<li>优点：符合人类感知、多尺度分析、信息论基础、对复杂失真敏感</li>
<li>缺点：计算复杂度高、依赖参数调优、对某些失真不敏感</li>
</ul>
<h2 id="部分参考-Reduced-Reference-RR-IQA"><a href="#部分参考-Reduced-Reference-RR-IQA" class="headerlink" title="部分参考 (Reduced-Reference, RR-IQA)"></a><strong>部分参考 (Reduced-Reference, RR-IQA)</strong></h2><p>仅需原始图像的部分特征（如统计特征、频域信息），而非完整图像。</p>
<h3 id="典型方法-1"><a href="#典型方法-1" class="headerlink" title="典型方法"></a><strong>典型方法</strong></h3><ul>
<li><strong>基于频域特征</strong>：如DCT系数、小波变换能量分布。</li>
<li><strong>基于自然场景统计 (NSS)</strong>：如提取原始图像的梯度分布、熵特征。</li>
</ul>
<h2 id="无参考-No-Reference-NR-IQA"><a href="#无参考-No-Reference-NR-IQA" class="headerlink" title="无参考 (No-Reference, NR-IQA)"></a><strong>无参考 (No-Reference, NR-IQA)</strong></h2><p>无需任何参考图像，直接评估失真图像的质量。</p>
<h3 id="典型方法-2"><a href="#典型方法-2" class="headerlink" title="典型方法"></a><strong>典型方法</strong></h3><ul>
<li><strong>传统方法</strong>：<ul>
<li><strong>BRISQUE</strong>：基于空间域自然场景统计。</li>
<li><strong>NIQE</strong>：利用多元高斯模型拟合图像特征。</li>
</ul>
</li>
<li><strong>深度学习方法</strong>：<ul>
<li><strong>CNN-based</strong>：如WaDIQaM、HyperIQA。</li>
<li><strong>Transformer-based</strong>：如TranSLA、ViTQA。</li>
</ul>
</li>
</ul>
<h1 id="Paper-reading"><a href="#Paper-reading" class="headerlink" title="Paper reading"></a>Paper reading</h1><div class="pdf-container">
  <iframe src="/pdfjs/web/viewer.html?file=/assets/IQA/papers.pdf" width="100%" height="800px"></iframe>
</div>]]></content>
  </entry>
  <entry>
    <title>「JOISC 2016 Day 3」电报</title>
    <url>/2025/07/27/JOISC-2016-Day-3-dian-bao/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2737">「JOISC 2016 Day 3」电报</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑形成环的条件是将若干环和基环內向树拆成若干条链，然后依次拼接成环（特判给出的图已经是完整一个环的情况）。<br>枚举每一个连通块。若该联通块是一个环，则断开代价最小的边；否则进行拓扑排序。<br>先考虑不在环上的部分。假如一个点他有若干入度，显然只有其中一个入度能够保留，贪心地保留代价最大的入度。如此化简后得到一个环（环上每个点可能有一条不在环上的链）。<br>然后在环上DP。由于环一定要断开，令 $ f[i][0&#x2F;1][0&#x2F;1] $ 表示环上第 $ i $ 个点，环有&#x2F;没有被断开过，这个点选择的是断开环上的边还是链上的边。<br>时间复杂度 $ O(n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, to[N], c[N], In[N], tmp[N], val[N]; ll ans, f[<span class="number">2</span>][<span class="number">2</span>][N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], a, cir, hv[N];</span><br><span class="line"><span class="type">bool</span> vis[N], used[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> u = <span class="number">1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123; <span class="keyword">if</span>(vis[u]) <span class="keyword">return</span> <span class="number">0</span>; vis[u] = <span class="number">1</span>, u = to[u]; &#125;</span><br><span class="line">	<span class="keyword">if</span>(u == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	vis[x] = <span class="number">1</span>, a.<span class="built_in">pb</span>(x); <span class="keyword">if</span>(!vis[to[x]]) <span class="built_in">Find</span>(to[x]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[x]) <span class="keyword">if</span>(!vis[v]) <span class="built_in">Find</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	a.<span class="built_in">clear</span>(), cir.<span class="built_in">clear</span>(), <span class="built_in">Find</span>(x); <span class="type">int</span> lst = a[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : a) tmp[v] = In[v];</span><br><span class="line">	<span class="keyword">for</span>(; !q.<span class="built_in">empty</span>(); q.<span class="built_in">pop</span>()); <span class="keyword">for</span>(<span class="keyword">auto</span> v : a) <span class="keyword">if</span>(!In[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">	<span class="keyword">if</span>(q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> mn = <span class="number">2e9</span>; <span class="keyword">for</span>(<span class="keyword">auto</span> v : a) mn = <span class="built_in">min</span>(mn, c[v]); ans += mn; <span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> u; !q.<span class="built_in">empty</span>();) &#123;</span><br><span class="line">		u = q.<span class="built_in">front</span>(), q.<span class="built_in">pop</span>(), used[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(hv[u].<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">sort</span>(hv[u].<span class="built_in">begin</span>(), hv[u].<span class="built_in">end</span>());</span><br><span class="line">			<span class="built_in">rep</span>(i, <span class="number">0</span>, (<span class="type">int</span>)hv[u].<span class="built_in">size</span>() - <span class="number">2</span>) ans += hv[u][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(In[to[u]] &gt; <span class="number">1</span>) hv[to[u]].<span class="built_in">pb</span>(c[u]);</span><br><span class="line">		lst = to[u], --tmp[to[u]]; <span class="keyword">if</span>(!tmp[to[u]]) q.<span class="built_in">push</span>(to[u]);</span><br><span class="line">	&#125;</span><br><span class="line">	cir.<span class="built_in">pb</span>(lst); <span class="keyword">for</span>(<span class="type">int</span> u = to[lst]; u != lst; u = to[u]) cir.<span class="built_in">pb</span>(u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : cir) &#123;</span><br><span class="line">		<span class="built_in">sort</span>(hv[v].<span class="built_in">begin</span>(), hv[v].<span class="built_in">end</span>());</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">0</span>, (<span class="type">int</span>)(hv[v].<span class="built_in">size</span>() - <span class="number">2</span>)) ans += hv[v][i];</span><br><span class="line">		<span class="keyword">if</span>(hv[v].<span class="built_in">size</span>()) val[v] = hv[v].<span class="built_in">back</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = c[cir.<span class="built_in">back</span>()], f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = val[cir[<span class="number">0</span>]];</span><br><span class="line">	f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>] = (ll)<span class="number">1e14</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, (<span class="type">int</span>)(cir.<span class="built_in">size</span>() - <span class="number">1</span>)) &#123;</span><br><span class="line">		f[<span class="number">0</span>][<span class="number">0</span>][i] = <span class="built_in">min</span>(f[<span class="number">1</span>][<span class="number">1</span>][i - <span class="number">1</span>], <span class="built_in">min</span>(f[<span class="number">0</span>][<span class="number">1</span>][i - <span class="number">1</span>], f[<span class="number">0</span>][<span class="number">0</span>][i - <span class="number">1</span>])) + c[cir[i - <span class="number">1</span>]];</span><br><span class="line">		f[<span class="number">0</span>][<span class="number">1</span>][i] = <span class="built_in">min</span>(f[<span class="number">0</span>][<span class="number">1</span>][i - <span class="number">1</span>], f[<span class="number">0</span>][<span class="number">0</span>][i - <span class="number">1</span>]) + val[cir[i]];</span><br><span class="line">		f[<span class="number">1</span>][<span class="number">0</span>][i] = (ll)<span class="number">1e14</span>;</span><br><span class="line">		f[<span class="number">1</span>][<span class="number">1</span>][i] = f[<span class="number">1</span>][<span class="number">1</span>][i - <span class="number">1</span>] + val[cir[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	ans += <span class="built_in">min</span>(f[<span class="number">0</span>][<span class="number">0</span>][(<span class="type">int</span>)(cir.<span class="built_in">size</span>() - <span class="number">1</span>)], f[<span class="number">0</span>][<span class="number">1</span>][(<span class="type">int</span>)(cir.<span class="built_in">size</span>() - <span class="number">1</span>)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;to[i], &amp;c[i]), e[to[i]].<span class="built_in">pb</span>(i), ++In[to[i]];</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">check</span>()) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(!vis[i]) <span class="built_in">solve</span>(i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOISC 2017 Day 1」开荒者</title>
    <url>/2025/07/27/JOISC-2017-Day-1-kai-huang-zhe/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2390">「JOISC 2017 Day 1」开荒者</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>单独一个点，假如固定每个操作的数目，则得到的草呈矩形，且形状不会应操作顺序变化而变化。所以最后的结果与操作顺序无关。同时发现当向上、下次数总和一定时，若无上下边界，则草地形状一样。<br>考虑枚举向上、向下次数，可以通过差分扫描线的方式维护出草地的形状（由于一个点只会被加入一次，删除一次，所以扫描线点数 $ O(n) $ 级别）。<br>考虑对于每一行对答案的贡献，设第 $ i $ 每一株草的位置时 $ a_1 \dots a_m $ ，则向左向右对答案的贡献为 $ f_i &#x3D; \max(a_1 - 1, c - a_n, \max_{i &#x3D; 1}^{m - 1}(a_{i + 1} - a_{i}) $ ，现在考虑上下的边界，答案为 $ \min_{i}(\max_{i \leq j \leq i + r - 1} f_j) $ ，可以用单调队列维护。<br>时间复杂度 $ O(n^3) $ ，常数略大。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">910</span>;</span><br><span class="line"><span class="type">int</span> r, c, n, smn, wmn, swmn; ll ans;</span><br><span class="line">pii a[N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s, w, All;</span><br><span class="line">pii b[N]; <span class="type">int</span> tot, len[N], ex[N][N], lmt[N][<span class="number">3</span>]; ll sum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(); <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &gt; <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; x = x * <span class="number">10ll</span> + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> pii &amp;x, <span class="type">const</span> pii &amp;y)</span> </span>&#123; <span class="keyword">return</span> x.snd &lt; y.snd; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> lst = <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(ex[x][i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!lst) lmt[x][<span class="number">0</span>] = a[i].snd - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> mx = <span class="built_in">max</span>(mx, a[i].snd - a[lst].snd - <span class="number">1</span>);</span><br><span class="line">		lst = i;</span><br><span class="line">	&#125;</span><br><span class="line">	lmt[x][<span class="number">1</span>] = c - a[lst].snd, lmt[x][<span class="number">2</span>] = mx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) b[++tot] = <span class="built_in">mp</span>(a[i].fst - x, -i), b[++tot] = <span class="built_in">mp</span>(a[i].fst + <span class="number">1</span>, i);</span><br><span class="line">	<span class="built_in">sort</span>(b + <span class="number">1</span>, b + tot + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, tot - <span class="number">1</span>) &#123;</span><br><span class="line">		len[i] = b[i + <span class="number">1</span>].fst - b[i].fst; <span class="built_in">rep</span>(j, <span class="number">1</span>, n) ex[i][j] = ex[i - <span class="number">1</span>][j];</span><br><span class="line">		b[i].snd &lt; <span class="number">0</span> ? (ex[i][-b[i].snd] = <span class="number">1</span>) : (ex[i][b[i].snd] = <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">calc</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">swap</span>(b[x], b[y]);</span><br><span class="line">	<span class="built_in">rep</span>(i, x, y) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n) ex[i][j] = ex[i - <span class="number">1</span>][j];</span><br><span class="line">		b[i].snd &lt; <span class="number">0</span> ? (ex[i][-b[i].snd] = <span class="number">1</span>) : (ex[i][b[i].snd] = <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">calc</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, tot) <span class="keyword">if</span>(b[i].snd &lt; <span class="number">0</span>) b[i].fst -= x;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(; flag;) &#123; flag = <span class="number">0</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, tot - <span class="number">1</span>) <span class="keyword">if</span>(b[i + <span class="number">1</span>] &lt; b[i]) <span class="built_in">Swap</span>(i, i + <span class="number">1</span>), flag = <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, tot - <span class="number">1</span>) len[i] = b[i + <span class="number">1</span>].fst - b[i].fst;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, tot) sum[i] = sum[i - <span class="number">1</span>] + len[i - <span class="number">1</span>];</span><br><span class="line">	deque&lt;<span class="type">int</span>&gt; q[<span class="number">3</span>]; <span class="type">int</span> res = c + c - <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; j &lt;= tot; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(; j &lt; tot &amp;&amp; sum[j] - sum[i] &lt; r; ++j)</span><br><span class="line">			<span class="keyword">if</span>(len[j]) &#123;</span><br><span class="line">				<span class="built_in">rep</span>(k, <span class="number">0</span>, <span class="number">2</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span>(; !q[k].<span class="built_in">empty</span>() &amp;&amp; lmt[q[k].<span class="built_in">back</span>()][k] &lt;= lmt[j][k]; q[k].<span class="built_in">pop_back</span>());</span><br><span class="line">					q[k].<span class="built_in">push_back</span>(j);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">if</span>(sum[j] - sum[i] &lt; r) <span class="keyword">break</span>;</span><br><span class="line">		<span class="type">int</span> x = lmt[q[<span class="number">0</span>].<span class="built_in">front</span>()][<span class="number">0</span>], y = lmt[q[<span class="number">1</span>].<span class="built_in">front</span>()][<span class="number">1</span>], z = lmt[q[<span class="number">2</span>].<span class="built_in">front</span>()][<span class="number">2</span>];</span><br><span class="line">		res = <span class="built_in">min</span>(res, <span class="built_in">max</span>(x + y, z));</span><br><span class="line">		<span class="built_in">rep</span>(k, <span class="number">0</span>, <span class="number">2</span>) <span class="keyword">if</span>(q[k].<span class="built_in">front</span>() == i) q[k].<span class="built_in">pop_front</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(r), <span class="built_in">gi</span>(c), <span class="built_in">gi</span>(n), ans = r + c - <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">gi</span>(a[i].fst), <span class="built_in">gi</span>(a[i].snd); <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">	smn = a[<span class="number">1</span>].fst - <span class="number">1</span>, wmn = r - a[n].fst, swmn = smn + wmn;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n - <span class="number">1</span>) swmn = <span class="built_in">max</span>(swmn, a[i + <span class="number">1</span>].fst - a[i].fst - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">		s.<span class="built_in">insert</span>(a[i].fst - <span class="number">1</span>), w.<span class="built_in">insert</span>(r - a[i].fst);</span><br><span class="line">		<span class="built_in">rep</span>(j, i, n) <span class="keyword">if</span>(a[j].fst - a[i].fst - <span class="number">1</span> &gt;= swmn) All.<span class="built_in">insert</span>(a[j].fst - a[i].fst - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i : s) <span class="keyword">for</span>(<span class="keyword">auto</span> j : w) <span class="keyword">if</span>(i + j &gt;= swmn) All.<span class="built_in">insert</span>(i + j);</span><br><span class="line">	<span class="built_in">init</span>(*All.<span class="built_in">begin</span>()); <span class="type">int</span> lst = *All.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i : All) ans = <span class="built_in">min</span>(ans, i + <span class="built_in">solve</span>(i - lst)), lst = i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOISC 2017 Day 3」自然公园</title>
    <url>/2025/07/27/JOISC-2017-Day-3-zi-ran-gong-yuan/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2398">「JOISC 2017 Day 3」自然公园</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑链的情况，我们维护一条链 $ l \dots r $ ，每加入一个点 $ x $ ，可以直接判断是 $ x \dots l \dots r $ 或 $ l \dots r \dots x $ ，然后判断 $ x $ 和端点有没有直接的连边，如果有，连上，返回；否则二分出路径上编号最小的点，继续做下去。<br>对于树的情况，要把整个集合和连进来的点判断。<br>对于图的情况，每次发现当前点相邻的时候要二分出每条与集合相连的边，由于点的度数不超过 $ 7 $ ，所以能过。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;park.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MXN = <span class="number">4010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Answer</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ask</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B, <span class="type">int</span> Place[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Sub3 &#123;</span><br><span class="line">	<span class="type">int</span> g[MXN], vis[MXN], used[MXN]; vector&lt;<span class="type">int</span>&gt; hv, e[MXN];</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> S, vector&lt;<span class="type">int</span>&gt; G)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">0</span>, n - <span class="number">1</span>) g[i] = <span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">auto</span> v : G) g[v] = <span class="number">1</span>;</span><br><span class="line">		g[S] = <span class="number">1</span>; <span class="keyword">return</span> <span class="built_in">Ask</span>(<span class="built_in">min</span>(G[<span class="number">0</span>], S), <span class="built_in">max</span>(G[<span class="number">0</span>], S), g);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> l = <span class="number">1</span>, r = n - <span class="number">2</span>, res = n - <span class="number">1</span>, mid;</span><br><span class="line">		<span class="keyword">for</span>(; l &lt;= r;) &#123;</span><br><span class="line">			mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">rep</span>(i, <span class="number">0</span>, mid) g[i] = (vis[i] != <span class="number">2</span>); <span class="built_in">rep</span>(i, mid + <span class="number">1</span>, n - <span class="number">1</span>) g[i] = (vis[i] == <span class="number">1</span>);</span><br><span class="line">			g[x] = <span class="number">1</span>; <span class="keyword">if</span>(<span class="built_in">Ask</span>(<span class="number">0</span>, x, g)) res = mid, r = mid - <span class="number">1</span>; <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, vector&lt;<span class="type">int</span>&gt; &amp;G)</span> </span>&#123; G.<span class="built_in">pb</span>(u), used[u] = <span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(used[v]) <span class="built_in">dfs</span>(v, G); &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Finde</span><span class="params">(<span class="type">int</span> x, vector&lt;<span class="type">int</span>&gt; G)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">check</span>(x, G)) &#123; <span class="keyword">for</span>(<span class="keyword">auto</span> v : G) used[v] = <span class="number">0</span>; <span class="keyword">return</span> ; &#125;</span><br><span class="line">		<span class="type">int</span> l = <span class="number">0</span>, r = G.<span class="built_in">size</span>() - <span class="number">2</span>, res = G.<span class="built_in">size</span>() - <span class="number">1</span>, mid;</span><br><span class="line">		<span class="keyword">for</span>(; l &lt;= r;) &#123;</span><br><span class="line">			mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">rep</span>(i, <span class="number">0</span>, n - <span class="number">1</span>) g[i] = <span class="number">0</span>; <span class="built_in">rep</span>(i, <span class="number">0</span>, mid) g[G[i]] = <span class="number">1</span>;</span><br><span class="line">			g[x] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">Ask</span>(<span class="built_in">min</span>(G[<span class="number">0</span>], x), <span class="built_in">max</span>(G[<span class="number">0</span>], x), g)) res = mid, r = mid - <span class="number">1</span>; <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> u = G[res]; <span class="keyword">for</span>(<span class="keyword">auto</span> i : G) used[i] = <span class="number">1</span>; used[u] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(used[v]) &#123; vector&lt;<span class="type">int</span>&gt; tmp;  <span class="built_in">dfs</span>(v, tmp), <span class="built_in">Finde</span>(x, tmp); &#125;</span><br><span class="line">		<span class="built_in">Answer</span>(<span class="built_in">min</span>(u, x), <span class="built_in">max</span>(u, x)), e[u].<span class="built_in">pb</span>(x), e[x].<span class="built_in">pb</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		vis[x] = <span class="number">2</span>; <span class="keyword">for</span>(; !<span class="built_in">check</span>(x, hv); <span class="built_in">solve</span>(<span class="built_in">Find</span>(x)));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : hv) used[v] = <span class="number">1</span>;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; tmp; <span class="built_in">dfs</span>(<span class="number">0</span>, tmp), <span class="built_in">Finde</span>(x, tmp), vis[x] = <span class="number">1</span>, hv.<span class="built_in">pb</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">MAIN</span><span class="params">()</span> </span>&#123; hv.<span class="built_in">pb</span>(<span class="number">0</span>), vis[<span class="number">0</span>] = <span class="number">1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, n - <span class="number">1</span>) <span class="keyword">if</span>(!vis[i]) <span class="built_in">solve</span>(i); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Detect</span><span class="params">(<span class="type">int</span> T, <span class="type">int</span> NN)</span> </span>&#123;</span><br><span class="line">	n = NN;</span><br><span class="line">	Sub3::<span class="built_in">MAIN</span>(); <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>交互</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>【LOJ2330】「清华集训 2017」榕树之心</title>
    <url>/2025/07/27/LOJ2330-qing-hua-ji-xun-2017-rong-shu-zhi-xin/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2330">「清华集训 2017」榕树之心</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑只询问 $ 1 $ 号节点怎么做。假如我们选择一个子树然后再选择另一个子树，那么这次操作就抵消了。<br>对于每一个节点，将它每一个子树的大小计为 $ a_i $ ，然后每次选择 $ a_x, a_y ( a_x &gt; 0, a_y &gt; 0 ) $ ，使 $ –a_x, –a_y $ ，使 $ \sum{a_i} $ 最小。最后有两种情况：  </p>
<ol>
<li>当 $ Max ( a_i ) \times 2 &gt;&#x3D; \sum{a_i} $ ，则该节点子树贡献为 $ Max ( a_i ) \times 2 - \sum{a_i} $ 。  </li>
<li>否则每次去两个最大值消耗，该节点子树贡献为 $ ( \sum{a_i} ) \mod 2 $ 。</li>
</ol>
<p>然后就可以在节点不同的儿子中内部抵消，就可以进行树形 DP ，记录一个节点儿子子树消耗后最大值、次大值以及该点子树消耗后的权值。<br>询问所有点则可以用用类似换根 DP 的方法。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> W, T;</span><br><span class="line"><span class="type">int</span> n, ans[N], dep[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line">pii f[<span class="number">2</span>][N], a[N];</span><br><span class="line"><span class="comment">// f[0][x] &gt; f[1][x]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Max</span><span class="params">(<span class="type">const</span> T &amp;x, <span class="type">const</span> T &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> pii &amp;x, <span class="type">const</span> pii &amp;y) &#123;</span><br><span class="line">	<span class="keyword">return</span> x.fst == y.fst ? x.snd &gt; y.snd : x.fst &lt; y.fst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	a[u].fst = <span class="number">1</span>, dep[u] = dep[ff] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v ^ ff) &#123;</span><br><span class="line">		<span class="built_in">dfs1</span>(v, u), a[u].fst += a[v].fst;</span><br><span class="line">		<span class="keyword">if</span>(f[<span class="number">1</span>][u] &lt; a[v]) f[<span class="number">1</span>][u] = a[v];</span><br><span class="line">		<span class="keyword">if</span>(f[<span class="number">1</span>][u] &gt; f[<span class="number">0</span>][u]) <span class="built_in">swap</span>(f[<span class="number">1</span>][u], f[<span class="number">0</span>][u]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(f[<span class="number">0</span>][u].fst) &#123;</span><br><span class="line">		<span class="keyword">if</span>(a[u].fst - f[<span class="number">0</span>][u].fst - <span class="number">1</span> &gt;= f[<span class="number">0</span>][u].snd + <span class="number">1</span>)</span><br><span class="line">			a[u].snd = (a[u].fst - <span class="number">1</span>) &amp; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> a[u].snd = f[<span class="number">0</span>][u].snd + <span class="number">1</span> - (a[u].fst - f[<span class="number">0</span>][u].fst - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> a[u].snd = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, pii x)</span> </span>&#123;</span><br><span class="line">	pii U = <span class="built_in">Max</span>(x, f[<span class="number">0</span>][u]); <span class="type">int</span> sz = n - dep[u] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(U.fst) &#123;</span><br><span class="line">		<span class="keyword">if</span>(sz - U.fst - <span class="number">1</span> &gt;= U.snd + <span class="number">1</span>) ans[u] = (sz - <span class="number">1</span>) &amp; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> ans[u] = U.snd + <span class="number">1</span> - (sz - U.fst - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v ^ ff) &#123;</span><br><span class="line">		<span class="keyword">if</span>(f[<span class="number">0</span>][u] == a[v]) <span class="built_in">dfs2</span>(v, u, <span class="built_in">Max</span>(x, f[<span class="number">1</span>][u]));</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">dfs2</span>(v, u, <span class="built_in">Max</span>(x, f[<span class="number">0</span>][u]));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;W, &amp;T);</span><br><span class="line">	<span class="keyword">for</span>(; T; --T) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			e[i].<span class="built_in">clear</span>(), f[<span class="number">0</span>][i] = f[<span class="number">1</span>][i] = a[i] = <span class="built_in">mp</span>(<span class="number">0</span>, INF);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x);</span><br><span class="line">		<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="built_in">mp</span>(<span class="number">0</span>, INF));</span><br><span class="line">		<span class="keyword">if</span>(W == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[<span class="number">1</span>] == <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i] == <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>【LOJ3042】【ZJOI2019】麻将</title>
    <url>/2025/07/27/LOJ3042-ZJOI2019-ma-jiang/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/3042">【LOJ3042】【ZJOI2019】麻将</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>我们可以用 $ dp[i][j][k] $ 表示枚举到第 $ i $ 种牌，没有组成面子的 $ i - 1 $ 种牌有 $ j $ 个， $ i $ 种牌有 $ k $ 个。<br>然后再开一维表示是否有雀头，七对子再开一维特判即可。<br>然后暴力搜索所有 $ dp $ 状态，发现状态数只有 $ S &#x3D; 3956 $ 种。<br>考虑摸 $ i $ 牌，计算所有大小为 $ 13+i $ 的牌集中不能胡牌的集合数 $ X $ 和总集合数 $ Y $ ，那么 $ \frac{X}{Y} $ 就是权值大于 $ i $ 的概率， $ \sum{\frac{X}{Y}} $ 即为权值的期望。<br>设 $ f[i][j][t] $ 表示处理前 $ i $ 种牌，选了 $ j $ 张牌， $ dp $ 状态编号为 $ t $ ，转移就枚举下一种牌张数即可。<br>时间复杂度 $ O(n^2 S) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, S = <span class="number">4010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">state</span> &#123; <span class="type">int</span> f[<span class="number">3</span>][<span class="number">3</span>]; &#125;; <span class="type">int</span> Count = <span class="number">0</span>; map&lt;state, <span class="type">int</span>&gt; ma;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> state &amp;x, <span class="type">const</span> state &amp;y) &#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		<span class="keyword">if</span>(x.f[i][j] ^ y.f[i][j]) <span class="keyword">return</span> x.f[i][j] &lt; y.f[i][j];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">state <span class="title">cipher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	state res;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) res.f[i][j] = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">state <span class="title">starter</span><span class="params">()</span> </span>&#123; state res = <span class="built_in">cipher</span>(); res.f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> res; &#125;</span><br><span class="line">state <span class="keyword">operator</span>+(<span class="type">const</span> state &amp;x, <span class="type">const</span> state &amp;y) &#123;</span><br><span class="line">	state res;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		res.f[i][j] = <span class="built_in">Max</span>(x.f[i][j], y.f[i][j]);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">state <span class="keyword">operator</span>+(<span class="type">const</span> state &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	state res = <span class="built_in">cipher</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span> &amp;&amp; i &lt;= y; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span> &amp;&amp; i + j &lt;= y; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(x.f[i][j] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="type">int</span> tt = x.f[i][j];</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span> &amp;&amp; i + j + k &lt;= y; k++)</span><br><span class="line">				res.f[j][k] = <span class="built_in">Max</span>(res.f[j][k], <span class="built_in">Min</span>(tt + i + (y - i - j - k) / <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(state u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ma.<span class="built_in">count</span>(u)) <span class="keyword">return</span> ;</span><br><span class="line">	ma[u] = ++Count; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++) <span class="built_in">dfs</span>(u + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;pair&lt;state, state&gt;, <span class="type">int</span>&gt; mahjong;</span><br><span class="line"><span class="type">bool</span> ed[S]; mahjong states[S]; map&lt;mahjong, <span class="type">int</span>&gt; id;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>, nxt[<span class="number">5</span>][S];</span><br><span class="line"></span><br><span class="line">pair&lt;state, state&gt; <span class="keyword">operator</span>+(<span class="type">const</span> pair&lt;state, state&gt; &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	<span class="keyword">if</span>(y &gt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">mp</span>(x.fst + y, (x.snd + y) + (x.fst + (y - <span class="number">2</span>)));</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mp</span>(x.fst + y, x.snd + y);</span><br><span class="line">&#125;</span><br><span class="line">mahjong <span class="keyword">operator</span>+(<span class="type">const</span> mahjong &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mp</span>(x.fst + y, <span class="built_in">Min</span>(x.snd + (y &gt; <span class="number">1</span>), <span class="number">7</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mahjong <span class="title">inception</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">mp</span>(<span class="built_in">mp</span>(<span class="built_in">starter</span>(), <span class="built_in">cipher</span>()), <span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getstate</span><span class="params">(mahjong u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(id.<span class="built_in">count</span>(u)) <span class="keyword">return</span> ; id[u] = ++tot, states[tot] = u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++) <span class="built_in">getstate</span>(u + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(mahjong u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u.snd &gt;= <span class="number">7</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		<span class="keyword">if</span>(u.fst.snd.f[i][j] &gt;= <span class="number">4</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="built_in">starter</span>()), <span class="built_in">getstate</span>(<span class="built_in">inception</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span><br><span class="line">		ed[i] = <span class="built_in">check</span>(states[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) nxt[j][i] = id[states[i] + j];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, used[N], ans = <span class="number">0</span>, C[<span class="number">5</span>][<span class="number">5</span>], f[N][<span class="number">4</span> * N][S];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">init</span>(), <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= <span class="number">13</span>; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), ++used[x];</span><br><span class="line">	C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++) C[i][j] = C[i - <span class="number">1</span>][j] + C[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">4</span> * i; j++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= tot; k++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(!f[i][j][k]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> t = used[i + <span class="number">1</span>]; t &lt; <span class="number">5</span>; t++)</span><br><span class="line">				f[i + <span class="number">1</span>][j + t][nxt[t][k]] = <span class="built_in">add</span>(f[i + <span class="number">1</span>][j + t][nxt[t][k]],</span><br><span class="line">				<span class="built_in">mul</span>(f[i][j][k], C[<span class="number">4</span> - used[i + <span class="number">1</span>]][t - used[i + <span class="number">1</span>]]));</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">13</span>; i &lt;= <span class="number">4</span> * n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> sum = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= tot; j++) &#123;</span><br><span class="line">			sum = <span class="built_in">add</span>(sum, f[n][i][j]); <span class="keyword">if</span>(!ed[j]) cnt = <span class="built_in">add</span>(cnt, f[n][i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(<span class="built_in">ksm</span>(sum), cnt));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>【LOJ3044】【ZJOI2019】Minimax 搜索</title>
    <url>/2025/07/27/LOJ3044-ZJOI2019-Minimax-sou-suo/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/3044">【LOJ3044】【ZJOI2019】Minimax 搜索</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>计算 $ W(S) &lt;&#x3D; i $ 比 $ W(S) &#x3D; i $ 容易得多，设最后结果为 $ sum[i] - sum[i - 1] $ ，其中 $ sum[n] &#x3D; 2^{count~leaf} - 1 $ 。<br>先做一次 $ dfs $ 找到决策路径。对于每一个 $ i \in [l, r] $ ，令 $ dp[i] $ 表示 $ i $ 的子树有多少种方案是无法改变根节点的值的，用总集合数减去就得到可以改变的方案数。<br>然后得到一个 $ O(n \times (r - l + 1)) $ 的算法。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, L, R;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>, hed[N], to[N + N], nxt[N + N];</span><br><span class="line"><span class="type">int</span> f[N], dep[N], sz[N];</span><br><span class="line"><span class="type">int</span> ans[N], value, ba[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	to[++cnt] = y, nxt[cnt] = hed[x], hed[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	dep[u] = dep[ff] + <span class="number">1</span>; <span class="type">bool</span> Leaf = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) f[u] = <span class="number">1</span>; <span class="keyword">else</span> f[u] = N;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] ^ ff) &#123;</span><br><span class="line">		<span class="built_in">init</span>(to[i], u), sz[u] += sz[to[i]], Leaf = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) f[u] = <span class="built_in">Max</span>(f[u], f[to[i]]);</span><br><span class="line">		<span class="keyword">else</span> f[u] = <span class="built_in">Min</span>(f[u], f[to[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Leaf) sz[u] = <span class="number">1</span>, f[u] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gmx</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="type">bool</span> Leaf = <span class="number">1</span>; <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] ^ ff) &#123;</span><br><span class="line">		Leaf = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, <span class="built_in">gmx</span>(to[i], u, w));</span><br><span class="line">		<span class="keyword">else</span> res = <span class="built_in">mul</span>(res, <span class="built_in">sub</span>(ba[sz[to[i]]], <span class="built_in">gmx</span>(to[i], u, w)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Leaf) &#123;</span><br><span class="line">		<span class="keyword">if</span>(f[u] &lt;= value) ++res; <span class="keyword">if</span>(f[u] + w &lt;= value) ++res; <span class="keyword">return</span> res - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) <span class="keyword">return</span> res; <span class="keyword">return</span> <span class="built_in">sub</span>(ba[sz[u]], res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gmn</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="type">bool</span> Leaf = <span class="number">1</span>; <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] ^ ff) &#123;</span><br><span class="line">		Leaf = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, <span class="built_in">sub</span>(ba[sz[to[i]]], <span class="built_in">gmn</span>(to[i], u, w)));</span><br><span class="line">		<span class="keyword">else</span> res = <span class="built_in">mul</span>(res, <span class="built_in">gmn</span>(to[i], u, w));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Leaf) &#123;</span><br><span class="line">		<span class="keyword">if</span>(f[u] &gt;= value) ++res; <span class="keyword">if</span>(f[u] - w &gt;= value) ++res; <span class="keyword">return</span> res - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">sub</span>(ba[sz[u]], res); <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] ^ ff) &#123;</span><br><span class="line">		<span class="keyword">if</span>(f[u] == f[to[i]]) res = <span class="built_in">mul</span>(res, <span class="built_in">dfs</span>(to[i], u, w));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(dep[u] &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, <span class="built_in">gmx</span>(to[i], u, w));</span><br><span class="line">		<span class="keyword">else</span> res = <span class="built_in">mul</span>(res, <span class="built_in">gmn</span>(to[i], u, w));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">if</span>(x == n) <span class="keyword">return</span> <span class="built_in">sub</span>(ba[sz[<span class="number">1</span>]], <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sub</span>(ba[sz[<span class="number">1</span>]], <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;L, &amp;R);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), <span class="built_in">addedge</span>(x, y), <span class="built_in">addedge</span>(y, x);</span><br><span class="line">	<span class="keyword">if</span>(R - L &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">		ba[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ba[i] = <span class="built_in">add</span>(ba[i - <span class="number">1</span>], ba[i - <span class="number">1</span>]);</span><br><span class="line">		<span class="built_in">init</span>(<span class="number">1</span>, <span class="number">0</span>), value = f[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = L - <span class="number">1</span>; i &lt;= R; i++) ans[i] = <span class="built_in">calc</span>(i);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = R; i &gt;= L; i--) ans[i] = <span class="built_in">sub</span>(ans[i], ans[i - <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = L; i &lt;= R; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现每个叶子节点只会被改变一次，然后这个问题可以变成一个动态DP。<br>考虑决策路径上的节点是无用的，将树进行重链剖分，以每一个决策路径的点作为根进行动态DP。<br>卡常数可以用向量代替矩阵。<br>时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pair</span> &#123; <span class="type">int</span> k, b; <span class="built_in">Pair</span>(<span class="type">int</span> K = <span class="number">0</span>, <span class="type">int</span> B = <span class="number">0</span>) : <span class="built_in">k</span>(K), <span class="built_in">b</span>(B) &#123;&#125; &#125;;</span><br><span class="line"><span class="keyword">inline</span> Pair <span class="keyword">operator</span>+(<span class="type">const</span> Pair &amp;x, <span class="type">const</span> Pair &amp;y) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Pair</span>(<span class="built_in">mul</span>(x.k, y.k), <span class="built_in">add</span>(<span class="built_in">mul</span>(x.k, y.b), x.b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> pii <span class="keyword">operator</span>+(pii x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	<span class="keyword">if</span>(y) x.fst = <span class="built_in">mul</span>(x.fst, y); <span class="keyword">else</span> ++x.snd; <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> pii <span class="keyword">operator</span>-(pii x, <span class="type">const</span> <span class="type">int</span> &amp;y) &#123;</span><br><span class="line">	<span class="keyword">if</span>(y) x.fst = <span class="built_in">mul</span>(x.fst, <span class="built_in">ksm</span>(y)); <span class="keyword">else</span> --x.snd; <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gval</span><span class="params">(pii x)</span> </span>&#123; <span class="keyword">return</span> x.snd ? <span class="number">0</span> : x.fst; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, lb, rb, sum = <span class="number">1</span>, ans[N];</span><br><span class="line"><span class="type">bool</span> leaf[N]; <span class="type">int</span> sz[N], a[N], w[N], dep[N], son[N], key[N];</span><br><span class="line"><span class="type">int</span> fa[N], dfn[N], idx = <span class="number">0</span>, dp[N];</span><br><span class="line"><span class="type">bool</span> type[N]; pii pr[N]; <span class="type">int</span> top[N], ed[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], chs[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TR</span> &#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">		<span class="type">int</span> lf, rf; Pair w;</span><br><span class="line">		<span class="built_in">P</span>(<span class="type">int</span> Lf = <span class="number">0</span>, <span class="type">int</span> Rf = <span class="number">0</span>, Pair W = <span class="built_in">Pair</span>(<span class="number">1</span>, <span class="number">0</span>)) :</span><br><span class="line">			<span class="built_in">lf</span>(Lf), <span class="built_in">rf</span>(Rf), <span class="built_in">w</span>(W) &#123;&#125;</span><br><span class="line">	&#125;; P t[N * <span class="number">4</span>];</span><br><span class="line">	<span class="type">int</span> tot, n, rt;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; t[u].w = t[t[u].lf].w + t[t[u].rf].w; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">		u = ++tot, t[u].w = <span class="built_in">Pair</span>(<span class="number">1</span>, <span class="number">0</span>); <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(t[u].lf, l, mid), <span class="built_in">build</span>(t[u].rf, mid + <span class="number">1</span>, r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> size)</span> </span>&#123; rt = tot = <span class="number">0</span>, n = size, <span class="built_in">build</span>(rt, <span class="number">1</span>, n); &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, Pair w)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l &gt;= r) &#123; t[u].w = w; <span class="keyword">return</span> ; &#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(x &lt;= mid) <span class="built_in">mdy</span>(t[u].lf, l, mid, x, w);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">mdy</span>(t[u].rf, mid + <span class="number">1</span>, r, x, w);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Mdy</span><span class="params">(<span class="type">int</span> x, Pair w)</span> </span>&#123; <span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, w); &#125;</span><br><span class="line">	<span class="function">Pair <span class="title">qry</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l == L &amp;&amp; r == R) <span class="keyword">return</span> t[u].w;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(R &lt;= mid) <span class="keyword">return</span> <span class="built_in">qry</span>(t[u].lf, l, mid, L, R);</span><br><span class="line">		<span class="keyword">if</span>(L &gt; mid) <span class="keyword">return</span> <span class="built_in">qry</span>(t[u].rf, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">qry</span>(t[u].lf, l, mid, L, mid) +</span><br><span class="line">			   <span class="built_in">qry</span>(t[u].rf, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, R);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Qry</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r).b; &#125;</span><br><span class="line">&#125;; TR tr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	leaf[u] = <span class="number">1</span>, dep[u] = dep[ff] + <span class="number">1</span>; w[u] = (dep[u] &amp; <span class="number">1</span>) ? <span class="number">0</span> : N;</span><br><span class="line">	sz[u] = a[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v ^ ff) &#123;</span><br><span class="line">		leaf[u] = <span class="number">0</span>, <span class="built_in">init</span>(v, u), sz[u] += sz[v], a[u] = <span class="built_in">mul</span>(a[u], a[v]);</span><br><span class="line">		<span class="keyword">if</span>(sz[son[u]] &lt; sz[v]) son[u] = v;</span><br><span class="line">		<span class="keyword">if</span>((dep[u] &amp; <span class="number">1</span>) &amp;&amp; w[v] &gt; w[u]) w[u] = w[v], key[u] = v;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(!(dep[u] &amp; <span class="number">1</span>) &amp;&amp; w[v] &lt; w[u]) w[u] = w[v], key[u] = v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(leaf[u]) a[u] = <span class="number">2</span>, w[u] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> tp, <span class="type">bool</span> flag, <span class="type">bool</span> opt)</span> </span>&#123;</span><br><span class="line">	fa[u] = ff, dfn[u] = ++idx;</span><br><span class="line">	type[u] = flag, pr[u] = <span class="built_in">mp</span>(<span class="number">1</span>, <span class="number">0</span>), top[u] = tp;</span><br><span class="line">	<span class="keyword">if</span>(leaf[u]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(opt) &#123;</span><br><span class="line">			dp[u] = <span class="number">2</span> * (w[u] &lt;= w[<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(w[u] &lt;= w[<span class="number">1</span>]) chs[w[<span class="number">1</span>] - w[u] + <span class="number">1</span>].<span class="built_in">pb</span>(u);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			dp[u] = <span class="number">2</span> * (w[u] &gt;= w[<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(w[u] &gt;= w[<span class="number">1</span>]) chs[w[u] - w[<span class="number">1</span>] + <span class="number">1</span>].<span class="built_in">pb</span>(u);</span><br><span class="line">		&#125;</span><br><span class="line">		tr.<span class="built_in">Mdy</span>(dfn[u], <span class="built_in">Pair</span>(<span class="number">0</span>, dp[u]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u], u, tp, flag ^ <span class="number">1</span>, opt), ed[u] = ed[son[u]];</span><br><span class="line">	<span class="keyword">else</span> ed[u] = u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff &amp;&amp; v != son[u]) &#123;</span><br><span class="line">		<span class="built_in">dfs2</span>(v, u, v, flag ^ <span class="number">1</span>, opt);</span><br><span class="line">		<span class="keyword">if</span>(flag) pr[u] = pr[u] + dp[v];</span><br><span class="line">		<span class="keyword">else</span> pr[u] = pr[u] + <span class="built_in">sub</span>(a[v], dp[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(son[u]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(flag) &#123;</span><br><span class="line">			dp[u] = <span class="built_in">mul</span>(<span class="built_in">gval</span>(pr[u]), dp[son[u]]);</span><br><span class="line">			tr.<span class="built_in">Mdy</span>(dfn[u], <span class="built_in">Pair</span>(<span class="built_in">gval</span>(pr[u]), <span class="number">0</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			dp[u] = <span class="built_in">mul</span>(<span class="built_in">gval</span>(pr[u]), <span class="built_in">sub</span>(a[son[u]], dp[son[u]]));</span><br><span class="line">			dp[u] = <span class="built_in">sub</span>(a[u], dp[u]);</span><br><span class="line">			tr.<span class="built_in">Mdy</span>(dfn[u], <span class="built_in">Pair</span>(<span class="built_in">gval</span>(pr[u]), <span class="built_in">sub</span>(a[u], <span class="built_in">mul</span>(<span class="built_in">gval</span>(pr[u]), a[son[u]]))));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!key[u]) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="built_in">dfs1</span>(key[u], u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff &amp;&amp; v != key[u])</span><br><span class="line">		<span class="built_in">dfs2</span>(v, u, v, <span class="number">0</span>, dep[u] &amp; <span class="number">1</span>), sum = <span class="built_in">mul</span>(sum, dp[v]), fa[v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	tr.<span class="built_in">Mdy</span>(dfn[x], <span class="built_in">Pair</span>(<span class="number">0</span>, <span class="built_in">sub</span>(dp[x], <span class="number">1</span>)));</span><br><span class="line">	<span class="type">int</span> tmp = tr.<span class="built_in">Qry</span>(dfn[top[x]], dfn[ed[x]]);</span><br><span class="line">	x = top[x];</span><br><span class="line">	<span class="keyword">for</span>(; fa[x];) &#123;</span><br><span class="line">		<span class="type">int</span> f = fa[x];</span><br><span class="line">		<span class="keyword">if</span>(type[f]) pr[f] = (pr[f] + tmp) - dp[x];</span><br><span class="line">		<span class="keyword">else</span> pr[f] = (pr[f] + <span class="built_in">sub</span>(a[x], tmp)) - <span class="built_in">sub</span>(a[x], dp[x]);</span><br><span class="line">		dp[x] = tmp, x = f;</span><br><span class="line">		<span class="keyword">if</span>(type[x]) tr.<span class="built_in">Mdy</span>(dfn[x], <span class="built_in">Pair</span>(<span class="built_in">gval</span>(pr[x]), <span class="number">0</span>));</span><br><span class="line">		<span class="keyword">else</span> tr.<span class="built_in">Mdy</span>(dfn[x], <span class="built_in">Pair</span>(<span class="built_in">gval</span>(pr[x]), <span class="built_in">sub</span>(a[x], <span class="built_in">mul</span>(<span class="built_in">gval</span>(pr[x]), a[son[x]]))));</span><br><span class="line">		tmp = tr.<span class="built_in">Qry</span>(dfn[top[x]], dfn[ed[x]]), x = top[x];</span><br><span class="line">	&#125;</span><br><span class="line">	sum = <span class="built_in">mul</span>(<span class="built_in">mul</span>(sum, tmp), <span class="built_in">ksm</span>(dp[x])), dp[x] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;lb, &amp;rb);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	<span class="built_in">init</span>(<span class="number">1</span>, <span class="number">0</span>), tr.<span class="built_in">init</span>(n), <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> x : chs[i]) <span class="built_in">modify</span>(x);</span><br><span class="line">		ans[i] = <span class="built_in">sub</span>(a[<span class="number">1</span>], sum);</span><br><span class="line">	&#125;</span><br><span class="line">	ans[n] = a[<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--) ans[i] = <span class="built_in">sub</span>(ans[i], ans[i - <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = lb; i &lt;= rb; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
        <tag>动态DP</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOISC 2017 Day 1」港口设施</title>
    <url>/2025/07/27/JOISC-2017-Day-1-gang-kou-she-shi/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2391">「JOISC 2017 Day 1」港口设施</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>考虑两个箱子如果进出栈时间呈<strong>嵌套关系</strong>，则这两个箱子就<strong>不能</strong>在同一个栈中。<br>考虑对于这种嵌套关系的两个箱子连一条边，最后的图中的二分图的方案数即总方案数。<br>如果暴力连边，那么边数可达 $ n^2 $ 个，显然过不去。<br>观察我们目前的连边方案：对于一个物品 $ u $ ，它会和之前物品序列中一段连续的物品 $ v1, v2, \dots, vk $ 连边。此时 $ v1, v2, \dots, vk $ 都是<strong>连通且同色</strong>的。<br>那么如果下一轮的连边的范围和 $ v1, v2, \dots, vk $ 有交，那么由连通性，这些边其实只连一条就够了。<br>具体地，对于每个左端点，我们对其维护一个 $ nxt $ ，表示如果现在再对它进行连边，应该跳到哪里。这样连边的数量就会减少很多，且不改变二分性和连通性。<br>最后 $ dfs $ 染色即可。时间复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2000010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], b[N], ar[N], ans = <span class="number">1</span>, fa1[N], fa2[N], nxt[N];</span><br><span class="line"><span class="type">int</span> clr[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> *fa, <span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> fa[x] == x ? x : fa[x] = <span class="built_in">find</span>(fa, fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(clr[v] == <span class="number">-1</span>) clr[v] = clr[u] ^ <span class="number">1</span>, <span class="built_in">dfs</span>(v);</span><br><span class="line">		<span class="keyword">if</span>(clr[v] == clr[u]) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), ans = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + n + <span class="number">1</span>) fa1[i] = fa2[i] = i;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i], &amp;b[i]), clr[i] = <span class="number">-1</span>;</span><br><span class="line">		ar[a[i]] = ar[b[i]] = i, fa1[b[i]] = b[i] + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + n) <span class="keyword">if</span>(b[ar[i]] == i) &#123;</span><br><span class="line">		<span class="type">int</span> lst = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="built_in">find</span>(fa1, a[ar[i]] + <span class="number">1</span>); j &lt;= i; j = <span class="built_in">find</span>(fa1, j + <span class="number">1</span>)) &#123;</span><br><span class="line">			j = <span class="built_in">find</span>(fa2, j), e[ar[i]].<span class="built_in">pb</span>(ar[j]), e[ar[j]].<span class="built_in">pb</span>(ar[i]);</span><br><span class="line">			<span class="keyword">if</span>(lst) fa2[lst] = j; lst = j;</span><br><span class="line">		&#125;</span><br><span class="line">		fa1[a[ar[i]]] = a[ar[i]] + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(clr[i] == <span class="number">-1</span>) clr[i] = <span class="number">0</span>, <span class="built_in">dfs</span>(i), ans = ans * <span class="number">2</span> % mod;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>「NOI2016」循环之美</title>
    <url>/2025/07/27/NOI2016-xun-huan-zhi-mei/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2085">「NOI2016」循环之美</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>设 $ k $ 进制下循环位数为 $ a $ ，则 $ xk^a \equiv x (\mod y) $ ，即 $ k^a \equiv 1 (\mod y) $ ，则 $ \gcd(k, y) &#x3D; 1 $ 。<br>$$<br>Ans &#x3D; \sum_{i &#x3D; 1}^{n}\sum_{j &#x3D; 1}^{m}[(i, j) &#x3D; 1][(j, k) &#x3D; 1]\\<br> &#x3D; \sum_{j &#x3D; 1}^{m}[(j, k) &#x3D; 1]\sum_{i &#x3D; 1}^{n}[(i, j) &#x3D; 1]\\<br> &#x3D; \sum_{j &#x3D; 1}^{m}[(j, k) &#x3D; 1]\sum_{i &#x3D; 1}^{n}\sum_{d | (i, j)}\mu(d)\\<br> &#x3D; \sum_{j &#x3D; 1}^{m}[(j, k) &#x3D; 1]\sum_{d | j}\mu(d)\lfloor \frac{n}{d} \rfloor\\<br> &#x3D; \sum_{d &#x3D; 1}^{\min(n, m)}\mu(d)\lfloor\frac{n}{d}\rfloor[(d, k) &#x3D; 1]\sum_{j &#x3D; 1}^{\lfloor \frac{m}{d} \rfloor} [(j, k) &#x3D; 1]\\<br> &#x3D; \sum_{d &#x3D; 1}^{\min(n, m)}\mu(d)\lfloor\frac{n}{d}\rfloor[(d, k) &#x3D; 1]\sum_{j &#x3D; 1}^{\lfloor \frac{m}{d} \rfloor} \sum_{i | (j, k)} \mu(i)\\<br> &#x3D; \sum_{d &#x3D; 1}^{\min(n, m)}\mu(d)\lfloor\frac{n}{d}\rfloor[(d, k) &#x3D; 1]\sum_{i| k} \lfloor \frac{m}{id} \rfloor .\\<br>f(n) &#x3D; \sum_{i| k} \lfloor \frac{m}{i} \rfloor ,\\<br>Ans &#x3D; \sum_{d &#x3D; 1}^{\min(n, m)}\mu(d)\lfloor\frac{n}{d}\rfloor[(d, k) &#x3D; 1] f(\lfloor \frac{m}{d} \rfloor)<br>$$<br>$ f(n) $ 可以枚举 $ k $ 的因数（$ k $ 很小）。<br>其中 $ \lfloor\frac{m}{d}\rfloor $ 和 $ \lfloor\frac{n}{d}\rfloor $ 可以整除分块。<br>$$<br>g(n, k) &#x3D; \sum_{i &#x3D; 1}^{n}\mu(i)[(i, k) &#x3D; 1]\\<br> &#x3D; \sum_{i &#x3D; 1}^{n}\mu(i)\sum_{j | (i, k)}\mu(j)\\<br> &#x3D; \sum_{i &#x3D; 1}^{n}\sum_{j | (i, k)}\mu(i)\mu(j)\\<br> &#x3D; \sum_{j | k}\mu(j)\sum_{i &#x3D; 1}^{\lfloor\frac{n}{j}\rfloor}\mu(ij)\\<br> &#x3D; \sum_{j | k}\mu(j)\sum_{i &#x3D; 1}^{\lfloor\frac{n}{j}\rfloor}\mu(ij)[(i, j) &#x3D; 1]\\<br> &#x3D; \sum_{j | k}\mu^2(j)\sum_{i &#x3D; 1}^{\lfloor\frac{n}{j}\rfloor}\mu(i)[(i, j) &#x3D; 1]\\<br> &#x3D; \sum_{j | k}\mu^2(j)g(\lfloor\frac{n}{j}\rfloor, j) .<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5000010</span>;</span><br><span class="line">ll n, m, k, d[N], ans = <span class="number">0</span>; <span class="type">int</span> ld = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; fac[<span class="number">2010</span>];</span><br><span class="line">ll mu[N], smu[N]; <span class="type">int</span> p[N], lp = <span class="number">0</span>; <span class="type">bool</span> pri[N];</span><br><span class="line">map&lt;ll, ll&gt; Smu, F[<span class="number">2010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(), pre = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; pre = c, c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = x * <span class="number">10ll</span> + (c ^ <span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(pre == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll x, ll y)</span> </span>&#123; <span class="keyword">return</span> y ? <span class="built_in">gcd</span>(y, x % y) : x; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, N - <span class="number">10</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!pri[i]) p[++lp] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; p[j] * i &lt;= N - <span class="number">10</span>; ++j) &#123;</span><br><span class="line">			pri[p[j] * i] = <span class="number">1</span>; <span class="keyword">if</span>(i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">			mu[p[j] * i] = -mu[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, N - <span class="number">10</span>) smu[i] = smu[i - <span class="number">1</span>] + mu[i];</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, k) <span class="keyword">if</span>(k % i == <span class="number">0</span>) d[++ld] = i;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">2000</span>) <span class="built_in">rep</span>(j, <span class="number">1</span>, i) <span class="keyword">if</span>(i % j == <span class="number">0</span>) fac[i].<span class="built_in">pb</span>(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= N - <span class="number">10</span>) <span class="keyword">return</span> smu[x]; <span class="keyword">if</span>(Smu.<span class="built_in">count</span>(x)) <span class="keyword">return</span> Smu[x];</span><br><span class="line">	ll sum = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll l = <span class="number">2</span>, r; l &lt;= x; l = r + <span class="number">1</span>) r = x / (x / l), sum -= (r - l + <span class="number">1</span>) * <span class="built_in">calc</span>(x / l);</span><br><span class="line">	<span class="keyword">return</span> Smu[x] = sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; <span class="number">2</span>) <span class="keyword">return</span> x; <span class="keyword">if</span>(y == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">calc</span>(x);</span><br><span class="line">	<span class="keyword">if</span>(F[y].<span class="built_in">count</span>(x)) <span class="keyword">return</span> F[y][x];</span><br><span class="line">	ll sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : fac[y]) <span class="keyword">if</span>(mu[v]) sum += <span class="built_in">f</span>(x / v, v);</span><br><span class="line">	<span class="keyword">return</span> F[y][x] = sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n), <span class="built_in">gi</span>(m), <span class="built_in">gi</span>(k), <span class="built_in">Sieve</span>();</span><br><span class="line">	<span class="keyword">for</span>(ll l = <span class="number">1</span>, r, sum; l &lt;= <span class="built_in">min</span>(n, m); l = r + <span class="number">1</span>) &#123;</span><br><span class="line">		r = <span class="built_in">min</span>(n / (n / l), m / (m / l)), sum = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, ld) sum += mu[d[j]] * (m / l / d[j]); sum *= (n / l);</span><br><span class="line">		ans += sum * (<span class="built_in">f</span>(r, k) - <span class="built_in">f</span>(l - <span class="number">1</span>, k));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>LVLM-paper reading</title>
    <url>/2025/07/27/LVLM-learning/</url>
    <content><![CDATA[<h1 id="paper-reading1"><a href="#paper-reading1" class="headerlink" title="paper reading1"></a>paper reading1</h1><div class="pdf-container">
  <iframe src="/pdfjs/web/viewer.html?file=/assets/LVLM/readpapers1.pdf" width="100%" height="800px"></iframe>
</div>]]></content>
      <tags>
        <tag>LVLM</tag>
      </tags>
  </entry>
  <entry>
    <title>PKUWC2019游记</title>
    <url>/2025/07/27/PKUWC2019-you-ji/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />
    <label for="pass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title>【NOIP2012】疫情控制</title>
    <url>/2025/07/27/NOIP2012-yi-qing-kong-zhi/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2607">【NOIP2012】疫情控制</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>这道题显然可以二分答案。<br>考虑构造解。对于每个军队，当它不能到达首都时，它的深度显然越小越好。对于可以到达首都的军队，它有两种决策：退回上一个位置、去填补其他子树的最上面节点。可以用倍增维护。<br>考虑一种特殊数据：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 5</span><br><span class="line">1 3 2</span><br><span class="line">1 4 5</span><br><span class="line">4 5 1000000000</span><br><span class="line">3 3 4 5</span><br></pre></td></tr></table></figure>

<p>它的构造方案是 $ 5 \to 5, 4 \to 3, 3 \to 2 $ ，答案是 $ 7 $ 。<br>考虑一个能到达根节点的军队（从 $ root $ 的儿子 $ x $ 来），若它的步数还能回到上一个位置（并非时光倒流），则直接将它放在根节点考虑没有影响；否则它要么去一个 $ dis(root, x) \geq dis(root, y), y \in son(root) $ 的地方，要么待在 $ x $ 。这部分可以用 $ multiset $ 维护。<br>最后贪心地从首都分配军队。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>;</span><br><span class="line"><span class="type">int</span> n, m, cnt[N],fa[<span class="number">19</span>][N], fr[N], flag[N]; ll ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">	<span class="type">int</span> to; ll w; <span class="built_in">P</span>(<span class="type">int</span> To = <span class="number">0</span>, ll W = <span class="number">0</span>) : <span class="built_in">to</span>(To), <span class="built_in">w</span>(W) &#123;&#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> P &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> w &gt; yy.w; &#125;</span><br><span class="line">&#125;; vector&lt;P&gt; e[N];</span><br><span class="line">ll depw[N];</span><br><span class="line">ll a[N], b[N]; <span class="type">int</span> la, lb;</span><br><span class="line">vector&lt;ll&gt; hv[N];</span><br><span class="line">multiset&lt;ll&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">gi</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">	x = <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>(), pre = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; pre = c, c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) x = <span class="number">10ll</span> * x + (c ^ <span class="number">48</span>);</span><br><span class="line">	<span class="keyword">if</span>(pre == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> anc)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ff == <span class="number">1</span>) anc = u; fr[u] = anc, fa[<span class="number">0</span>][u] = ff;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">18</span>) fa[i][u] = fa[i - <span class="number">1</span>][fa[i - <span class="number">1</span>][u]];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v.to != ff) depw[v.to] = depw[u] + v.w, <span class="built_in">dfs</span>(v.to, u, anc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(flag[u] || e[u].<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>, now = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v.to != ff) ++cnt, <span class="built_in">solve</span>(v.to, u), now += flag[v.to];</span><br><span class="line">	<span class="keyword">if</span>(cnt == now) flag[u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	la = lb = <span class="number">0</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, n) flag[i] = <span class="number">0</span>, hv[i].<span class="built_in">clear</span>(); st.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">if</span>(cnt[<span class="number">1</span>]) &#123; <span class="built_in">rep</span>(i, <span class="number">1</span>, cnt[<span class="number">1</span>]) a[++la] = x; &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) <span class="keyword">if</span>(cnt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(depw[i] &lt;= x)</span><br><span class="line">			<span class="built_in">rep</span>(j, <span class="number">1</span>, cnt[i]) &#123;</span><br><span class="line">				<span class="keyword">if</span>(depw[fr[i]] &lt;= x - depw[i]) a[++la] = x - depw[i];</span><br><span class="line">				<span class="keyword">else</span> hv[fr[i]].<span class="built_in">pb</span>(x - depw[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> anc = i; ll tmp = x;</span><br><span class="line">			<span class="built_in">per</span>(j, <span class="number">18</span>, <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">if</span>(fa[j][anc] &amp;&amp; depw[anc] - depw[fa[j][anc]] &lt;= tmp)</span><br><span class="line">					tmp -= depw[anc] - depw[fa[j][anc]], anc = fa[j][anc];</span><br><span class="line">			flag[anc] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[<span class="number">1</span>]) &#123;</span><br><span class="line">		<span class="built_in">solve</span>(v.to, <span class="number">1</span>), <span class="built_in">sort</span>(hv[v.to].<span class="built_in">begin</span>(), hv[v.to].<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;ll&gt;());</span><br><span class="line">		<span class="keyword">if</span>(!flag[v.to]) &#123;</span><br><span class="line">			multiset&lt;ll&gt;::iterator it = st.<span class="built_in">lower_bound</span>(v.w);</span><br><span class="line">			<span class="keyword">if</span>(it != st.<span class="built_in">end</span>() &amp;&amp; (!hv[v.to].<span class="built_in">size</span>() || *it &lt;= hv[v.to].<span class="built_in">back</span>()))</span><br><span class="line">				st.<span class="built_in">erase</span>(it), flag[v.to] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(hv[v.to].<span class="built_in">size</span>()) hv[v.to].<span class="built_in">pop_back</span>(), flag[v.to] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i : hv[v.to]) st.<span class="built_in">insert</span>(i); <span class="keyword">if</span>(!flag[v.to]) b[++lb] = v.w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + la + <span class="number">1</span>), <span class="built_in">sort</span>(b + <span class="number">1</span>, b + lb + <span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> p1 = <span class="number">1</span>, p2 = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(; p1 &lt;= la &amp;&amp; p2 &lt;= lb; ++p1, ++p2) &#123;</span><br><span class="line">		<span class="keyword">for</span>(; p1 &lt;= la &amp;&amp; a[p1] &lt; b[p2]; ++p1);</span><br><span class="line">		<span class="keyword">if</span>(p1 &gt; la) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p2 &gt; lb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y, z; <span class="built_in">gi</span>(x), <span class="built_in">gi</span>(y), <span class="built_in">gi</span>(z), e[x].<span class="built_in">pb</span>(<span class="built_in">P</span>(y, z)), e[y].<span class="built_in">pb</span>(<span class="built_in">P</span>(x, z)); &#125;</span><br><span class="line">	<span class="built_in">sort</span>(e[<span class="number">1</span>].<span class="built_in">begin</span>(), e[<span class="number">1</span>].<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">gi</span>(m); <span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123; <span class="type">int</span> x; <span class="built_in">gi</span>(x), ++cnt[x]; &#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	ll l = <span class="number">0</span>, r = <span class="number">1e16</span>, mid;</span><br><span class="line">	<span class="keyword">for</span>(; l &lt;= r;) mid = (l + r) / <span class="number">2</span>, <span class="built_in">check</span>(mid) ? (ans = mid, r = mid - <span class="number">1</span>) : l = mid + <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>【SDOI2019】世界地图</title>
    <url>/2025/07/27/SDOI2019-shi-jie-di-tu/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/3112">【SDOI2019】世界地图</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>因为 $ n $ 很小，所以问题可以从 $ n $ 入手。<br>发现询问不会删除第一列和最后一列，那么最后的结果为合并地图 $ [1, l_i - 1] $ 和 $ [r_i + 1, m] $ 的 $ MST $ 得到的 $ MST $ 大小。所以预处理只要求地图前缀&#x2F;后缀 $ MST $ 即可。<br>考虑如何合并两个相邻的 $ MST $ 。发现合并这两个 $ MST $ 只有最前和最后两列的点会产生连接的关系，所以每个 $ MST $ 只要记录两端的点构成的虚树（虚树边权为两点之间路径的最大值），然后再用 $ Kruskal $ 建最小生成树即可。<br>时间复杂度 $ O(n(m + q) \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20010</span>, M = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> n, m, lim, q;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> SA, SB, SC;</span><br><span class="line"><span class="type">int</span> rht[N][M], dwn[N][M];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y, w;</span><br><span class="line">	<span class="built_in">Edge</span>(<span class="type">int</span> X, <span class="type">int</span> Y, <span class="type">int</span> W) : <span class="built_in">x</span>(X), <span class="built_in">y</span>(Y), <span class="built_in">w</span>(W) &#123;&#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> w &lt; yy.w; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tot, fa[N], flag[N]; vector&lt;Edge&gt; e; ll ad;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>, hed[N], to[N], nxt[N], val[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MST</span> &#123;</span><br><span class="line">	<span class="type">int</span> tot; ll sum; vector&lt;Edge&gt; e; <span class="built_in">MST</span>() &#123;&#125;</span><br><span class="line">	<span class="built_in">MST</span>(<span class="type">int</span> *ar) &#123;</span><br><span class="line">		tot = n, sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) e.<span class="built_in">pb</span>(<span class="built_in">Edge</span>(i, i + <span class="number">1</span>, ar[i]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">qry</span><span class="params">()</span> </span>&#123; ll ss = sum; <span class="keyword">for</span>(<span class="keyword">auto</span> v : e) ss += v.w; <span class="keyword">return</span> ss; &#125;</span><br><span class="line">&#125;; MST pre[N], suf[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	SA ^= SA &lt;&lt; <span class="number">16</span>, SA ^= SA &gt;&gt; <span class="number">5</span>, SA ^= SA &lt;&lt; <span class="number">1</span>; <span class="type">unsigned</span> <span class="type">int</span> t = SA;</span><br><span class="line">	SA = SB, SB = SC, SC ^= t ^ SA; <span class="keyword">return</span> SC % lim + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%u%u%u%d&quot;</span>, &amp;n, &amp;m, &amp;SA, &amp;SB, &amp;SC, &amp;lim);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) rht[j][i] = <span class="built_in">gi</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) dwn[j][i] = <span class="built_in">gi</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lnk</span><span class="params">(<span class="type">const</span> Edge &amp;x)</span> </span>&#123;</span><br><span class="line">	to[++cnt] = x.y, val[cnt] = x.w, nxt[cnt] = hed[x.x], hed[x.x] = cnt;</span><br><span class="line">	to[++cnt] = x.x, val[cnt] = x.w, nxt[cnt] = hed[x.y], hed[x.y] = cnt;</span><br><span class="line">	ad += x.w, fa[<span class="built_in">find</span>(x.x)] = <span class="built_in">find</span>(x.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i]) <span class="keyword">if</span>(to[i] != ff) ss += <span class="built_in">dfs1</span>(to[i], u);</span><br><span class="line">	<span class="keyword">if</span>(ss &gt;= <span class="number">2</span>) flag[u] = <span class="number">1</span>; ss += flag[u]; <span class="keyword">return</span> ss &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, <span class="type">int</span> lst, <span class="type">int</span> ww)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(flag[u]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(lst) e.<span class="built_in">pb</span>(<span class="built_in">Edge</span>(flag[u], lst, ww));</span><br><span class="line">		lst = flag[u], ad -= ww, ww = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = hed[u]; i; i = nxt[i])</span><br><span class="line">		<span class="keyword">if</span>(to[i] != ff) <span class="built_in">dfs2</span>(to[i], u, lst, <span class="built_in">Max</span>(ww, val[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">MST <span class="title">merge</span><span class="params">(<span class="type">const</span> MST &amp;x, <span class="type">const</span> MST &amp;y, <span class="type">int</span> *ar)</span> </span>&#123;</span><br><span class="line">	tot = x.tot + y.tot, e.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : x.e) e.<span class="built_in">pb</span>(v);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : y.e) e.<span class="built_in">pb</span>(<span class="built_in">Edge</span>(v.x + x.tot, v.y + x.tot, v.w));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		e.<span class="built_in">pb</span>(<span class="built_in">Edge</span>(x.tot - n + i, x.tot + i, ar[i]));</span><br><span class="line">	<span class="built_in">sort</span>(e.<span class="built_in">begin</span>(), e.<span class="built_in">end</span>()), cnt = <span class="number">0</span>, ad = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</span><br><span class="line">		fa[i] = i, flag[i] = (i &lt;= n || i &gt; tot - n), hed[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e) <span class="keyword">if</span>(<span class="built_in">find</span>(v.x) != <span class="built_in">find</span>(v.y)) <span class="built_in">lnk</span>(v);</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) <span class="keyword">if</span>(flag[i]) flag[i] = ++cnt;</span><br><span class="line">	e.<span class="built_in">clear</span>(), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	MST res; res.tot = cnt, res.e = e, res.sum = x.sum + y.sum + ad;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gen</span>();</span><br><span class="line">	pre[<span class="number">1</span>] = <span class="built_in">MST</span>(dwn[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; m; i++)</span><br><span class="line">		pre[i] = <span class="built_in">merge</span>(pre[i - <span class="number">1</span>], <span class="built_in">MST</span>(dwn[i]), rht[i - <span class="number">1</span>]);</span><br><span class="line">	suf[m] = <span class="built_in">MST</span>(dwn[m]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = m - <span class="number">1</span>; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">		suf[i] = <span class="built_in">merge</span>(<span class="built_in">MST</span>(dwn[i]), suf[i + <span class="number">1</span>], rht[i]);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> l, r; q; --q) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">merge</span>(suf[r + <span class="number">1</span>], pre[l - <span class="number">1</span>], rht[m]).<span class="built_in">qry</span>());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>虚树</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>PT07D - Let us count 1 2 3</title>
    <url>/2025/07/27/PT07D%20-%20Let%20us%20count%201%202%203/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.spoj.com/problems/PT07D/en/">PT07D - Let us count 1 2 3」PATH</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$ k &#x3D; 1 $ ： 树的 $ Prufer $ 序列个数为 $ n^{n - 2} $ 。<br>$ k &#x3D; 2 $ ： 树的 $ Prufer $ 序列选一个为根， $ n^{n - 1} $ 。<br>$ k &#x3D; 3 $ ：<br>令 $ f_i $ 为节点数为 $ i $ 时无标号有根树的方案数，生成函数为 $ F(x) &#x3D; \sum f_i x^i $ 。<br>考虑到一棵无标号有根树可以看做一个无标号有根森林加一个根组成，而一种大小为 $ k $ 的子树贡献用生成函数表示为 $ \sum x^{ki} &#x3D; (1 - x^k)^{-1} $ ，一共有 $ f_k $ 种，即 $ (1 - x^k)^{-f_k} $ ，则：<br>$$<br>F(x) &#x3D; x \prod_{k &gt; 0} (1 - x^k)^{-f_k}<br>$$<br>两边取 $ \ln $ 并求导得：<br>$$<br>\frac{F’(x)}{F(x)} &#x3D; \frac{1}{x} + \sum_{k &gt; 0} k f_k \frac{x^{k - 1}}{1 - x^k}\\<br>x F’(x) &#x3D; F(x) + (\sum_{k &gt; 0} k f_k \frac{x^{k - 1}}{1 - x^k})F(x)\\<br>n f_n &#x3D; f_n + \sum_{i &gt; 0} f_i \sum_{k | n - i} k f_k<br>$$<br>可以 $ O(n^2) $ 算出 $ f_n $ 。<br>$ k &#x3D; 4 $ ：<br>考虑怎么唯一表示一棵树，我们可以用重心表示，所以把根不是重心的都减去。 一个根不为重心，那么有且仅有一个子树大小大于 $ \frac{n}{2} $ ：<br>$$<br>ans &#x3D; f_n - \sum_{i &#x3D; 1}^{\frac{n}{2}} f_i f_{n - i}\\<br>ans +&#x3D; f_{\frac{n}{2}} f_{\frac{n}{2}} - f_{\frac{n}{2}}(f_{\frac{n}{2}} - 1) &#x2F; 2<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> k, n, p;</span><br><span class="line"><span class="type">int</span> f[<span class="number">10010</span>], g[<span class="number">10010</span>], h[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = p - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> w = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % p) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = w * x % p;</span><br><span class="line">	<span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	f[<span class="number">1</span>] = <span class="number">1</span>; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) g[i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		f[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++) f[i] = (f[i] + f[j] * g[i - j]) % p;</span><br><span class="line">		f[i] = f[i] * <span class="built_in">ksm</span>(i - <span class="number">1</span>, p - <span class="number">2</span>) % p;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = i, t = i * f[i] % p; j &lt;= n; j += i) g[j] = (g[j] + t) % p;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">solve1</span>(); <span class="type">int</span> inv2 = (p + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = (i - <span class="number">1</span>) / <span class="number">2</span>; j; j--) cnt = (cnt + f[j] * f[i - j]) % p;</span><br><span class="line">		<span class="keyword">if</span>(!(i &amp; <span class="number">1</span>)) cnt = (cnt + (ll)f[i / <span class="number">2</span>] * (f[i / <span class="number">2</span>] - <span class="number">1</span>) * inv2 % p) % p;</span><br><span class="line">		h[i] = (f[i] - cnt + p) % p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, h[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;k, &amp;n, &amp;p) != EOF;) &#123;</span><br><span class="line">		<span class="keyword">if</span>(k == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n == <span class="number">1</span> ? <span class="number">1</span> : <span class="built_in">ksm</span>(n % p, n - <span class="number">2</span>));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ksm</span>(n % p, n - <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">3</span>) <span class="built_in">solve1</span>(), <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[n]);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">solve2</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>「SHOI2016」成绩比较</title>
    <url>/2025/07/27/SHOI2016-cheng-ji-bi-jiao/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2026">「SHOI2016」成绩比较</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>设 $ val_i $ 表示第 $ i $ 门课分数分配的方案数。<br>$ f_{i, j} $ 表示前 i 门课 B神 吊打 j 人的方案数。  </p>
<p>$$<br>f_{i, j} &#x3D; \sum_{i &#x3D; j}^{n} f_{i - 1, k} \binom{k}{j}\binom{n - k - 1}{rank_i - 1 - (k - j)}val_i<br>$$</p>
<p>即从原来吊打 k 个人减为 j 个人（k 里选 j 个），再从剩下的人中选一些排在他前面。  </p>
<p>$$<br>val_i &#x3D; \sum_{j &#x3D; 1}^{mx_i} j^{n - rank_i}(mx_i - j)^{rank_i - 1}<br>$$</p>
<p><del>感性理解</del>发现这个式子可以被描述成关于 $ mx_i $ 的 n 次多项式。<br>拉格朗日插值即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, mx[N], rnk[N], pw[N][N];</span><br><span class="line"><span class="type">int</span> f[N][N], c[N][N];</span><br><span class="line"><span class="type">int</span> val[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &lt; y) ? <span class="number">0</span> : c[x][y]; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> w = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="number">1ll</span> * x * x % mod) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="number">1ll</span> * x * w % mod; <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(mx[x] &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, mx[x]) res = (res + <span class="number">1ll</span> * pw[i][n - rnk[x]] * pw[mx[x] - i][rnk[x] - <span class="number">1</span>]) % mod;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line">		val[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, i) val[i] = (val[i] + <span class="number">1ll</span> * pw[j][n - rnk[x]] * pw[i - j][rnk[x] - <span class="number">1</span>]) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="type">int</span> mu1 = <span class="number">1</span>, mu2 = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n + <span class="number">1</span>) <span class="keyword">if</span>(j != i) &#123;</span><br><span class="line">			mu1 = <span class="number">1ll</span> * mu1 * (mod + mx[x] - j) % mod;</span><br><span class="line">			mu2 = <span class="number">1ll</span> * mu2 * (mod + i - j) % mod;</span><br><span class="line">		&#125;</span><br><span class="line">		res = (res + <span class="number">1ll</span> * mu1 * <span class="built_in">ksm</span>(mu2) % mod * val[i]) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	c[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">200</span>) &#123; c[i][<span class="number">0</span>] = <span class="number">1</span>; <span class="built_in">rep</span>(j, <span class="number">1</span>, i) c[i][j] = (c[i - <span class="number">1</span>][j - <span class="number">1</span>] + c[i - <span class="number">1</span>][j]) % mod; &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, <span class="number">200</span>) &#123; pw[i][<span class="number">0</span>] = <span class="number">1</span>; <span class="built_in">rep</span>(j, <span class="number">1</span>, <span class="number">200</span>) pw[i][j] = <span class="number">1ll</span> * pw[i][j - <span class="number">1</span>] * i % mod; &#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;mx[i]);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;rnk[i]);</span><br><span class="line">	f[<span class="number">0</span>][n - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">		<span class="type">int</span> mu = <span class="built_in">solve</span>(i);</span><br><span class="line">		<span class="built_in">rep</span>(j, k, n - <span class="number">1</span>) <span class="built_in">rep</span>(k, j, n - <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="type">int</span> w = <span class="number">1ll</span> * <span class="built_in">C</span>(k, j) * <span class="built_in">C</span>(n - k - <span class="number">1</span>, rnk[i] - <span class="number">1</span> - (k - j)) % mod * f[i - <span class="number">1</span>][k] % mod;</span><br><span class="line">			f[i][j] = (f[i][j] + <span class="number">1ll</span> * mu * w) % mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[m][k]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
        <tag>插值</tag>
      </tags>
  </entry>
  <entry>
    <title>「SNOI2017」遗失的答案</title>
    <url>/2025/07/27/SNOI2017-yi-shi-de-da-an/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2257">「SNOI2017」遗失的答案</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>先判断有无解（ $ L \mod G &#x3D; 0 $ ），然后将 $ n &#x2F;&#x3D; G, L &#x2F;&#x3D; G $ 。<br>由于 $ n \leq 1e8 $ ，所以每个数最多有 $ 8 $ 个不同的质因数。<br>令 $ L &#x3D; p_{1}^{a_1}p_{2}^{a_2} \dots p_{t}^{a_t} $ ，则素数 $ p_i $ 的指数上界为 $ a_i $ 。<br>由题意得对于每个质因数所选的数既有恰好达到上界，由于恰好为下界的。由于状态数为 $ 16 $ ，所以可以状压。<br>可以通过 $ dfs $ 处理出所有 $ x $ 使得 $ x \leq n $ 且 $ x &#x3D; p_{1}^{b_1}p_{2}^{b_2} \dots p_{t}^{b_t} (b_i \leq a_i) $ ，然后将 $ x $ 分类统计。<br>于是问题转化为给出一个集合，求或为全集的方案数。<br>设 $ f_s $ 表示或为 $ s $ 的方案数。<br>设 $ g_s &#x3D; \sum_{i \in s} f_i &#x3D; 2^{cnt_s} - 1 $ 表示或为 $ s $ 子集的方案数。<br>容斥得 $ f_s &#x3D; \sum_{i \in s} (-1)^{|s| - |i|} g_i $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, L, G, m, mx;</span><br><span class="line"><span class="type">int</span> p[<span class="number">20</span>], lp, cnt[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> ba[N], g[N], sz[N];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (ll)x * y % mod; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> state, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(w &gt; n) <span class="keyword">return</span> ; <span class="keyword">if</span>(u &gt; lp) &#123; ++g[state]; <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="built_in">dfs</span>(u + <span class="number">1</span>, state | (<span class="number">1</span> &lt;&lt; u - <span class="number">1</span>), w);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, cnt[u] - <span class="number">1</span>) w *= p[u], <span class="built_in">dfs</span>(u + <span class="number">1</span>, state, w);</span><br><span class="line">	<span class="built_in">dfs</span>(u + <span class="number">1</span>, state | (<span class="number">1</span> &lt;&lt; u + lp - <span class="number">1</span>), w * p[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> state)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, mx) &#123;</span><br><span class="line">		<span class="keyword">if</span>((state &amp; i) != state) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(sz[i] &amp; <span class="number">1</span>) res = <span class="built_in">sub</span>(res, ba[g[i] - <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">else</span> res = <span class="built_in">add</span>(res, ba[g[i] - <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;G, &amp;L, &amp;m);</span><br><span class="line">	<span class="keyword">if</span>(L % G) &#123; <span class="keyword">for</span>(; m; --m, <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>)); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	L /= G, n /= G; ll tt = L;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= tt; i++) <span class="keyword">if</span>(tt % i == <span class="number">0</span>) &#123;</span><br><span class="line">		p[++lp] = i; <span class="keyword">for</span>(; tt % i == <span class="number">0</span>; tt /= i) ++cnt[lp];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tt &gt; <span class="number">1</span>) p[++lp] = tt, ++cnt[lp];</span><br><span class="line">	mx = (<span class="number">1</span> &lt;&lt; lp + lp) - <span class="number">1</span>, <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, lp + lp) <span class="built_in">rep</span>(j, <span class="number">0</span>, mx)</span><br><span class="line">		<span class="keyword">if</span>(j &amp; (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>)) g[j] += g[j ^ (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>)];</span><br><span class="line">	ba[<span class="number">0</span>] = <span class="number">1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, g[mx]) ba[i] = <span class="built_in">add</span>(ba[i - <span class="number">1</span>], ba[i - <span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, mx) sz[i] = sz[i &gt;&gt; <span class="number">1</span>] + (i &amp; <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x; m; --m) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); <span class="keyword">if</span>(x % G) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">		x /= G; <span class="keyword">if</span>(L % x || x &gt; n) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">		<span class="keyword">if</span>(ans.<span class="built_in">find</span>(x) != ans.<span class="built_in">end</span>()) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[x]); <span class="keyword">continue</span>; &#125;</span><br><span class="line">		<span class="type">int</span> state = <span class="number">0</span>, t = <span class="number">0</span>, tmp = x;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lp; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(; x % p[i] == <span class="number">0</span>; x /= p[i], ++t);</span><br><span class="line">			<span class="keyword">if</span>(!t) state |= (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span>(t == cnt[i]) state |= (<span class="number">1</span> &lt;&lt; i + lp - <span class="number">1</span>);</span><br><span class="line">			t = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[tmp] = <span class="built_in">calc</span>(state));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>「THUPC 2017」小 L 的计算题</title>
    <url>/2025/07/27/THUPC-2017-xiao-L-de-ji-suan-ti/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2409">「THUPC 2017」小 L 的计算题」PATH</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$$<br>f(k) &#x3D; \sum_k (\sum_{i &#x3D; 1}^{n} a_i^k) x^k\\<br> &#x3D; \sum_k \sum_{i &#x3D; 1}^{n} (a_ix)^k\\<br> &#x3D; \sum_{i &#x3D; 1}^{n} \sum_k (a_ix)^k\\<br> &#x3D; \sum_{i &#x3D; 1}^{n} \frac{1}{1 - a_ix}\\<br> &#x3D; \sum_{i &#x3D; 1}^{n} (1 - \frac{-a_ix}{1-a_ix})\\<br> &#x3D; n - \sum_{i &#x3D; 1}^{n} \frac{-a_ix}{1-a_ix}\\<br> &#x3D; n - x \sum_{i &#x3D; 1}^{n} \ln’(1 - a_ix)\\<br> &#x3D; n - x \ln’(\prod_{i &#x3D; 1}^{n} (1 - a_ix))<br>$$</p>
<p>分治FFT + 多项式求 Ln 即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> w = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="built_in">mul</span>(w, x); <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> w = <span class="number">1</span>; <span class="keyword">for</span>(; w &lt;= x; w &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> w; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; mid; i++) w[i] = <span class="built_in">mul</span>(w[i - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> mu = <span class="built_in">ksm</span>(lmt), i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], mu);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = a.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(a[<span class="number">0</span>])), res;</span><br><span class="line">		res = <span class="built_in">Inv</span>(a, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(a.begin(), a.begin() + sz)</span></span>;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ln</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; f, g = <span class="built_in">Inv</span>(a); f.<span class="built_in">resize</span>(a.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; f.<span class="built_in">size</span>(); i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, a[i]);</span><br><span class="line">		f[f.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="number">0</span>, f = <span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(a.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = f.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) f[i] = <span class="built_in">mul</span>(f[i - <span class="number">1</span>], <span class="built_in">ksm</span>(i));</span><br><span class="line">		f[<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> f;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> T, n, a[N], ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f, g;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res.<span class="built_in">pb</span>(<span class="built_in">sub</span>(<span class="number">0</span>, a[l])), res;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="keyword">return</span> Poly::<span class="built_in">Mul</span>(<span class="built_in">solve</span>(l, mid), <span class="built_in">solve</span>(mid + <span class="number">1</span>, r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T); T; --T) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); <span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] %= mod;</span><br><span class="line">		f = Poly::<span class="built_in">Ln</span>(<span class="built_in">solve</span>(<span class="number">1</span>, n));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, ed = f.<span class="built_in">size</span>(); i &lt; ed; i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, f[i]);</span><br><span class="line">		<span class="built_in">per</span>(i, n, <span class="number">1</span>) f[i] = f[i - <span class="number">1</span>];</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">0</span>, n) f[i] = <span class="built_in">sub</span>(<span class="number">0</span>, f[i]);</span><br><span class="line">		f[<span class="number">0</span>] = <span class="built_in">add</span>(f[<span class="number">0</span>], n), ans = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, n) ans ^= f[i]; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>【ZJOI2012】小蓝的好友</title>
    <url>/2025/07/27/ZJOI2012-xiao-lan-de-hao-you/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problemnew/show/P2611">【ZJOI2012】小蓝的好友</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>至少包含一个点的矩阵数等于总矩阵数减去不包含任意一个点的矩阵数。<br>考虑将点按照纵坐标排序，进行类似扫描线的操作。每一列有用的点是最靠近当前行的点，记录它们的纵坐标。如果这一层存在一段长度为 $ s $ 不包含点，则它对答案的贡献为 $ \frac{(s + 1) \times s}{2} $ ；如果是纵坐标上一段都满足，那就再乘上纵坐标上的长度。<br>维护一个 $ Treap $ ，$ value $ 值中序遍历表示横坐标的一段，$ key $ 值表示横坐标为该值时纵坐标的最大值。每次一些节点 $ key $ 值会变大，然后用 $ splay $ 的方式旋转满足 $ Treap $ 的性质，同时维护答案。<br>由于数据随机，所以复杂度 $ O(n \log n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">400010</span>;</span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line">ll ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="type">int</span> ch[<span class="number">2</span>][N], sz[N], dep[N], fa[N], tot, rt; ll val[N];</span><br><span class="line"><span class="type">int</span> sta[N], top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!u) <span class="keyword">return</span> ;</span><br><span class="line">	sz[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(ch[<span class="number">0</span>][u]) sz[u] += sz[ch[<span class="number">0</span>][u]]; <span class="keyword">if</span>(ch[<span class="number">1</span>][u]) sz[u] += sz[ch[<span class="number">1</span>][u]];</span><br><span class="line">	sum -= val[u];</span><br><span class="line">	val[u] = (ll)sz[u] * (sz[u] + <span class="number">1</span>) / <span class="number">2</span> * (dep[fa[u]] - dep[u]);</span><br><span class="line">	sum += val[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;u, <span class="type">int</span> ff, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	u = (l + r) &gt;&gt; <span class="number">1</span>, fa[u] = ff;</span><br><span class="line">	<span class="keyword">if</span>(l &lt; u) <span class="built_in">build</span>(ch[<span class="number">0</span>][u], u, l, u - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(u &lt; r) <span class="built_in">build</span>(ch[<span class="number">1</span>][u], u, u + <span class="number">1</span>, r);</span><br><span class="line">	<span class="built_in">update</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	top = <span class="number">0</span>, dep[u] = tot;</span><br><span class="line">	<span class="keyword">for</span>(; dep[u] &gt; dep[fa[u]];) &#123;</span><br><span class="line">		<span class="type">int</span> y = fa[u], z = fa[y], k = ch[<span class="number">1</span>][y] == u, w = ch[k ^ <span class="number">1</span>][u];</span><br><span class="line">		ch[ch[<span class="number">1</span>][z] == y][z] = u; ch[k][y] = w, ch[k ^ <span class="number">1</span>][u] = y;</span><br><span class="line">		fa[w] = y; fa[u] = z, fa[y] = u;</span><br><span class="line">		sta[++top] = y;</span><br><span class="line">	&#125;</span><br><span class="line">	sta[++top] = u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= top; i++) &#123;</span><br><span class="line">		<span class="built_in">update</span>(sta[i]);</span><br><span class="line">		<span class="keyword">if</span>(ch[<span class="number">0</span>][sta[i]]) <span class="built_in">update</span>(ch[<span class="number">0</span>][sta[i]]);</span><br><span class="line">		<span class="keyword">if</span>(ch[<span class="number">1</span>][sta[i]]) <span class="built_in">update</span>(ch[<span class="number">1</span>][sta[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q), <span class="built_in">build</span>(ch[<span class="number">1</span>][rt], <span class="number">0</span>, <span class="number">1</span>, m);</span><br><span class="line">	ans = (ll)n * (n + <span class="number">1</span>) / <span class="number">2</span> * m * (m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= q; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		++tot, ++dep[rt];</span><br><span class="line">		<span class="keyword">if</span>(ch[<span class="number">0</span>][rt]) <span class="built_in">update</span>(ch[<span class="number">0</span>][rt]); <span class="keyword">if</span>(ch[<span class="number">1</span>][rt]) <span class="built_in">update</span>(ch[<span class="number">1</span>][rt]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; e[i].<span class="built_in">size</span>(); j++) <span class="built_in">insert</span>(e[i][j]);</span><br><span class="line">		ans -= sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>笛卡尔树</tag>
      </tags>
  </entry>
  <entry>
    <title>SAM练习题</title>
    <url>/2025/07/27/SAM-lian-xi-ti/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="常用结论："><a href="#常用结论：" class="headerlink" title="常用结论："></a>常用结论：</h3><ol>
<li>字符串border排序后可以分成O(log|s|)段，每段是一个等差数列。  </li>
<li>后缀树的 $ parent $ 树是原串反串的后缀树。</li>
</ol>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SAM</span> &#123;</span><br><span class="line">	<span class="type">int</span> ch[<span class="number">26</span>][N + N], fa[N + N], len[N + N], lst, sz, f[N + N];</span><br><span class="line">	<span class="type">int</span> sa[N + N], tex[N + N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) &#123;</span><br><span class="line">			fa[i] = len[i] = <span class="number">0</span>; <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; <span class="number">26</span>; j++) ch[j][i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		lst = sz = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> p = lst, np = ++sz; lst = np, len[np] = len[p] + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; !ch[c][p]; p = fa[p]) ch[c][p] = np;</span><br><span class="line">		<span class="keyword">if</span>(!p) fa[np] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> q = ch[c][p]; <span class="keyword">if</span>(len[q] == len[p] + <span class="number">1</span>) fa[np] = q;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="type">int</span> nq = ++sz;</span><br><span class="line">				len[nq] = len[p] + <span class="number">1</span>, fa[nq] = fa[q], fa[q] = fa[np] = nq;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) ch[i][nq] = ch[i][q];</span><br><span class="line">				<span class="keyword">for</span>(; ch[c][p] == q; p = fa[p]) ch[c][p] = nq;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) ++tex[len[i]];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) tex[i] += tex[i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sz; i++) sa[tex[len[i]]--] = i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = sz, u; i; i--) u = sa[i], rt[fa[u]] = <span class="built_in">merge</span>(rt[fa[u]], rt[u]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><h4 id="模板-后缀自动机"><a href="#模板-后缀自动机" class="headerlink" title="模板 后缀自动机"></a>模板 后缀自动机</h4><p><a href="https://www.luogu.org/problemnew/show/P3804"> 模板 后缀自动机</a><br>题意：给定一个只包含小写字母的字符串 $ S $ , 请你求出 $ S $ 的所有出现次数不为 $ 1 $ 的子串的出现次数乘上该子串长度的最大值。<br>做法：建后缀自动机，定义每个节点 $ sz[i] &#x3D; 1 $，将所有串的拓扑序得到，从后往前枚举，每次 $ sz[fa[u]] +&#x3D; sz[u], ans &#x3D; Max(ans, len[u] * sz[u]) $。  </p>
<hr>
<h4 id="TJOI2015-弦论"><a href="#TJOI2015-弦论" class="headerlink" title="TJOI2015 弦论"></a>TJOI2015 弦论</h4><p><a href="https://www.luogu.org/problemnew/show/P3975">TJOI2015 弦论</a><br>题意：对于一个给定的长度为 $ n $ 的字符串,求出它的第k小子串是什么。<br>做法：建后缀自动机，定义每个节点 $ sz[i] &#x3D; 1 $，将所有串的拓扑序得到，从后往前枚举，每次 $ sz[fa[u]] +&#x3D; sz[u] (t &#x3D; 1), sz[u] &#x3D; 1 (t &#x3D; 0) $，再从前往后，每次 $ for (j; 0; 26) sum[u] +&#x3D; sum[ch[u][j]] $ ，从根节点按字典序 $ dfs $ ，得到答案。  </p>
<hr>
<h4 id="AHOI2013-差异"><a href="#AHOI2013-差异" class="headerlink" title="AHOI2013 差异"></a>AHOI2013 差异</h4><p><a href="https://www.luogu.org/problemnew/show/P4248">AHOI2013 差异</a><br>题意请看链接。<br>做法：求两个后缀的最长公共前缀，显然就是两个后缀的节点在 $ Parent $ 树上的 $ LCA $ 。以 $ p $ 为儿子的边的边权为 $ len[p]-len[fa[p]] $ ，我们考虑一条边对答案的贡献，显然就是有 $ sz[p] \times (n - sz[p] ) $ 条路径经过这条边，乘上边权加入答案即可。  </p>
<hr>
<h4 id="USACO17DEC-Standing-Out-from-the-Herd"><a href="#USACO17DEC-Standing-Out-from-the-Herd" class="headerlink" title="USACO17DEC Standing Out from the Herd"></a>USACO17DEC Standing Out from the Herd</h4><p><a href="https://www.luogu.org/problemnew/show/P4081">USACO17DEC Standing Out from the Herd</a><br>题意见链接。<br>做法：建出广义后缀自动机，再将每一个字符串每一个位置插入后缀自动机（节点权值加一），最后后缀自动机节点权值为一的点为独特点，它的贡献为它在 $ parent $ 树上的深度减去它的父亲在 $ parent $ 树上的深度。  </p>
<hr>
<h4 id="SCOI2012-喵星球上的点名"><a href="#SCOI2012-喵星球上的点名" class="headerlink" title="SCOI2012 喵星球上的点名"></a>SCOI2012 喵星球上的点名</h4><p><a href="https://www.luogu.org/problemnew/show/P2336">SCOI2012 喵星球上的点名</a><br>建出广义后缀自动机，建出 $ parent $ 树，显然一个串的贡献为它在 $ parent $ 树的子树大小。然后可以莫队处理。  </p>
<hr>
<h4 id="LCS-Longest-Common-Substring"><a href="#LCS-Longest-Common-Substring" class="headerlink" title="LCS - Longest Common Substring"></a>LCS - Longest Common Substring</h4><p><a href="https://www.luogu.org/problemnew/show/SP1811">LCS - Longest Common Substring</a><br>题意：给定两个字符串，求出它们的最长公共子串。<br>做法：给其中一个串建后缀自动机，另一个串分别与其匹配，再过程中对 $ len[u] $ 取 $ Max $ 即可。  </p>
<hr>
<h4 id="ZJOI2015-诸神眷顾的幻想乡"><a href="#ZJOI2015-诸神眷顾的幻想乡" class="headerlink" title="ZJOI2015 诸神眷顾的幻想乡"></a>ZJOI2015 诸神眷顾的幻想乡</h4><p><a href="https://www.luogu.org/problemnew/show/P3346"> ZJOI2015 诸神眷顾的幻想乡</a><br>题意：给出一个字母树，任何一条从叶子开始的有向路径为一个字符串，询问不同的字符串个数。<br>做法：将每个叶子节点定位根 $ dfs $ ，建广义后缀自动机，对于每个节点，对答案的贡献为 $ len[u] - len[fa[u]] $。  </p>
<hr>
<h4 id="CF235C-Cyclical-Quest"><a href="#CF235C-Cyclical-Quest" class="headerlink" title="CF235C Cyclical Quest"></a>CF235C Cyclical Quest</h4><p><a href="http://codeforces.com/problemset/problem/235/C">CF235C Cyclical Quest</a><br>题意：给一个主串和多个询问串，求询问串的所有样子不同的周期同构出现次数和。<br>做法：给主串建后缀自动机，拓扑排序计算主串的某个子串出现次数。对于每个询问，将询问串倍长（最后一个串不复制），然后在自动机上跑，若匹配长度大于等于原询问串长度且是为访问过的状态，则答案加上该子串出现次数。  </p>
<hr>
<h4 id="LCS2-Longest-Common-Substring-II"><a href="#LCS2-Longest-Common-Substring-II" class="headerlink" title="LCS2 - Longest Common Substring II"></a>LCS2 - Longest Common Substring II</h4><p><a href="https://www.spoj.com/problems/LCS2/">LCS2 - Longest Common Substring II</a><br>题意：给定一些字符串，求出它们的最长公共子串。<br>做法：给其中一个串建后缀自动机，其他串分别与其匹配，记录自动机上每个节点能匹配的最长长度，取 $ Max $ 即可。  </p>
<hr>
<h4 id="SDOI2016-生成魔咒"><a href="#SDOI2016-生成魔咒" class="headerlink" title="SDOI2016 生成魔咒"></a>SDOI2016 生成魔咒</h4><p><a href="https://www.luogu.org/problemnew/show/P4070"> SDOI2016 生成魔咒</a><br>题意：每次再字符串末尾新加入一个字符（数字），并求当前字符串中本质不同的字串的的个数。<br>做法：考虑建 $ SAM $ 的过程是在线的，每次增加的贡献为 $len[np] - len[fa[np]]$。  </p>
<hr>
<h4 id="NOI2015-品酒大会"><a href="#NOI2015-品酒大会" class="headerlink" title="NOI2015 品酒大会"></a>NOI2015 品酒大会</h4><p><a href="https://www.luogu.org/problemnew/show/P2178"> NOI2015 品酒大会</a><br><a href="http://uoj.ac/problem/131">强力的HACK数据</a>  </p>
<p>题意： $ \forall i \in [0, n) $ ，求有多少对后缀满足 $ len(lcp) \geq i $ ， 并求出两个后缀的权值乘积的最大值。<br>做法：将串倒着建后缀自动机，使 $ lcs $ 变成 $ lcp $ ，然后构造 $ parent $ 树，便可以从孩子里得到信息，计数问题转移显然。由于数据存在负数，所以可能负负得正得到最优解。记录一个节点子树中最大值、最小值、次大值、次小值，然后转移。当然还有许多细节（交UOJ就知道了）。  </p>
<hr>
<h4 id="「雅礼集训-2017-Day7」事情的相似度"><a href="#「雅礼集训-2017-Day7」事情的相似度" class="headerlink" title="「雅礼集训 2017 Day7」事情的相似度"></a>「雅礼集训 2017 Day7」事情的相似度</h4><p><a href="https://loj.ac/problem/6041">「雅礼集训 2017 Day7」事情的相似度</a><br>题意：给你一个长度为 $ n $ 的01串，$ m $ 次询问，每次询问给出 $ l $ 、$ r $ ，求从 $ [l,r] $ 中选出两个不同的前缀的最长公共后缀长度的最大值。 $ n,m \leq 10^5 $<br>做法：建后缀自动机，那么任意两个前缀的最长公共后缀即为parent树上的LCA深度。将询问离线，按右端点排序，每次加入一个前缀，就将他们在parent树上到根节点的路径打上他们的标记。access时，若遇到了以前打的标记，则该节点为旧标记与新标记的lca。将贡献计入树状数组（维护前缀最大值）并将旧覆盖。  </p>
<hr>
<h4 id="「雅礼集训-2017-Day1」字符串"><a href="#「雅礼集训-2017-Day1」字符串" class="headerlink" title="「雅礼集训 2017 Day1」字符串"></a>「雅礼集训 2017 Day1」字符串</h4><p><a href="https://loj.ac/problem/6031">「雅礼集训 2017 Day1」字符串</a><br>题意：先给你一个模式串，然后再给出若干个询问区间（即接下来询问的子串位置）。接着有q次询问，给出若干个相同长度的字符串以及l, r，让你分别求出第l个询问区间到第r个询问区间在模式串中出现次数之和（下标从0开始计算）。<br>做法：<br>显然的暴力做法是将模式串建后缀自动机后询问无脑匹配。<br>然后这道题很奇怪的一点是询问次数乘上询问串长度不大于100000。<br>假如询问串长度比较小，就用一个二维动态数组存储询问串下标确定时有哪些询问区间编号。每次询问枚举询问串左右下标在自动机上跑判断是否合法，然后在用lower_bound找出用到的询问区间个数，然后询问串长度不大于 $ \sqrt {100000} $ 的就过了，实测至少60分。<br>假如询问很少，我们就对每个询问串，在自动机上跑，预处理每个节点在parent树上的位置及能往前匹配的最长长度，然后暴力枚举用到的询问区间，先判断合法，然后在倍增到这个询问区间的长度，然后就过了。<br>话说这道题可以拆成两部分的性质真的不太明显。</p>
<hr>
]]></content>
      <tags>
        <tag>字符串</tag>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>【UOJ401】【CTSC2018】青蕈领主</title>
    <url>/2025/07/27/UOJ401-CTSC2018-qing-gao-ling-zhu/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://uoj.ac/problem/401">【UOJ401】【CTSC2018】青蕈领主</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>参考自<a href="http://www.cnblogs.com/CHNJZ/p/10554019.html">这篇文章</a>。<br>最长连续序列不能相交，那么只有包含关系。<br>那么我们可以根据区间的包含关系建出一棵以 $ n $ 为根的树，用 $ dis[i] $ 表示节点 $ i $ 的儿子个数。<br>因为连续的区间可以看成一个点，所以每个节点的贡献可以分别考虑。<br>设 $ f[i] $ 为长度为 $ i $ 且有多少个长度为 $ i + 1 $ 的连续序列，删去最大数后不存在长度超过 $ 1 $ 的连续序列，答案为 $ \prod { f[dis[i]] } $ 。<br>若 $ f[i] $ 如果从合法方案转来，只要最后一个数不等于 $ i $ 即可，方案数为 $ (i − 1) \times f[i − 1] $ 。<br>否则，那么不满足的区间只有有一个，长度设为 $ l $ ，把最大值插入形成合法区间的方案数为 $ f[l] $ ,把插入后的区间看成一个点，与剩下的点的方案数为 $ f[i − l] $ ；若要保证有解，那么这个区间的范围一定在 $ [2,i − l] $ ，所以得到：<br>$$ f[i] &#x3D; (i - 1) \times f[i - 1] + \sum_{l &#x3D; 2}^{i - 2}{(i - l - 1) \times f[i]f[i - l]} $$<br>分治 $ FFT $ 即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, ilmt = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++)</span><br><span class="line">				A[i] = <span class="built_in">mul</span>(A[i], ilmt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>), B.<span class="built_in">resize</span>(lmt + <span class="number">5</span>), <span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>;</span><br><span class="line"><span class="type">int</span> T, n;</span><br><span class="line"><span class="type">int</span> a[N], dis[N], sta[N], top = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">		<span class="keyword">if</span>(l == <span class="number">2</span>) f[l] = <span class="number">2</span>; <span class="keyword">else</span> f[l] = <span class="built_in">add</span>(f[l], <span class="built_in">mul</span>(l - <span class="number">1</span>, f[l - <span class="number">1</span>]));</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; G, F; <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">cdq</span>(l, mid);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= r - l + <span class="number">1</span>; i++) F.<span class="built_in">pb</span>(f[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= r - l + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">if</span>(i + l &lt;= mid) G.<span class="built_in">pb</span>(<span class="built_in">mul</span>(f[i + l], i + l - <span class="number">1</span>));</span><br><span class="line">	F = Poly::<span class="built_in">Mul</span>(F, G);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= r; i++) f[i] = <span class="built_in">add</span>(f[i], F[i - l]);</span><br><span class="line">	<span class="keyword">if</span>(l != <span class="number">2</span>) &#123;</span><br><span class="line">		F.<span class="built_in">clear</span>(), G.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= r - l + <span class="number">1</span>; i++) <span class="keyword">if</span>(i + l &lt;= mid) F.<span class="built_in">pb</span>(f[i + l]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= r - l + <span class="number">1</span>; i++)</span><br><span class="line">			<span class="keyword">if</span>(i &lt;= r - l) G.<span class="built_in">pb</span>(<span class="built_in">mul</span>(f[i], i - <span class="number">1</span>));</span><br><span class="line">		F = Poly::<span class="built_in">Mul</span>(F, G);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = mid + <span class="number">1</span>; i &lt;= r; i++) f[i] = <span class="built_in">add</span>(f[i], F[i - l]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cdq</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), dis[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[n] != n) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">1</span>; top = <span class="number">1</span>, sta[<span class="number">1</span>] = n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i; i--) &#123;</span><br><span class="line">		<span class="keyword">for</span>(; i &lt; sta[top] - a[sta[top]] + <span class="number">1</span>; --top);</span><br><span class="line">		<span class="keyword">if</span>(i - a[i] &lt; sta[top] - a[sta[top]]) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> ; &#125;</span><br><span class="line">		++dis[sta[top]], sta[++top] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = <span class="built_in">mul</span>(ans, f[dis[i]]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans); <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;T, &amp;n), f.<span class="built_in">resize</span>(n + <span class="number">1</span>), <span class="built_in">cdq</span>(<span class="number">2</span>, n - <span class="number">1</span>), f[<span class="number">0</span>] = <span class="number">1</span>, f[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(; T; --T) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>一句（dui）话题解1</title>
    <url>/2025/07/27/a-solution-to-a-question1/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />
    <label for="pass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>口胡</tag>
      </tags>
  </entry>
  <entry>
    <title>「ZJOI2015」幻想乡战略游戏</title>
    <url>/2025/07/27/ZJOI2015-huan-xiang-xiang-zhan-lue-you-xi/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/2135">「ZJOI2015」幻想乡战略游戏</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>原问题实则为动态求带权重心问题。设每个点的花费为 $ W_i $ ， 从任意非带权重心一点出发，每次向相邻的点中 $ W_v $ 最小的走，最后会走到带权重心。<br>如果已知 $ W_u $ ，求 $ u $ 的子节点 $ v $ 的 $ W_v $ 。设 $ len(u, v) $ 为 $ u, v $ 间的距离， $ cnt_u $ 为 $ u $ 子树内的军队单位数，则 $ W_v &#x3D; W_u + len(u, v)(cnt_u - cnt_v \times 2) $ 。<br>考虑用点分治加速计算 $ W_u $ 并加速求解。每次向点分树子节点中存在比当前分治重心更优秀的点的子树跳，跳的过程复杂度 $ O(q \log n) $ 。<br>每次每个节点求 $ W_u $ 时间为 $ O(\log n) $ ，总时间复杂度为 $ O(n \log n + q \log^2 n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, m, lg[N];</span><br><span class="line">vector&lt;pii&gt; e[N], E[N];</span><br><span class="line"><span class="type">int</span> dfn[N], dep[N], idx = <span class="number">0</span>, st[<span class="number">18</span>][N]; ll Dep[N];</span><br><span class="line"><span class="type">int</span> sz[N], mx[N], root, size, rt;</span><br><span class="line"><span class="type">bool</span> vis[N]; <span class="type">int</span> fa[N];</span><br><span class="line"><span class="type">int</span> id[N]; ll sum[N], cnt[N];</span><br><span class="line">ll dn[N], up[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	x = dfn[x], y = dfn[y]; <span class="keyword">if</span>(x &gt; y) <span class="built_in">swap</span>(x, y); <span class="type">int</span> k = y - x + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> dep[st[lg[k]][x]] &lt;= dep[st[lg[k]][y - (<span class="number">1</span> &lt;&lt; lg[k]) + <span class="number">1</span>]] ? st[lg[k]][x] : st[lg[k]][y - (<span class="number">1</span> &lt;&lt; lg[k]) + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Dis</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> Dep[x] + Dep[y] - Dep[<span class="built_in">LCA</span>(x, y)] * <span class="number">2</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	dep[u] = dep[ff] + <span class="number">1</span>, dfn[u] = ++idx, st[<span class="number">0</span>][idx] = u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v.fst != ff) Dep[v.fst] = Dep[u] + v.snd, <span class="built_in">dfs1</span>(v.fst, u), st[<span class="number">0</span>][++idx] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getrt</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	sz[u] = <span class="number">1</span>, mx[u] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v.fst != ff &amp;&amp; !vis[v.fst])</span><br><span class="line">		<span class="built_in">getrt</span>(v.fst, u), sz[u] += sz[v.fst], mx[u] = <span class="built_in">max</span>(mx[u], sz[v.fst]);</span><br><span class="line">	mx[u] = <span class="built_in">max</span>(mx[u], size - sz[u]); <span class="keyword">if</span>(mx[u] &lt; mx[root]) root = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">getrt</span>(u, <span class="number">0</span>), vis[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(!vis[v.fst]) &#123;</span><br><span class="line">		mx[root = <span class="number">0</span>] = size = sz[v.fst], <span class="built_in">getrt</span>(v.fst, <span class="number">0</span>);</span><br><span class="line">		E[u].<span class="built_in">pb</span>(<span class="built_in">mp</span>(root, v.fst)), fa[root] = u, <span class="built_in">build</span>(root);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), lg[<span class="number">0</span>] = <span class="number">-1</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, idx) lg[i] = lg[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(j, <span class="number">1</span>, <span class="number">17</span>)</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, idx - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>)</span><br><span class="line">			st[j][i] = dep[st[j - <span class="number">1</span>][i]] &lt;= dep[st[j - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)]] ? st[j - <span class="number">1</span>][i] : st[j - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)];</span><br><span class="line">	mx[root = <span class="number">0</span>] = size = n, <span class="built_in">getrt</span>(<span class="number">1</span>, <span class="number">0</span>), rt = root, <span class="built_in">build</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	cnt[x] += w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x; fa[i]; i = fa[i]) &#123;</span><br><span class="line">		ll dis = <span class="built_in">Dis</span>(fa[i], x); dn[fa[i]] += dis * w, up[i] += dis * w, cnt[fa[i]] += w;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	ll res = dn[x];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x; fa[i]; i = fa[i]) &#123;</span><br><span class="line">		ll dis = <span class="built_in">Dis</span>(fa[i], x); res += dn[fa[i]] - up[i] + dis * (cnt[fa[i]] - cnt[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qry</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	ll res = <span class="built_in">calc</span>(x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : E[x]) <span class="keyword">if</span>(<span class="built_in">calc</span>(v.snd) &lt; res) <span class="keyword">return</span> <span class="built_in">qry</span>(v.fst);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y, z; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z), e[x].<span class="built_in">pb</span>(<span class="built_in">mp</span>(y, z)), e[y].<span class="built_in">pb</span>(<span class="built_in">mp</span>(x, z)); &#125;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x, y; m; --m) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), <span class="built_in">mdy</span>(x, y), <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">qry</span>(rt));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title>【agc023E】Inversions</title>
    <url>/2025/07/27/agc023E-Inversions/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://agc023.contest.atcoder.jp/tasks/agc023_e">【agc023E】Inversions</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p><a href="https://www.cnblogs.com/cjyyb/p/9567855.html">yyb的题解</a>  </p>
<p>考虑计算合法排列的方案数。<br>记 $ cnt[i] &#x3D; \sum [ a_j &gt;&#x3D; i ] $ ，则方案数为 $ tot &#x3D; \prod_{ i &#x3D; 1 }^{ n } (cnt[i] (n - i)) $ 。<br>意思是将数从 n 到 1 填入，对于一个数 i 有 $ cnt[i] $ 个位置可以填，其中 n - i 个位置被占了。显然当方案数为 0 时答案为 0 。  </p>
<p>存在一种比较好写的 $ O(n^2 \log n) $ 的做法。考虑枚举两个位置 $ i, j (i &lt; j) $ ，存在三种情况：  </p>
<ol>
<li>$ a_i &#x3D; a_j $ 。显然如果存在一种方案合法，则这两个位置的数对换也合法，逆序对数为总方案数的一半。  </li>
<li>$ a_i &lt; a_j $ 。显然只有 $ a_j &#x3D; a_i $ 的部分是有用的，即 $ j $ 处方案数为（总方案数 - $ a_j \in [a_i + 1, a_j] $ 的方案数）&#x2F; 2。  </li>
<li>总排列数减不合法，相当于是要求 $ p_i &lt; p_j $ 的方案数。无非是把上面的 $ i, j $ 互换了而已，计算方法还是一样的。</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>, inv2 = (mod + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], cnt[N], tot = <span class="number">1</span>, ans;</span><br><span class="line"><span class="type">int</span> tr[<span class="number">2</span>][N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123;</span><br><span class="line">		tr[<span class="number">0</span>][u] = cnt[l] - (n - l), tr[<span class="number">1</span>][u] = cnt[l] - (n - l + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(u * <span class="number">2</span>, l, mid), <span class="built_in">build</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">	tr[<span class="number">0</span>][u] = <span class="built_in">mul</span>(tr[<span class="number">0</span>][u * <span class="number">2</span>], tr[<span class="number">0</span>][u * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">	tr[<span class="number">1</span>][u] = <span class="built_in">mul</span>(tr[<span class="number">1</span>][u * <span class="number">2</span>], tr[<span class="number">1</span>][u * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> tr[w][u];</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= mid) res = <span class="built_in">mul</span>(res, <span class="built_in">ask</span>(u * <span class="number">2</span>, l, mid, L, R, w));</span><br><span class="line">	<span class="keyword">if</span>(R &gt; mid) res = <span class="built_in">mul</span>(res, <span class="built_in">ask</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, w));</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), ++cnt[a[i]];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--) cnt[i] += cnt[i + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--) tot = <span class="built_in">mul</span>(tot, <span class="built_in">sub</span>(cnt[i], n - i));</span><br><span class="line">	<span class="keyword">if</span>(!tot) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i] == a[j]) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(tot, inv2));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[i] &lt; a[j]) &#123;</span><br><span class="line">			<span class="type">int</span> ss = <span class="built_in">mul</span>(tot, <span class="built_in">ksm</span>(<span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n, a[i] + <span class="number">1</span>, a[j], <span class="number">0</span>)));</span><br><span class="line">			ss = <span class="built_in">mul</span>(ss, <span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n, a[i] + <span class="number">1</span>, a[j], <span class="number">1</span>));</span><br><span class="line">			ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(ss, inv2));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> ss = <span class="built_in">mul</span>(tot, <span class="built_in">ksm</span>(<span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n, a[j] + <span class="number">1</span>, a[i], <span class="number">0</span>)));</span><br><span class="line">			ss = <span class="built_in">mul</span>(ss, <span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">1</span>, n, a[j] + <span class="number">1</span>, a[i], <span class="number">1</span>));</span><br><span class="line">			ss = <span class="built_in">sub</span>(tot, <span class="built_in">mul</span>(ss, inv2)), ans = <span class="built_in">add</span>(ans, ss);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记 $ D[i] &#x3D; \frac{ cnt[j] - 1 - (n - j) }{ cnt[j] - (n - j) } $ 。那么枚举一对 $ i, j $ ，它们的贡献是<br>$$ tot \times \prod_{ k&#x3D;a_i + 1 }^{ a_j } D[k] &#x3D; tot \times \frac{ \prod_{ k &#x3D; 1 }^{ a_j }D[k] }{ \prod_{ k &#x3D; 1 }^{ a_i } D[k] } $$<br>树状数组维护前缀和即可。<br>注意下 $ D[i] $ 可能为 $ 0 $ ，所以求的时候要分段计算一下贡献就好了。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>, inv2 = (mod + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], cnt[N], tot = <span class="number">1</span>, ans;</span><br><span class="line"><span class="type">int</span> tr[<span class="number">2</span>][N], up[N], dn[N], zr[N], idn[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(; x &lt;= n; x += x &amp; -x)</span><br><span class="line">		tr[<span class="number">0</span>][x] = <span class="built_in">add</span>(tr[<span class="number">0</span>][x], w), tr[<span class="number">1</span>][x] = <span class="built_in">add</span>(tr[<span class="number">1</span>][x], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ask</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">0</span>; <span class="keyword">for</span>(; x; x -= x &amp; -x) ss = <span class="built_in">add</span>(ss, tr[w][x]); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), ++cnt[a[i]];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--) cnt[i] += cnt[i + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--)</span><br><span class="line">		tot = <span class="built_in">mul</span>(tot, <span class="built_in">sub</span>(cnt[i], n - i)), cnt[i] -= n - i;</span><br><span class="line">	<span class="keyword">if</span>(!tot) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	up[<span class="number">0</span>] = dn[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		x = <span class="built_in">mul</span>(cnt[i] - <span class="number">1</span>, <span class="built_in">ksm</span>(cnt[i]));</span><br><span class="line">		<span class="keyword">if</span>(!x) zr[i] = zr[i - <span class="number">1</span>] + <span class="number">1</span>, up[zr[i]] = i, dn[i] = dn[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">else</span> zr[i] = zr[i - <span class="number">1</span>], dn[i] = <span class="built_in">mul</span>(dn[i - <span class="number">1</span>], x);</span><br><span class="line">		idn[i] = <span class="built_in">ksm</span>(dn[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		x = <span class="built_in">sub</span>(<span class="built_in">Ask</span>(a[i], <span class="number">0</span>), <span class="built_in">Ask</span>(up[zr[a[i]]] - <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">		x = <span class="built_in">mul</span>(x, <span class="built_in">mul</span>(dn[a[i]], <span class="built_in">mul</span>(tot, inv2)));</span><br><span class="line">		ans = <span class="built_in">add</span>(ans, x);</span><br><span class="line">		<span class="built_in">Add</span>(a[i], idn[a[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) tr[<span class="number">0</span>][i] = tr[<span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n, x; i; i--) &#123;</span><br><span class="line">		x = <span class="built_in">sub</span>(<span class="built_in">Ask</span>(a[i] - <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">Ask</span>(up[zr[a[i]]] - <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">		x = <span class="built_in">mul</span>(x, <span class="built_in">mul</span>(dn[a[i]], <span class="built_in">mul</span>(tot, inv2)));</span><br><span class="line">		ans = <span class="built_in">sub</span>(ans, x);</span><br><span class="line">		ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(<span class="built_in">Ask</span>(a[i] - <span class="number">1</span>, <span class="number">1</span>), tot));</span><br><span class="line">		<span class="built_in">Add</span>(a[i], idn[a[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>codechef-TBGRAPH-题解</title>
    <url>/2025/07/27/codechef-TBGRAPH-ti-jie/</url>
    <content><![CDATA[<p><a href="https://www.codechef.com/problems/TBGRAPH">Graph on a Table</a>  </p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一张 $ n \times m $ 的网格图，每次可以从 $ (x_0, y_0) $ 跳到 $ (x_1, y_1) $ 当且仅当 $ x_0 &lt; x_1 $ 且 $ y_0 &lt; y_1 $ ，同时这两个点都要在同一个给出的矩形中，求最多可以经过多少个网格并求出方案数对 $ 10^9 + 7 $ 取模。  </p>
<span id="more"></span>  

<h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><p>由于要求的是最长路经，所以对于路径相邻的两个位置 $ (x_i, y_i) $ 和 $ (x_{i + 1}, y_{i + 1}) $ 满足 $ x_i + 1 &#x3D; x_{i + 1} $ 或 $ y_i + 1 &#x3D; y_{i + 1} $ 。<br>考虑DP，预处理出每个点可以从那些地方转移( $ Left[i][j] $ 和 $ Up[i][j] $ 分别维护这个点可以转移的最左和最上方的位置 )。<br>然后单调队列优化DP即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a), i##ed = (b); i &lt;= i##ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a), i##ed = (b); i &gt;= i##ed; i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>, M = <span class="number">500010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">file</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;roche.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;roche.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gi</span><span class="params">(<span class="type">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">	x= <span class="number">0</span>; <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">	<span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>;)</span><br><span class="line">		x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> T, n, m, q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y, xx, yy;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> P &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> x &lt; yy.x; &#125;</span><br><span class="line">&#125;; P a[M];</span><br><span class="line"><span class="type">int</span> up[N][N], lt[N][N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">	<span class="type">int</span> len, s; <span class="built_in">Node</span>(<span class="type">int</span> X = <span class="number">0</span>, <span class="type">int</span> Y = <span class="number">0</span>) : <span class="built_in">len</span>(X), <span class="built_in">s</span>(Y) &#123;&#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> len &lt; yy.len; &#125;</span><br><span class="line">&#125;; Node ans, f[N][N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">	Node a[N]; <span class="type">int</span> f, e, s[N], id[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; f = <span class="number">1</span>, e = <span class="number">0</span>; <span class="built_in">rep</span>(i, <span class="number">1</span>, x) s[i] = <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x, Node w)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(; f &lt;= e &amp;&amp; a[e] &lt; w;)</span><br><span class="line">			s[a[e].len] = (s[a[e].len] - a[e].s + mod) % mod, --e;</span><br><span class="line">		s[w.len] = (s[w.len] + w.s) % mod, a[++e] = w, id[e] = x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Node <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(; f &lt;= e &amp;&amp; id[f] &lt; x;)</span><br><span class="line">			s[a[f].len] = (s[a[f].len] - a[f].s + mod) % mod, ++f;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Node</span>(a[f].len + <span class="number">1</span>, s[a[f].len]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; Queue Up[N], Lt[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Node <span class="keyword">operator</span>+(Node x, Node y) &#123;</span><br><span class="line">	<span class="keyword">if</span>(x.len ^ y.len) <span class="keyword">return</span> x.len &gt; y.len ? x : y;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Node</span>(x.len, (x.s + y.s) % mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_up_lt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">rep</span>(j, <span class="number">1</span>, m) up[i][j] = lt[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, q) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(j, a[i].x + <span class="number">1</span>, a[i].xx)</span><br><span class="line">			lt[j][a[i].yy] = <span class="built_in">Min</span>(a[i].y, lt[j][a[i].yy]);</span><br><span class="line">		<span class="built_in">rep</span>(j, a[i].y + <span class="number">1</span>, a[i].yy)</span><br><span class="line">			up[a[i].xx][j] = <span class="built_in">Min</span>(a[i].x, up[a[i].xx][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">per</span>(i, n, <span class="number">1</span>) <span class="built_in">per</span>(j, m, <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(j &lt; m) lt[i][j] = <span class="built_in">Min</span>(lt[i][j + <span class="number">1</span>], lt[i][j]);</span><br><span class="line">			<span class="keyword">if</span>(i &lt; n) up[i][j] = <span class="built_in">Min</span>(up[i + <span class="number">1</span>][j], up[i][j]);</span><br><span class="line">			<span class="keyword">if</span>(lt[i][j] &gt;= j) lt[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">			<span class="keyword">if</span>(up[i][j] &gt;= i) up[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">gi</span>(n), <span class="built_in">gi</span>(m), <span class="built_in">gi</span>(q);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, q) <span class="built_in">gi</span>(a[i].x), <span class="built_in">gi</span>(a[i].y), <span class="built_in">gi</span>(a[i].xx), <span class="built_in">gi</span>(a[i].yy);</span><br><span class="line">	<span class="built_in">get_up_lt</span>();</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) Lt[i].<span class="built_in">init</span>(m); <span class="built_in">rep</span>(i, <span class="number">1</span>, m) Up[i].<span class="built_in">init</span>(n);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">rep</span>(j, <span class="number">1</span>, m) f[i][j] = <span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">rep</span>(j, <span class="number">1</span>, m) &#123;</span><br><span class="line">		Lt[i].<span class="built_in">push</span>(j, f[i][j]), Up[j].<span class="built_in">push</span>(i, f[i][j]);</span><br><span class="line">		<span class="keyword">if</span>(lt[i + <span class="number">1</span>][j + <span class="number">1</span>] != <span class="number">0x3f3f3f3f</span>)</span><br><span class="line">			f[i + <span class="number">1</span>][j + <span class="number">1</span>] = f[i + <span class="number">1</span>][j + <span class="number">1</span>] + Lt[i].<span class="built_in">ask</span>(lt[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">if</span>(up[i + <span class="number">1</span>][j + <span class="number">1</span>] != <span class="number">0x3f3f3f3f</span>)</span><br><span class="line">			f[i + <span class="number">1</span>][j + <span class="number">1</span>] = f[i + <span class="number">1</span>][j + <span class="number">1</span>] + Up[j].<span class="built_in">ask</span>(up[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">if</span>(up[i + <span class="number">1</span>][j + <span class="number">1</span>] != <span class="number">0x3f3f3f3f</span> &amp;&amp; lt[i + <span class="number">1</span>][j + <span class="number">1</span>] != <span class="number">0x3f3f3f3f</span> &amp;&amp;</span><br><span class="line">			f[i][j].len + <span class="number">1</span> == f[i + <span class="number">1</span>][j + <span class="number">1</span>].len)</span><br><span class="line">			f[i + <span class="number">1</span>][j + <span class="number">1</span>].s = (f[i + <span class="number">1</span>][j + <span class="number">1</span>].s - f[i][j].s + mod) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	ans = <span class="built_in">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">rep</span>(j, <span class="number">1</span>, m) ans = ans + f[i][j];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ans.len, ans.s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//	file();</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T); T; --T) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>【CodePlus 2018 4 月赛】组合数问题 2</title>
    <url>/2025/07/27/codeplus-2018-4-yue-sai-zu-he-shu-wen-ti-2/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/6353">【CodePlus 2018 4 月赛】组合数问题 2</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>发现 $ f_k(h) &#x3D; C(k, h) $ 是单峰函数，意味着可以像 <a href="https://www.luogu.org/problemnew/show/P2048">【NOI2010】超级钢琴</a>  一样用优先队列维护当前每个 $ k $ 最大值。<br>发现组合数很大，优先级不容易确定。考虑取组合数的对数，再用对数（ $ \log (a \times b) &#x3D; \log a + \log b $ ）进行比较。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-15</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, k, ans;</span><br><span class="line"><span class="type">int</span> fac[N], ifac[N];</span><br><span class="line"><span class="type">double</span> lg[N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; st[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y; <span class="type">double</span> w;</span><br><span class="line">	<span class="built_in">P</span>(<span class="type">int</span> X = <span class="number">0</span>, <span class="type">int</span> Y = <span class="number">0</span>) : <span class="built_in">x</span>(X), <span class="built_in">y</span>(Y) &#123; w = lg[x] - lg[y] - lg[x - y]; &#125;</span><br><span class="line">	<span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> P &amp;yy)<span class="type">const</span> &#123; <span class="keyword">return</span> w + eps &lt; yy.w; &#125;</span><br><span class="line">&#125;; priority_queue&lt;P&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; y || x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mul</span>(fac[x], <span class="built_in">mul</span>(ifac[y], ifac[x - y]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) lg[i] = <span class="built_in">log</span>(i) + lg[i - <span class="number">1</span>];</span><br><span class="line">	fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = ifac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fac[i] = <span class="built_in">mul</span>(fac[i - <span class="number">1</span>], i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="built_in">mul</span>(mod - mod / i, ifac[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="built_in">mul</span>(ifac[i - <span class="number">1</span>], ifac[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) st[i].<span class="built_in">insert</span>(i / <span class="number">2</span>), q.<span class="built_in">push</span>(<span class="built_in">P</span>(i, i / <span class="number">2</span>));</span><br><span class="line">	<span class="keyword">for</span>(; k; --k) &#123;</span><br><span class="line">		P u = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>(), ans = <span class="built_in">add</span>(ans, <span class="built_in">C</span>(u.x, u.y));</span><br><span class="line">		<span class="keyword">if</span>(u.y &gt; <span class="number">0</span> &amp;&amp; !st[u.x].<span class="built_in">count</span>(u.y - <span class="number">1</span>))</span><br><span class="line">			st[u.x].<span class="built_in">insert</span>(u.y - <span class="number">1</span>), q.<span class="built_in">push</span>(<span class="built_in">P</span>(u.x, u.y - <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">if</span>(u.y &lt; u.x &amp;&amp; !st[u.x].<span class="built_in">count</span>(u.y + <span class="number">1</span>))</span><br><span class="line">			st[u.x].<span class="built_in">insert</span>(u.y + <span class="number">1</span>), q.<span class="built_in">push</span>(<span class="built_in">P</span>(u.x, u.y + <span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title>一句（dui）话题解2</title>
    <url>/2025/07/27/a-solution-to-a-question2/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />
    <label for="pass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>口胡</tag>
      </tags>
  </entry>
  <entry>
    <title>常系数齐次线性递推</title>
    <url>/2025/07/27/chang-xi-shu-qi-ci-xian-xing-di-tui/</url>
    <content><![CDATA[<span id="more"></span>  

<p>建议学习：<a href="https://www.bilibili.com/video/av6731067">&gt; here &lt;</a>  </p>
<p>一个线性变换会使一个向量在方向上发生偏移，但是如果能找到变换后方向不会发生偏移的向量，将其当作基向量，就可以快速计算递推式的任意项。<br>将这种基向量称作特征向量 $ \vec{v} $ ，每次变换后伸长或缩短的倍数称作特征值 $ \lambda $ ，转移矩阵为$ A $，其中 $ A $ 有 $ n $ 列（转移长度为 $ n $）。<br>于是：<br>$$<br>A \vec{v} &#x3D; \lambda \vec{v}\\<br>(\lambda I - A) \vec{v} &#x3D; 0<br>$$</p>
<p>其中 $ \vec{v} $ 取零向量是无意义的。<br>若要使 $ \vec{v} $ 为非零解，则 $ \det(\lambda I - A) &#x3D; 0 $ ，即将空间降维。<br>其中 $ \det(\lambda I - A) &#x3D; 0 $ 是次数为 $ A $ 的列数的特征多项式 $ f(\lambda) $ 。<br>根据<strong>Cayley-Hamilton定理</strong>， $ f(A) &#x3D; 0 $ ，证明莫得<del>感兴趣的话百度一下</del>。<br>转移矩阵大概是长这样的：<br>$$<br>\begin{bmatrix}<br>a_1&amp;a_2&amp;a_3&amp;\dots&amp;a_{n-1}&amp;a_n\\<br>1  &amp;0  &amp;0  &amp;\dots&amp;0&amp;0  \\<br>0  &amp;1  &amp;0  &amp;\dots&amp;0&amp;0  \\<br>\dots&amp;\dots&amp;\dots&amp;\dots&amp;\dots&amp;\dots\\<br>0  &amp;0  &amp;0  &amp;\dots&amp;1&amp;0<br>\end{bmatrix}<br>$$</p>
<p>特征多项式是长这样的：<br>$$<br>\det(\begin{bmatrix}<br>\lambda-a_1&amp;-a_2&amp;-a_3&amp;\dots&amp;-a_{n-1}&amp;-a_n\\<br>-1  &amp;\lambda  &amp;0  &amp;\dots&amp;0&amp;0  \\<br>0  &amp;-1  &amp;\lambda  &amp;\dots&amp;0&amp;0  \\<br>\dots&amp;\dots&amp;\dots&amp;\dots&amp;\dots&amp;\dots\\<br>0  &amp;0  &amp;0  &amp;\dots&amp;-1&amp;\lambda<br>\end{bmatrix})<br>$$</p>
<p>这个东西的行列式可以手算（判断第一行选哪一个）：<br>$$<br>f(\lambda) &#x3D; \lambda^n - \sum_{i &#x3D; 1}^{n}a_i\lambda^{n-i}<br>$$</p>
<p>设初始项 $ H $，求第 $ m $ 项。<br>求 $ (A^{m} \times H)_0 $ 。  </p>
<p>$$<br>\because f(A) &#x3D; 0\\<br>\therefore A^m \bmod f(A) &#x3D; A^m<br>$$</p>
<p>直接多项式快速幂 + 多项式取模计算出 $ A^m \bmod f(A) $ 。<br>设之后得到的多项式<br>$$<br>g(A) &#x3D; \sum_{i &#x3D; 0}^{n - 1} c_i A^i<br>$$</p>
<p>最后求<br>$$<br>\sum_{i &#x3D; 0}^{n - 1} (c_{i} A^{i} H)<em>{0} &#x3D; \sum</em>{i &#x3D; 0}^{n - 1} c_{i} h_{i}<br>$$</p>
<p><del>授之以渔不如授之以鱼</del>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(A[<span class="number">0</span>])), res;</span><br><span class="line">		res = <span class="built_in">Inv</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Div</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B, vector&lt;<span class="type">int</span>&gt; &amp;D, vector&lt;<span class="type">int</span>&gt; &amp;R)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(B.<span class="built_in">size</span>() &gt; A.<span class="built_in">size</span>()) <span class="keyword">return</span> (<span class="type">void</span>)(D.<span class="built_in">clear</span>(), D.<span class="built_in">pb</span>(<span class="number">0</span>), R = A);</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; a = A, b = B, iB; <span class="type">int</span> n = A.<span class="built_in">size</span>(), m = B.<span class="built_in">size</span>();</span><br><span class="line">		<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">		b.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), iB = <span class="built_in">Inv</span>(b, n - m + <span class="number">1</span>);</span><br><span class="line">		D = <span class="built_in">Mul</span>(a, iB), D.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), <span class="built_in">reverse</span>(D.<span class="built_in">begin</span>(), D.<span class="built_in">end</span>());</span><br><span class="line">		R = <span class="built_in">Mul</span>(B, D);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) R[i] = (mod + A[i] - R[i]) % mod;</span><br><span class="line">		R.<span class="built_in">resize</span>(m);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, m, ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f, h, res, b, tmp;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; t = Poly::<span class="built_in">Mul</span>(a, b), r;</span><br><span class="line">	Poly::<span class="built_in">Div</span>(t, f, tmp, r); <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">if</span>(n &lt;= m) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">			<span class="type">int</span> x; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">			<span class="keyword">if</span>(i == n) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (x % mod + mod) % mod); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	f.<span class="built_in">resize</span>(m + <span class="number">1</span>), h.<span class="built_in">resize</span>(m), f[m] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;f[m - i]);</span><br><span class="line">		f[m - i] = ((mod - f[m - i]) % mod + mod) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, m - <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]), h[i] = (h[i] % mod + mod) % mod;</span><br><span class="line">	res.<span class="built_in">pb</span>(<span class="number">1</span>), b.<span class="built_in">pb</span>(<span class="number">0</span>), b.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>, b = <span class="built_in">Mul</span>(b, b)) <span class="keyword">if</span>(n &amp; <span class="number">1</span>) res = <span class="built_in">Mul</span>(res, b);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, m - <span class="number">1</span>) ans = (ans + <span class="number">1ll</span> * res[i] * h[i]) % mod;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>多项式全家桶</title>
    <url>/2025/07/27/duo-xiang-shi-quan-jia-tong/</url>
    <content><![CDATA[<p>默写课文。。。  </p>
<span id="more"></span>  

<h3 id="导数公式："><a href="#导数公式：" class="headerlink" title="导数公式："></a>导数公式：</h3><table>
<thead>
<tr>
<th align="center">原函数</th>
<th align="center">导函数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$ y &#x3D; C(C为常数) $</td>
<td align="center">$ y’ &#x3D; 0 $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; a^x $</td>
<td align="center">$ y’ &#x3D; a^x \ln a $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; e^x $</td>
<td align="center">$ y’ &#x3D; e^x $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; x^n $</td>
<td align="center">$ y’ &#x3D; nx^{n - 1} $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \log_{a}x $</td>
<td align="center">$ y’ &#x3D; \frac{1}{x \ln a} $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \ln x $</td>
<td align="center">$ y’ &#x3D; \frac{1}{x} $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \sin x $</td>
<td align="center">$ y’ &#x3D; \cos x $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \cos x $</td>
<td align="center">$ y’ &#x3D; - \sin x $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; u \pm v $</td>
<td align="center">$ y’ &#x3D; u’ \pm v’ $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; uv $</td>
<td align="center">$ y’ &#x3D; u’v + uv’ $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; \frac{u}{v} $</td>
<td align="center">$ y’ &#x3D; \frac{u’v - uv’}{v^2} $</td>
</tr>
<tr>
<td align="center">$ y &#x3D; f(g(x)) $</td>
<td align="center">$ y’ &#x3D; g’(x)f’(g(x)) $</td>
</tr>
</tbody></table>
<h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x); <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Add</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(Max(a.size(), b.size()))</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &lt; (<span class="type">int</span>)a.<span class="built_in">size</span>()) res[i] = <span class="built_in">add</span>(res[i], a[i]);</span><br><span class="line">			<span class="keyword">if</span>(i &lt; (<span class="type">int</span>)b.<span class="built_in">size</span>()) res[i] = <span class="built_in">add</span>(res[i], b[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(A[<span class="number">0</span>])), res;</span><br><span class="line">		res = <span class="built_in">Inv</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Div</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B, vector&lt;<span class="type">int</span>&gt; &amp;D, vector&lt;<span class="type">int</span>&gt; &amp;R)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(B.<span class="built_in">size</span>() &gt; A.<span class="built_in">size</span>()) <span class="keyword">return</span> (<span class="type">void</span>)(D.<span class="built_in">clear</span>(), D.<span class="built_in">pb</span>(<span class="number">0</span>), R = A);</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; a = A, b = B, iB; <span class="type">int</span> n = A.<span class="built_in">size</span>(), m = B.<span class="built_in">size</span>();</span><br><span class="line">		<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">		b.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), iB = <span class="built_in">Inv</span>(b, n - m + <span class="number">1</span>);</span><br><span class="line">		D = <span class="built_in">Mul</span>(a, iB), D.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), <span class="built_in">reverse</span>(D.<span class="built_in">begin</span>(), D.<span class="built_in">end</span>());</span><br><span class="line">		R = <span class="built_in">Mul</span>(B, D);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) R[i] = (mod + A[i] - R[i]) % mod;</span><br><span class="line">		R.<span class="built_in">resize</span>(m - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ln</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; f, g = <span class="built_in">Inv</span>(A); f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; (<span class="type">int</span>)f.<span class="built_in">size</span>(); i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, A[i]);</span><br><span class="line">		f[f.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="number">0</span>, f = <span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = (<span class="type">int</span>)f.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) f[i] = <span class="built_in">mul</span>(f[i - <span class="number">1</span>], <span class="built_in">ksm</span>(i));</span><br><span class="line">		f[<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> f;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Exp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res;</span><br><span class="line">		res = <span class="built_in">Exp</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>), res.<span class="built_in">resize</span>(sz); vector&lt;<span class="type">int</span>&gt; tmp = <span class="built_in">Ln</span>(res);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)tmp.<span class="built_in">size</span>(); i++) tmp[i] = <span class="built_in">add</span>(<span class="built_in">sub</span>(<span class="number">0</span>, tmp[i]), A[i]);</span><br><span class="line">		tmp[<span class="number">0</span>] = <span class="built_in">add</span>(<span class="number">1</span>, tmp[<span class="number">0</span>]), res = <span class="built_in">Mul</span>(res, tmp);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> <span class="type">int</span> &amp;K)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> sz = A.<span class="built_in">size</span>(), low = <span class="number">0</span>; vector&lt;<span class="type">int</span>&gt; ta, res;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) <span class="keyword">if</span>(A[i]) &#123; low = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = low; i &lt; sz; i++) ta.<span class="built_in">pb</span>(A[i]);</span><br><span class="line">		<span class="type">int</span> mu = ta[<span class="number">0</span>], inv = <span class="built_in">ksm</span>(mu), Mu = <span class="built_in">ksm</span>(mu, K);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * inv % mod;</span><br><span class="line">		ta = <span class="built_in">Ln</span>(ta);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * K % mod;</span><br><span class="line">		ta = <span class="built_in">Exp</span>(ta);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * Mu % mod;</span><br><span class="line">		<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; low; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= K; j++) &#123; ++cnt, res.<span class="built_in">pb</span>(<span class="number">0</span>); <span class="keyword">if</span>(cnt &gt; sz) <span class="keyword">break</span>; &#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) res.<span class="built_in">pb</span>(ta[i]);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;K)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> mu = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)K.<span class="built_in">size</span>(); i++) mu = <span class="built_in">add</span>(<span class="built_in">mul</span>(mu, <span class="number">10</span>), K[i]);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Ksm</span>(A, mu);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Sqrt</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) &#123; <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res; &#125;</span><br><span class="line">		res = <span class="built_in">Sqrt</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>); <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		res.<span class="built_in">resize</span>(sz), tmp = <span class="built_in">Mul</span>(tmp, <span class="built_in">Inv</span>(res));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) res[i] = <span class="number">1ll</span> * (res[i] + tmp[i]) * (mod + <span class="number">1</span>) / <span class="number">2</span> % mod;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; tt[<span class="number">4000010</span>], res;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Evaluate_init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; ttt;</span><br><span class="line">		<span class="keyword">if</span>(l &gt;= r) &#123; ttt.<span class="built_in">pb</span>(mod - a[l]), ttt.<span class="built_in">pb</span>(<span class="number">1</span>); <span class="keyword">return</span> tt[u] = ttt; &#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">Evaluate_init</span>(u * <span class="number">2</span>, l, mid, a), <span class="built_in">Evaluate_init</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, a);</span><br><span class="line">		<span class="keyword">return</span> tt[u] = <span class="built_in">Mul</span>(tt[u * <span class="number">2</span>], tt[u * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Evaluate</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;f, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(r - l + <span class="number">1</span> &lt;= <span class="number">512</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">				<span class="type">int</span> w = <span class="number">1</span>, x = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)f.<span class="built_in">size</span>(); i++) x = <span class="built_in">add</span>(x, <span class="built_in">mul</span>(w, f[i])), w = <span class="built_in">mul</span>(w, a[k]);</span><br><span class="line">				res.<span class="built_in">pb</span>(x);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; vector&lt;<span class="type">int</span>&gt; tmp; <span class="built_in">Div</span>(f, tt[u], tmp, tmp);</span><br><span class="line">		<span class="built_in">Evaluate</span>(u * <span class="number">2</span>, l, mid, tmp, a), <span class="built_in">Evaluate</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, tmp, a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Evaluation</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;f, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">Evaluate_init</span>(<span class="number">1</span>, <span class="number">0</span>, a.<span class="built_in">size</span>() - <span class="number">1</span>, a);</span><br><span class="line">		res.<span class="built_in">clear</span>(), <span class="built_in">Evaluate</span>(<span class="number">1</span>, <span class="number">0</span>, a.<span class="built_in">size</span>() - <span class="number">1</span>, f, a); <span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="NTT（Mul-ntt）"><a href="#NTT（Mul-ntt）" class="headerlink" title="NTT（Mul&amp;ntt）"></a>NTT（Mul&amp;ntt）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">	A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">				<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">				A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">	<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">	<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="牛顿迭代："><a href="#牛顿迭代：" class="headerlink" title="牛顿迭代："></a>牛顿迭代：</h3><p>$$<br>\begin{aligned}<br>\large{F(x) &#x3D; F_0(x) - \frac{G(F_0(x))}{G’(F_0(x))}}\\<br>\large{G(F(x)) &#x3D; 0}\\<br>\large{G’(F(x)) &#x3D; \frac{dG}{dF}}\\<br>\end{aligned}<br>$$</p>
<h4 id="推导："><a href="#推导：" class="headerlink" title="推导："></a>推导：</h4><p>$$<br>\begin{aligned}<br>y &amp;&#x3D; G’(F_0(x))(x - F_0(x)) + G(F_0(x))\\<br>0 &amp;&#x3D; G’(F_0(x))(F(x) - F_0(x)) + G(F_0(x))\\<br>F(x) &amp;&#x3D; F_0(x) - \frac{G(F_0(x))}{G’(F_0(x))}\\<br>\end{aligned}<br>$$</p>
<hr>
<h3 id="求逆（Inv）："><a href="#求逆（Inv）：" class="headerlink" title="求逆（Inv）："></a>求逆（Inv）：</h3><p>$$<br>\begin{aligned}<br>F \times G’ &amp;&#x3D; 1 (\mod x^{\lceil\frac{n}{2}\rceil})\\<br>F \times G &amp;&#x3D; 1 (\mod x^n)\\<br>F(G - G’) &amp;&#x3D; 0 (\mod x^{\lceil\frac{n}{2}\rceil})\\<br>G - G’ &amp;&#x3D; 0 (\mod x^{\lceil\frac{n}{2}\rceil})\\<br>(G - G’)^2 &amp;&#x3D; 0 (\mod x^n)\\<br>G^2 -2GG’ + G’^2 &amp;&#x3D; 0 (\mod x^n)\\<br>F(G^2 -2GG’ + G’^2) &amp;&#x3D; 0 (\mod x^n)\\<br>G &amp;&#x3D; 2G’ - FG’^2 (\mod x^n)\\<br>\end{aligned}<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(A[<span class="number">0</span>])), res;</span><br><span class="line">	res = <span class="built_in">Inv</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">	<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">	<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++)</span><br><span class="line">		res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">	<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="求Ln（Ln）："><a href="#求Ln（Ln）：" class="headerlink" title="求Ln（Ln）："></a>求Ln（Ln）：</h3><p>$$<br>\begin{aligned}<br>\ln’(F(x)) &amp;&#x3D; \frac{F’(x)}{F(x)}\\<br>\ln(F(x)) &amp;&#x3D; \int \ln’(F(x))\\<br>\end{aligned}<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ln</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; f, g = <span class="built_in">Inv</span>(A); f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; f.<span class="built_in">size</span>(); i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, A[i]);</span><br><span class="line">	f[f.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="number">0</span>, f = <span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = f.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) f[i] = <span class="built_in">mul</span>(f[i - <span class="number">1</span>], <span class="built_in">ksm</span>(i));</span><br><span class="line">	f[<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="求Exp（Exp）："><a href="#求Exp（Exp）：" class="headerlink" title="求Exp（Exp）："></a>求Exp（Exp）：</h3><p>$$<br>\begin{aligned}<br>考虑牛顿迭代。\\<br>F(x) &amp;&#x3D; e^{a(x)}, \ln(F(x)) &#x3D; a(x), G(F(x)) &#x3D; ln(F(x)) - a(x) .\\<br>F(x) &amp;&#x3D; F_0(x) - \frac{G(F(x))}{G’(F(x))}\\<br> &amp;&#x3D; F_0(x) - \frac{\ln(F_0(x)) - a(x)}{\frac{1}{F_0(x)}}\\<br> &amp;&#x3D; F_0(x) - F_0(x)(\ln(F_0(x)) - a(x))\\<br> &amp;&#x3D; F_0(x)(1 - \ln(F_0(x)) + a(x))<br>\end{aligned}<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Exp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res;</span><br><span class="line">	res = <span class="built_in">Exp</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>), res.<span class="built_in">resize</span>(sz); vector&lt;<span class="type">int</span>&gt; tmp = <span class="built_in">Ln</span>(res);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); i++) tmp[i] = <span class="built_in">add</span>(<span class="built_in">sub</span>(<span class="number">0</span>, tmp[i]), A[i]);</span><br><span class="line">	tmp[<span class="number">0</span>] = <span class="built_in">add</span>(<span class="number">1</span>, tmp[<span class="number">0</span>]), res = <span class="built_in">Mul</span>(res, tmp);</span><br><span class="line">	<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="多项式快速幂（Ksm）："><a href="#多项式快速幂（Ksm）：" class="headerlink" title="多项式快速幂（Ksm）："></a>多项式快速幂（Ksm）：</h3><p>$$<br>\begin{aligned}<br>(f(x))^{w} &amp;&#x3D; \exp(w\ln(f(x)))<br>\end{aligned}<br>$$</p>
<p>这种做法也可以用来多项式开根。。。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;K)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res = <span class="built_in">Ln</span>(A); <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; K.<span class="built_in">size</span>(); i++) k = <span class="built_in">add</span>(<span class="built_in">mul</span>(k, <span class="number">10</span>), K[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) res[i]= <span class="built_in">mul</span>(res[i], k);</span><br><span class="line">	res = <span class="built_in">Exp</span>(res), res.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()); <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Update:</strong>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> <span class="type">int</span> &amp;K)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> sz = A.<span class="built_in">size</span>(), low = <span class="number">0</span>; vector&lt;<span class="type">int</span>&gt; ta, res;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) <span class="keyword">if</span>(A[i]) &#123; low = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = low; i &lt; sz; i++) ta.<span class="built_in">pb</span>(A[i]);</span><br><span class="line">	<span class="type">int</span> mu = ta[<span class="number">0</span>], inv = <span class="built_in">ksm</span>(mu), Mu = <span class="built_in">ksm</span>(mu, K);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * inv % mod;</span><br><span class="line">	ta = <span class="built_in">Ln</span>(ta);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * K % mod;</span><br><span class="line">	ta = <span class="built_in">Exp</span>(ta);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) ta[i] = <span class="number">1ll</span> * ta[i] * Mu % mod;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; low; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= K; j++) &#123; ++cnt, res.<span class="built_in">pb</span>(<span class="number">0</span>); <span class="keyword">if</span>(cnt &gt; sz) <span class="keyword">break</span>; &#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ta.<span class="built_in">size</span>(); i++) res.<span class="built_in">pb</span>(ta[i]);</span><br><span class="line">	<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;K)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> mu = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)K.<span class="built_in">size</span>(); i++) mu = <span class="built_in">add</span>(<span class="built_in">mul</span>(mu, <span class="number">10</span>), K[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Ksm</span>(A, mu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="开方（Sqrt）："><a href="#开方（Sqrt）：" class="headerlink" title="开方（Sqrt）："></a>开方（Sqrt）：</h3><p>$$<br>\begin{aligned}<br>牛顿迭代。\\<br>G(F(x)) &amp;&#x3D; F^2(x) - a(x) &#x3D; 0\\<br>F(x) &amp;&#x3D; F_0(x) - \frac{G(F_0(x))}{G’(F_0(x))}\\<br> &amp;&#x3D; F_0(x) - \frac{F_0^2(x) - a(x)}{2F_0(x)}\\<br> &amp;&#x3D; \frac{F_0^2(x) + a(x)}{2F_0(x)}\\<br>\end{aligned}<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Sqrt</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) &#123; <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res; &#125;</span><br><span class="line">	res = <span class="built_in">Sqrt</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>); <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">	res.<span class="built_in">resize</span>(sz), tmp = <span class="built_in">Mul</span>(tmp, <span class="built_in">Inv</span>(res));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) res[i] = <span class="number">1ll</span> * (res[i] + tmp[i]) * (mod + <span class="number">1</span>) / <span class="number">2</span> % mod;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>【国家集训队】calc</title>
    <url>/2025/07/27/guo-jia-ji-xun-dui-calc/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.com.cn/problem/P4463">【国家集训队】calc</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$ f_{i, j} $ 表示 <strong>递增</strong> 序列中前 i 个数，最后一个数为 $ \leq j $ 的权值和。 $ f_{i, j} &#x3D; j \times f_{i - 1, j - 1} + f_{i, j - 1} $ 。<br>发现这样做复杂度 $ O(nA) $ ，过不去。<br>将 $ f_{i, j} $ 差分后得 $ g_{i, j} $ ，可以用关于 j 的多项式表示。考虑转移过程，即求前缀和在乘上 j，次数 +2 。<br>由此得证 $ f_{i, j} $ 可以被表示成 2n 次多项式。<br>拉格朗日插值即可，复杂度 $ O(n^2) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> mx, n, p, ans = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> X[N], Y[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = p - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> w = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="number">1ll</span> * x * x % p) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="number">1ll</span> * w * x % p; <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;mx, &amp;n, &amp;p);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) ans = <span class="number">1ll</span> * ans * i % p;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">0</span>, n + n + <span class="number">1</span>) f[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n + n + <span class="number">1</span>) f[i][j] = <span class="number">1ll</span> * f[i - <span class="number">1</span>][j - <span class="number">1</span>] * j % p;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n + n + <span class="number">1</span>) f[i][j] = (f[i][j - <span class="number">1</span>] + f[i][j]) % p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + n + <span class="number">1</span>) X[i] = i, Y[i] = f[n][i];</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n + n + <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="type">int</span> sum1 = Y[i], sum2 = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">rep</span>(j, <span class="number">1</span>, n + n + <span class="number">1</span>) <span class="keyword">if</span>(i != j) &#123;</span><br><span class="line">			sum1 = <span class="number">1ll</span> * sum1 * (mx - X[j] + p) % p;</span><br><span class="line">			sum2 = <span class="number">1ll</span> * sum2 * (X[i] - X[j] + p) % p;</span><br><span class="line">		&#125;</span><br><span class="line">		sum = (sum + <span class="number">1ll</span> * sum1 * <span class="built_in">ksm</span>(sum2) % p) % p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="number">1ll</span> * ans * sum % p);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
        <tag>插值</tag>
      </tags>
  </entry>
  <entry>
    <title>黄金体验</title>
    <url>/2025/07/27/huang-jin-ping-tu/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://cometoj.com/contest/58/problem/F?problem_id=2762">黄金体验</a>  </p>
<h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给出一颗有 $ n $ 个节点的树，每个点有一个初始权值 $ w_i $ ，要求支持两种操作：  </p>
<ol>
<li>给出 $ x $ ，$ y $ ，使点 $ x $ 的权值增加 $ y $。  </li>
<li>给出 $ k $，选定 $ k $ 个点使得包含这 $ k $ 个点的最小联通子图点权和最大，你只需要输出这个最大值。<br>$ n, q \leq 100000, w_i, y \leq 10^9 $</li>
</ol>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>先不考虑修改操作，对于询问操作，当 $ k &#x3D; 1 $ 时为点权最大值，可以直接 $ O(1) $ 维护。当 $ k &#x3D; 2 $ 时，答案为点权最大的一条边（显然是一个叶子连向另一个叶子）；当 $ k $ 更大时，相当于在已有的图上加一条未选过的从叶子上来的权值最大的链。<br>所以可以权值长链剖分，用动态开点线段树维护前 $ k - 1 $ 大的链。<br>考虑加上修改，由于点权只会增大，所以原本的修改点所在的长链依旧是长链，不是长链则可能更新成长链。可能会更新直径（要 $ makeroot $），这部分可以用 $ LCT $ 维护。<br>时间复杂度 $ O(n \log^2 n) $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>; <span class="type">const</span> ll INF = <span class="number">1e15</span>;</span><br><span class="line"><span class="type">int</span> n, rt, m; ll a[N], rtw;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">	multiset&lt;ll&gt; tr;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">const</span> ll &amp;x)</span> </span>&#123; tr.<span class="built_in">erase</span>(tr.<span class="built_in">find</span>(x)); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">const</span> ll &amp;x)</span> </span>&#123; tr.<span class="built_in">insert</span>(x); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">top</span><span class="params">()</span> </span>&#123; <span class="built_in">assert</span>(!tr.<span class="built_in">empty</span>()); <span class="keyword">return</span> *(--tr.<span class="built_in">end</span>()); &#125;</span><br><span class="line">&#125;; Heap hp;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pretree</span> &#123;</span><br><span class="line">	<span class="type">int</span> tot, rt, lf[N * <span class="number">40</span>], rf[N * <span class="number">40</span>], cnt[N * <span class="number">40</span>]; ll s[N * <span class="number">40</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> &amp;u, ll l, ll r, ll x, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!u) u = ++tot; s[u] += x * w, cnt[u] += w; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">		ll mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">		x &lt;= mid ? <span class="built_in">mdy</span>(lf[u], l, mid, x, w) : <span class="built_in">mdy</span>(rf[u], mid + <span class="number">1</span>, r, x, w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ll <span class="title">ask</span><span class="params">(<span class="type">int</span> u, ll l, ll r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(cnt[u] &lt;= k) <span class="keyword">return</span> s[u]; <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> l * k;</span><br><span class="line">		ll mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(cnt[rf[u]] &gt;= k) <span class="keyword">return</span> <span class="built_in">ask</span>(rf[u], mid + <span class="number">1</span>, r, k);</span><br><span class="line">		<span class="keyword">return</span> s[rf[u]] + <span class="built_in">ask</span>(lf[u], l, mid, k - cnt[rf[u]]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; Pretree t;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LCT</span> &#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> lc ch[0][u]</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rc ch[1][u]</span></span><br><span class="line">	<span class="type">int</span> ch[<span class="number">2</span>][N], fa[N], rt; <span class="type">bool</span> lz[N]; <span class="type">int</span> sta[N], top; ll s[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">nroot</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u)</span> </span>&#123; <span class="keyword">return</span> ch[<span class="number">0</span>][fa[u]] == u || ch[<span class="number">1</span>][fa[u]] == u; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rev</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u)</span> </span>&#123; <span class="built_in">swap</span>(lc, rc), lz[u] ^= <span class="number">1</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u)</span> </span>&#123; s[u] = s[lc] + s[rc] + a[u]; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u)</span> </span>&#123; <span class="keyword">if</span>(lz[u]) <span class="built_in">rev</span>(lc), <span class="built_in">rev</span>(rc), lz[u] = <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> y = fa[u], z = fa[y], k = ch[<span class="number">1</span>][y] == u, w = ch[k ^ <span class="number">1</span>][u];</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) ch[ch[<span class="number">1</span>][z] == y][z] = u; ch[k][y] = w, ch[k ^ <span class="number">1</span>][u] = y;</span><br><span class="line">		<span class="keyword">if</span>(w) fa[w] = y; fa[y] = u, fa[u] = z; <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> y = u, z; <span class="keyword">for</span>(sta[top = <span class="number">1</span>] = y; <span class="built_in">nroot</span>(y); sta[++top] = y = fa[y]);</span><br><span class="line">		<span class="keyword">for</span>(; top; <span class="built_in">pushdown</span>(sta[top--]));</span><br><span class="line">		<span class="keyword">for</span>(; <span class="built_in">nroot</span>(u); <span class="built_in">rotate</span>(u)) &#123;</span><br><span class="line">			y = fa[u], z = fa[y];</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) <span class="built_in">rotate</span>((ch[<span class="number">0</span>][z] == y) ^ (ch[<span class="number">0</span>][y] == u) ? u : y);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Link</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">		t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, s[x], <span class="number">-1</span>), t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, s[y], <span class="number">-1</span>);</span><br><span class="line">		t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, s[ch[<span class="number">1</span>][x]], <span class="number">1</span>), ch[<span class="number">1</span>][x] = y, <span class="built_in">pushup</span>(x);</span><br><span class="line">		t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, s[x], <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">splay</span>(rt); <span class="type">int</span> y = u; <span class="keyword">for</span>(; <span class="built_in">nroot</span>(y); y = fa[y]); <span class="built_in">splay</span>(u); <span class="keyword">return</span> y == rt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Right</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="keyword">for</span>(; rc; u = rc); <span class="keyword">return</span> u; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> y = u; <span class="built_in">splay</span>(u), u = fa[u];</span><br><span class="line">		<span class="keyword">for</span>(; u; u = fa[y = u]) &#123;</span><br><span class="line">			<span class="built_in">splay</span>(u);</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">check</span>(u) &amp;&amp; s[lc] &lt; s[rc]) rt = <span class="built_in">Right</span>(u), <span class="built_in">splay</span>(rt), <span class="built_in">rev</span>(rt), <span class="built_in">splay</span>(u);</span><br><span class="line">			<span class="keyword">if</span>(s[rc] &lt; s[y]) <span class="built_in">Link</span>(u, y); <span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">undef</span> lc</span></span><br><span class="line">	<span class="meta">#<span class="keyword">undef</span> rc</span></span><br><span class="line">&#125;; LCT lct;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff, ll d)</span> </span>&#123;</span><br><span class="line">	d += a[u]; <span class="keyword">if</span>(d &gt; rtw) rtw = d, rt = u; <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff) <span class="built_in">dfs</span>(v, u, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	ll d = <span class="number">0</span>; <span class="type">int</span> son = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff) &#123;</span><br><span class="line">		lct.fa[v] = u, <span class="built_in">init</span>(v, u); <span class="keyword">if</span>(lct.s[v] &gt; d) d = lct.s[v], son = v;</span><br><span class="line">	&#125;</span><br><span class="line">	lct.ch[<span class="number">1</span>][u] = son, lct.<span class="built_in">pushup</span>(u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff &amp;&amp; v != son) t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, lct.s[v], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">2</span>, n) &#123; <span class="type">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x); &#125;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]), hp.<span class="built_in">add</span>(a[i]);</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="type">int</span> trt = rt; rt = rtw = <span class="number">0</span>, <span class="built_in">dfs</span>(trt, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">init</span>(trt, <span class="number">0</span>), lct.rt = trt, t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, rtw, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m); m; --m) &#123;</span><br><span class="line">		<span class="type">int</span> opt; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line">		<span class="keyword">if</span>(!opt) &#123;</span><br><span class="line">			<span class="type">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), lct.<span class="built_in">splay</span>(x);</span><br><span class="line">			hp.<span class="built_in">del</span>(a[x]), t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, lct.s[x], <span class="number">-1</span>);</span><br><span class="line">			a[x] += y, lct.<span class="built_in">pushup</span>(x);</span><br><span class="line">			hp.<span class="built_in">add</span>(a[x]), t.<span class="built_in">mdy</span>(t.rt, <span class="number">0</span>, INF, lct.s[x], <span class="number">1</span>);</span><br><span class="line">			lct.<span class="built_in">access</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> k; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">			<span class="keyword">if</span>(k == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, hp.<span class="built_in">top</span>());</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, t.<span class="built_in">ask</span>(t.rt, <span class="number">0</span>, INF, k - <span class="number">1</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FWT</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/07/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<h3 id="Attach-pdf"><a href="#Attach-pdf" class="headerlink" title="Attach pdf"></a>Attach pdf</h3><div class="pdf-container">
  <iframe src="/pdfjs/web/viewer.html?file=/assets/hello-world/readpapers1.pdf" width="100%" height="800px"></iframe>
</div>]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>二次剩余</title>
    <url>/2025/07/27/er-ci-sheng-yu/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="勒让德符号"><a href="#勒让德符号" class="headerlink" title="勒让德符号"></a>勒让德符号</h3><p>$$<br>\large{ \left( \frac{n}{p} \right) &#x3D;<br>\begin{cases}<br>1, &amp;n \text{在模 $ p $ 意义下的二次剩余}\\<br>-1, &amp;n \text{在模 $ p $ 意义下的非二次剩余}\\<br>0, &amp;n \equiv 0 (\bmod p)<br>\end{cases} }<br>$$</p>
<p>即：  </p>
<p>$$<br>\large{ \left( \frac{n}{p} \right) \equiv n^{\frac{p - 1}{2}} (\bmod p) }<br>$$</p>
<h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>$$<br>\large{ n^2 \equiv (p - n)^2 } \\<br>\large{ \text{$ p $ 的二次剩余和二次非剩余的个数均为 $ \frac{p - 1}{2} $ （除 $ 0 $）} }<br>$$</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li>随机找一个 $ \left( \frac{a^2 - n}{p} \right) &#x3D; -1 $ ，令 $ \omega &#x3D; \sqrt{a^2 - n} $ 。  </li>
<li>合法解 $ x \equiv (a + \omega)^{\frac{p + 1}{2}} (\bmod p) $ 。</li>
</ol>
<p>过程中实数运算需要用结构体维护正数部分和根号部分。  </p>
<p>理论可以见 <a href="https://www.cnblogs.com/zwfymqz/p/10605181.html">&gt; here &lt;</a>。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Math &#123;</span><br><span class="line">	<span class="type">int</span> n, p, w; <span class="keyword">struct</span> <span class="title class_">P</span> &#123; <span class="type">int</span> x, y; &#125;;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> P <span class="title">mul</span><span class="params">(<span class="type">const</span> P &amp;x, <span class="type">const</span> P &amp;y, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		P res;</span><br><span class="line">		res.x = (<span class="number">1ll</span> * x.x * y.x + <span class="number">1ll</span> * x.y * y.y % p * w % p) % p;</span><br><span class="line">		res.y = (<span class="number">1ll</span> * x.y * y.x + <span class="number">1ll</span> * x.x * y.y) % p;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> w = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="number">1ll</span> * x * x % p) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="number">1ll</span> * w * x % p;</span><br><span class="line">		<span class="keyword">return</span> w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Pow</span><span class="params">(P x, <span class="type">int</span> y, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		P w = (P)&#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x, p)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) w = <span class="built_in">mul</span>(w, x, p);</span><br><span class="line">		<span class="keyword">return</span> w.x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">		x %= p; <span class="keyword">if</span>(p == <span class="number">2</span>) <span class="keyword">return</span> x;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">ksm</span>(n, (p - <span class="number">1</span>) / <span class="number">2</span>, p) == p - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		<span class="type">int</span> ans;</span><br><span class="line">		<span class="keyword">for</span>(;;) &#123;</span><br><span class="line">			ans = <span class="built_in">rand</span>() % p, w = (<span class="number">1ll</span> * ans * ans % p - x + p) % p;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">ksm</span>(w, (p - <span class="number">1</span>) / <span class="number">2</span>, p) == p - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		P t = (P)&#123;ans, <span class="number">1</span>&#125;; <span class="keyword">return</span> <span class="built_in">Pow</span>(t, (p + <span class="number">1</span>) / <span class="number">2</span>, p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Sqrt</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> pr)</span> </span>&#123; n = x, p = pr; <span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">return</span> <span class="built_in">calc</span>(x, p); &#125;</span><br><span class="line">&#125; <span class="keyword">using</span> Math::Sqrt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>【luogu5245】【模板】多项式快速幂</title>
    <url>/2025/07/27/luogu5245-duo-xiang-shi-kuai-su-mi/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://www.luogu.org/problemnew/show/P5245">【luogu5245】【模板】多项式快速幂</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>这道题直接套快速幂被针对了。。。<br>考虑将多项式求 $ \ln $ 后乘上原指数再 $ \exp $ 回去等同于求幂。<br>直接放多项式全家桶了。。。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">		<span class="keyword">return</span> ss;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt + <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> w0 = <span class="built_in">ksm</span>(opt == <span class="number">1</span> ? <span class="number">3</span> : (mod + <span class="number">1</span>) / <span class="number">3</span>, (mod - <span class="number">1</span>) / mid / <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = <span class="built_in">mul</span>(w[j - <span class="number">1</span>], w0);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					<span class="type">int</span> x = A[j + k], y = <span class="built_in">mul</span>(w[k], A[j + mid + k]);</span><br><span class="line">					A[j + k] = <span class="built_in">add</span>(x, y), A[j + mid + k] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, inv = <span class="built_in">ksm</span>(lmt); i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], inv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Add</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(Max(a.size(), b.size()))</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &lt; a.<span class="built_in">size</span>()) res[i] = <span class="built_in">add</span>(res[i], a[i]);</span><br><span class="line">			<span class="keyword">if</span>(i &lt; b.<span class="built_in">size</span>()) res[i] = <span class="built_in">add</span>(res[i], b[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; A = a, B = b; <span class="type">int</span> lmt = <span class="built_in">Get</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(B, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i] = <span class="built_in">mul</span>(A[i], B[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(A, lmt, <span class="number">-1</span>); <span class="keyword">return</span> A.<span class="built_in">resize</span>(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>), A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Inv</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="built_in">ksm</span>(A[<span class="number">0</span>])), res;</span><br><span class="line">		res = <span class="built_in">Inv</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(sz * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">ntt</span>(tmp, lmt, <span class="number">1</span>), <span class="built_in">ntt</span>(res, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++)</span><br><span class="line">			res[i] = <span class="built_in">mul</span>(<span class="built_in">sub</span>(<span class="number">2</span>, <span class="built_in">mul</span>(res[i], tmp[i])), res[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(res, lmt, <span class="number">-1</span>); <span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Sqrt</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res;</span><br><span class="line">		res = <span class="built_in">Sqrt</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(A.begin(), A.begin() + sz)</span></span>;</span><br><span class="line">		res.<span class="built_in">resize</span>(sz), res = <span class="built_in">Add</span>(res, <span class="built_in">Mul</span>(tmp, <span class="built_in">Inv</span>(res)));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++)</span><br><span class="line">			res[i] = (res[i] &amp; <span class="number">1</span>) ? ((res[i] + mod) / <span class="number">2</span>) : (res[i] / <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Div</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B, vector&lt;<span class="type">int</span>&gt; &amp;D, vector&lt;<span class="type">int</span>&gt; &amp;R)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(B.<span class="built_in">size</span>() &gt; A.<span class="built_in">size</span>()) <span class="keyword">return</span> (<span class="type">void</span>)(D.<span class="built_in">clear</span>(), D.<span class="built_in">pb</span>(<span class="number">0</span>), R = A);</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; a = A, b = B, iB; <span class="type">int</span> n = A.<span class="built_in">size</span>(), m = B.<span class="built_in">size</span>();</span><br><span class="line">		<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">		b.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), iB = <span class="built_in">Inv</span>(b, n - m + <span class="number">1</span>);</span><br><span class="line">		D = <span class="built_in">Mul</span>(a, iB), D.<span class="built_in">resize</span>(n - m + <span class="number">1</span>), <span class="built_in">reverse</span>(D.<span class="built_in">begin</span>(), D.<span class="built_in">end</span>());</span><br><span class="line">		R = <span class="built_in">Mul</span>(B, D);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) R[i] = (mod + A[i] - R[i]) % mod;</span><br><span class="line">		R.<span class="built_in">resize</span>(m - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ln</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; f, g = <span class="built_in">Inv</span>(A); f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; f.<span class="built_in">size</span>(); i++) f[i - <span class="number">1</span>] = <span class="built_in">mul</span>(i, A[i]);</span><br><span class="line">		f[f.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="number">0</span>, f = <span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(A.<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = f.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) f[i] = <span class="built_in">mul</span>(f[i - <span class="number">1</span>], <span class="built_in">ksm</span>(i));</span><br><span class="line">		f[<span class="number">0</span>] = <span class="number">0</span>; <span class="keyword">return</span> f;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Exp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> sz = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sz == <span class="number">-1</span>) sz = A.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res; <span class="keyword">if</span>(sz == <span class="number">1</span>) <span class="keyword">return</span> res.<span class="built_in">pb</span>(<span class="number">1</span>), res;</span><br><span class="line">		res = <span class="built_in">Exp</span>(A, (sz + <span class="number">1</span>) / <span class="number">2</span>), res.<span class="built_in">resize</span>(sz); vector&lt;<span class="type">int</span>&gt; tmp = <span class="built_in">Ln</span>(res);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); i++) tmp[i] = <span class="built_in">add</span>(<span class="built_in">sub</span>(<span class="number">0</span>, tmp[i]), A[i]);</span><br><span class="line">		tmp[<span class="number">0</span>] = <span class="built_in">add</span>(<span class="number">1</span>, tmp[<span class="number">0</span>]), res = <span class="built_in">Mul</span>(res, tmp);</span><br><span class="line">		<span class="keyword">return</span> res.<span class="built_in">resize</span>(sz), res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Ksm</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;K)</span> </span>&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; res = <span class="built_in">Ln</span>(A); <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; K.<span class="built_in">size</span>(); i++) k = <span class="built_in">add</span>(<span class="built_in">mul</span>(k, <span class="number">10</span>), K[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) res[i]= <span class="built_in">mul</span>(res[i], k);</span><br><span class="line">		res = <span class="built_in">Exp</span>(res), res.<span class="built_in">resize</span>(A.<span class="built_in">size</span>()); <span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a, b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>, &amp;n, &amp;s);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, ed = <span class="built_in">strlen</span>(s); i &lt; ed; i++) b.<span class="built_in">pb</span>(s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, x; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), a.<span class="built_in">pb</span>(x);</span><br><span class="line">	a = Poly::<span class="built_in">Ksm</span>(a, b);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]); <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>【Luogu】重返现世</title>
    <url>/2025/07/27/luogu-chong-fan-xian-shi/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h3><p><a href="https://www.luogu.org/problemnew/show/P4707">【Luogu】重返现世</a>  </p>
<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>为了打开返回现世的大门，Yopilla 需要制作开启大门的钥匙。Yopilla 所在的迷失大陆有 $ n $ 种原料，只需要集齐任意 $ k $ 种，就可以开始制作。<br>Yopilla 来到了迷失大陆的核心地域。每个单位时间，这片地域就会随机生成一种原料。每种原料被生成的概率是不同的，第 $ i $ 种原料被生成的概率是 $ \frac{P_i}{m} $ 。如果 Yopilla 没有这种原料，那么就可以进行收集。<br>Yopilla 急于知道，他收集到任意 $ k $ 种原料的期望时间，答案对 $ 998244353 $ 取模。  </p>
<h3 id="做法："><a href="#做法：" class="headerlink" title="做法："></a>做法：</h3><p>根据 $ Kth-MinMax $ 容斥：<br>$$ Kth-MinMax(S) &#x3D; \sum_{T \in S} C(|T| - 1, k - 1) (-1)^{|T| - k} min(T) $$<br>令 $ f[i][j][k] &#x3D; (前i个元素中 \sum P_{a_i} &#x3D; j)\sum_{T} C(|T| - 1, k - 1)(-1)^{|T| - k} $ 。考虑加入一个新元素：<br>不加：$ f[i][j][k] &#x3D; f[i - 1][j][k] $ 。<br>加：<br>$$ f[i][j][k] &#x3D; \sum_{T \in S} C(|T| - 1, k - 1) (-1)^{|T| - k} $$<br>$$ &#x3D; \sum_{T}C(|T|, k - 1)(-1)^{|T| - k + 1} $$<br>$$ &#x3D; \sum_{T}(C(|T| - 1, k - 1) + C(|T - 1|, k - 2))(-1)^{|T| - k + 1} $$<br>$$ &#x3D; \sum_{T}C(|T| - 1, k - 1)(-1)^{|T| - k}(-1) + \sum_{T}C(|T| - 1, k - 2)(-1)^{|T| - k + 1} $$<br>$$ &#x3D; -f[i - 1][j - P_i][k - 1] + f[i - 1][j - P_i][k] $$<br> $ f[i][0][0] &#x3D; 1 $ 。<br> $ dp $ 转移即可（需要滚动数组），最后的 $ f[i][j][k] $ 期望为 $ \frac{m}{j} $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, p[N], ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> fac[N], ifac[N];</span><br><span class="line"><span class="type">int</span> f[<span class="number">2</span>][N * <span class="number">10</span>][N], Now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &lt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mul</span>(fac[x], <span class="built_in">mul</span>(ifac[y], ifac[x - y]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;m), k = n - k + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p[i]);</span><br><span class="line">	fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = ifac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) fac[i] = <span class="built_in">mul</span>(fac[i - <span class="number">1</span>], i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="built_in">mul</span>(mod - mod / i, ifac[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="built_in">mul</span>(ifac[i - <span class="number">1</span>], ifac[i]);</span><br><span class="line">	f[Now][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		Now ^= <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> h = <span class="number">0</span>; h &lt;= k; h++) f[Now][j][h] = f[Now ^ <span class="number">1</span>][j][h];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = p[i]; j &lt;= m; j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> h = <span class="number">1</span>; h &lt;= k; h++) &#123;</span><br><span class="line">				f[Now][j][h] = <span class="built_in">add</span>(f[Now][j][h], f[Now ^ <span class="number">1</span>][j - p[i]][h - <span class="number">1</span>]);</span><br><span class="line">				f[Now][j][h] = <span class="built_in">sub</span>(f[Now][j][h], f[Now ^ <span class="number">1</span>][j - p[i]][h]);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) ans = <span class="built_in">add</span>(ans, <span class="built_in">mul</span>(f[Now][i][k], <span class="built_in">ksm</span>(i)));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">mul</span>(ans, m));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title>有关python环境的一些指南</title>
    <url>/2025/07/27/python-yi-xie-zhi-nan/</url>
    <content><![CDATA[<span id="more"></span>

<p><a href="https://pytorch.org/">&gt; PyTorch &lt;</a></p>
<p>[TOC]</p>
<h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n <span class="variable">$&#123;environment_name&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate <span class="variable">$&#123;environment_name&#125;</span></span><br><span class="line"><span class="comment"># conda deactivate $&#123;environment_name&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="选择python版本"><a href="#选择python版本" class="headerlink" title="选择python版本"></a>选择python版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install python=<span class="variable">$&#123;python_version&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="安装cuda"><a href="#安装cuda" class="headerlink" title="安装cuda"></a>安装cuda</h2><p><a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#ubuntu">&gt; official website &lt;</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install cudatoolkit==<span class="variable">$&#123;cuda_version&#125;</span> -c nvidia</span><br><span class="line">conda install cuda -c nvidia/label/cuda-<span class="variable">$&#123;cuda_version&#125;</span></span><br><span class="line">conda install nvidia::cuda-nvcc <span class="comment"># an alternative way</span></span><br></pre></td></tr></table></figure>

<h2 id="安装PyTorch"><a href="#安装PyTorch" class="headerlink" title="安装PyTorch"></a>安装PyTorch</h2><p><a href="https://pytorch.org/">&gt; PyTorch &lt;</a></p>
<h2 id="This-transaction-has-incompatible-packages-due-to-a-shared-path"><a href="#This-transaction-has-incompatible-packages-due-to-a-shared-path" class="headerlink" title="This transaction has incompatible packages due to a shared path."></a>This transaction has incompatible packages due to a shared path.</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda clean --all</span><br></pre></td></tr></table></figure>

<h2 id="安装torch-scatter"><a href="#安装torch-scatter" class="headerlink" title="安装torch-scatter"></a>安装torch-scatter</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pytorch-scatter -c pyg</span><br></pre></td></tr></table></figure>

<h2 id="查询cuda-memory"><a href="#查询cuda-memory" class="headerlink" title="查询cuda memory"></a>查询cuda memory</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi --query-gpu=memory.total,memory.used --format=csv</span><br></pre></td></tr></table></figure>

<h2 id="检查当前GPU内存占用情况"><a href="#检查当前GPU内存占用情况" class="headerlink" title="检查当前GPU内存占用情况"></a>检查当前GPU内存占用情况</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi --query-compute-apps=pid,name,gpu_bus_id,used_memory --format=csv</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvidia-smi --help-query-compute-apps</span><br><span class="line"></span><br><span class="line">List of valid properties to query <span class="keyword">for</span> the switch <span class="string">&quot;--query-compute-apps&quot;</span>:</span><br><span class="line"></span><br><span class="line">Section about Active Compute Processes properties</span><br><span class="line">List of processes having compute context on the device.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;timestamp&quot;</span></span><br><span class="line">The timestamp of when the query was made <span class="keyword">in</span> format <span class="string">&quot;YYYY/MM/DD HH:MM:SS.msec&quot;</span>.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gpu_name&quot;</span></span><br><span class="line">The official product name of the GPU. This is an alphanumeric string. For all products.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gpu_bus_id&quot;</span></span><br><span class="line">PCI bus <span class="built_in">id</span> as <span class="string">&quot;domain:bus:device.function&quot;</span>, <span class="keyword">in</span> hex.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gpu_serial&quot;</span></span><br><span class="line">This number matches the serial number physically printed on each board. It is a globally unique immutable alphanumeric value.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gpu_uuid&quot;</span></span><br><span class="line">This value is the globally unique immutable alphanumeric identifier of the GPU. It does not correspond to any physical label on the board.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;pid&quot;</span></span><br><span class="line">Process ID of the compute application</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;process_name&quot;</span> or <span class="string">&quot;name&quot;</span></span><br><span class="line">Process Name</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;used_gpu_memory&quot;</span> or <span class="string">&quot;used_memory&quot;</span></span><br><span class="line">Amount memory used on the device by the context. Not available on Windows when running <span class="keyword">in</span> WDDM mode because Windows KMD manages all the memory not NVIDIA driver.</span><br></pre></td></tr></table></figure>

<h1 id="orin安装pytorch"><a href="#orin安装pytorch" class="headerlink" title="orin安装pytorch"></a>orin安装pytorch</h1><h2 id="error-‘class-torch-Library’-has-no-member-named-‘set-python-module’-22"><a href="#error-‘class-torch-Library’-has-no-member-named-‘set-python-module’-22" class="headerlink" title="error: ‘class torch::Library’ has no member named ‘set_python_module’ 22"></a>error: ‘class torch::Library’ has no member named ‘set_python_module’ 22</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pytorch/vision torchvision</span><br><span class="line"><span class="built_in">cd</span> torchvision</span><br><span class="line">git checkout v0.16.0</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="安装timm"><a href="#安装timm" class="headerlink" title="安装timm"></a>安装timm</h2><p><a href="https://blog.csdn.net/zlbbme/article/details/128647059">&gt; link &lt;</a></p>
<p><a href="https://pypi.tuna.tsinghua.edu.cn/simple/timm/">&gt; package &lt;</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget &lt;package&gt;.whl</span><br><span class="line">pip install &lt;package&gt;.whl</span><br></pre></td></tr></table></figure>

<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><h2 id="下载数据集"><a href="#下载数据集" class="headerlink" title="下载数据集"></a>下载数据集</h2><h3 id="用-wget-下载-KITTI-上的数据"><a href="#用-wget-下载-KITTI-上的数据" class="headerlink" title="用 wget 下载 KITTI 上的数据"></a>用 wget 下载 KITTI 上的数据</h3><p>先开代理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -b &lt;<span class="built_in">link</span>&gt;.zip</span><br></pre></td></tr></table></figure>

<p>查看进度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f wget-log</span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip &lt;name&gt;.zip</span><br></pre></td></tr></table></figure>

<h3 id="从drive-google下载"><a href="#从drive-google下载" class="headerlink" title="从drive google下载"></a>从drive google下载</h3><p><a href="https://blog.csdn.net/qq_43235540/article/details/135976536">&gt; link &lt;</a></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="一文解决-RuntimeError-CUDA-out-of-memory-全网最全"><a href="#一文解决-RuntimeError-CUDA-out-of-memory-全网最全" class="headerlink" title="一文解决 RuntimeError: CUDA out of memory. 全网最全"></a>一文解决 RuntimeError: CUDA out of memory. 全网最全</h2><p><a href="https://blog.csdn.net/m0_50502579/article/details/126059178">&gt; link &lt;</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    depth_pred = model(rgb)</span><br></pre></td></tr></table></figure>

<h1 id="Linux的一些操作"><a href="#Linux的一些操作" class="headerlink" title="Linux的一些操作"></a>Linux的一些操作</h1><h2 id="读取当前路径下的文件总大小"><a href="#读取当前路径下的文件总大小" class="headerlink" title="读取当前路径下的文件总大小"></a>读取当前路径下的文件总大小</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>共价大爷游长沙</title>
    <url>/2025/07/27/gong-jia-da-ye-you-chang-sha-ti-jie/</url>
    <content><![CDATA[<p>来自我的口胡记录。  </p>
<p><a href="http://uoj.ac/problem/207">UOJ #207 共价大爷游长沙</a>  </p>
<p><a href="http://matthew99.blog.uoj.ac/blog/1771">官方题解</a>  </p>
<span id="more"></span>  

<p>确实是一道好题，讲详细点。<br>首先有一种显然的暴力，即暴力增加路径、改变路径、查询答案，出题人良心地给了 $ 10 $ 分。<br>若无加减边的操作和删除的操作，那么我们可以维护当前的可行路径，每次可以用 $ O(logn) $ 或者 $ O(1) $ 时间进行树上路径求交以及判断一条边是否在路径上。<br>如果没有加边删边操作，那么我们可以用动态树或者树链剖分等支持链修改单点询问的结构，维护每个点被路径经过的次数，每次看看询问边的两个端点是否都被经过了 $ |S| $ 次。<br>对于 $ |S| \leq 10 $ 的数据，我们可以每次询问的时候进行和算法三类似的操作，每次暴力加入所有路径维护每个点被经过的次数再用同样的方法询问，期望得分 $ 20 $ 分。<br>然后是正解。我们难以维护的是两点之间的动态路径，加减边令人头大。考虑树上差分，在 $ lca $ 处减两倍的值<del>然而动态树并没有lca</del>，考虑异或，异或两个相同的值相当于没操作。如此将端点都异或一个相同的随机数即可，同时统计所有路径的变量也要异或相同的数。 $ LCT $ 维护即可。<br><del>然而我打了代码。</del>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc ch[u][0]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc ch[u][1]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n,m,ans;</span><br><span class="line"><span class="type">int</span> fa[N],ch[N][<span class="number">2</span>],v[N],s[N],sta[N];</span><br><span class="line"><span class="type">bool</span> lz[N];</span><br><span class="line"><span class="type">int</span> tx[N*<span class="number">5</span>],ty[N*<span class="number">5</span>],w[N*<span class="number">5</span>],cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Rand</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (<span class="built_in">rand</span>()&lt;&lt;<span class="number">15</span>)+<span class="built_in">rand</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">nroot</span><span class="params">(<span class="type">const</span> <span class="type">int</span> u)</span> </span>&#123; <span class="keyword">return</span> ch[fa[u]][<span class="number">0</span>]==u||ch[fa[u]][<span class="number">1</span>]==u; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">const</span> <span class="type">int</span> u)</span> </span>&#123; s[u]=s[lc]^s[rc]^v[u]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="keyword">if</span>(lz[u]) <span class="built_in">swap</span>(lc,rc),lz[lc]^=<span class="number">1</span>,lz[rc]^=<span class="number">1</span>,lz[u]=<span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> y=fa[u],z=fa[y],k=ch[y][<span class="number">1</span>]==u,w=ch[u][k^<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) ch[z][ch[z][<span class="number">1</span>]==y]=u; ch[y][k]=w,ch[u][k^<span class="number">1</span>]=y;</span><br><span class="line">    <span class="keyword">if</span>(w) fa[w]=y; fa[y]=u,fa[u]=z;</span><br><span class="line">    <span class="built_in">pushup</span>(y),<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> y=u,z,top=<span class="number">1</span>;sta[top]=y;<span class="keyword">while</span>(<span class="built_in">nroot</span>(y)) sta[++top]=y=fa[y];</span><br><span class="line">    <span class="keyword">while</span>(top) <span class="built_in">pushdown</span>(sta[top--]);</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">nroot</span>(u);<span class="built_in">rotate</span>(u)) &#123;</span><br><span class="line">        y=fa[u],z=fa[y]; <span class="keyword">if</span>(<span class="built_in">nroot</span>(y)) <span class="built_in">rotate</span>((ch[y][<span class="number">0</span>]==u)^(ch[z][<span class="number">0</span>]==y)? u:y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">access</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;u;u=fa[y=u]) <span class="built_in">splay</span>(u),v[u]^=s[rc],rc=y,v[u]^=s[y],<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeroot</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="built_in">access</span>(u),<span class="built_in">splay</span>(u),lz[u]^=<span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123; <span class="built_in">makeroot</span>(x),<span class="built_in">access</span>(y),<span class="built_in">splay</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lnk</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123; <span class="built_in">makeroot</span>(x),<span class="built_in">makeroot</span>(y),fa[x]=y,v[y]^=s[x]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123; <span class="built_in">split</span>(x,y),fa[x]=ch[y][<span class="number">0</span>]=<span class="number">0</span>,<span class="built_in">pushup</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> w)</span> </span>&#123; <span class="built_in">makeroot</span>(x),v[x]^=w,s[x]^=w; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n),<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="built_in">lnk</span>(x,y);</span><br><span class="line">    <span class="type">int</span> opt,x,y;</span><br><span class="line">    <span class="keyword">for</span>(;m;--m) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="built_in">cut</span>(x,y),<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="built_in">lnk</span>(x,y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) &#123;</span><br><span class="line">            ++cnt,<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;tx[cnt],&amp;ty[cnt]),w[cnt]=<span class="built_in">Rand</span>();</span><br><span class="line">            ans^=w[cnt],<span class="built_in">mdy</span>(tx[cnt],w[cnt]),<span class="built_in">mdy</span>(ty[cnt],w[cnt]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x),ans^=w[x],<span class="built_in">mdy</span>(tx[x],w[x]),<span class="built_in">mdy</span>(ty[x],w[x]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="built_in">split</span>(x,y),<span class="built_in">puts</span>((v[y]==ans)? <span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title>基于策略的强化学习</title>
    <url>/2025/07/27/policy-based-reinforcement-learning/</url>
    <content><![CDATA[<p>参考资料：<a href="https://zhuanlan.zhihu.com/p/614115887">Proximal Policy Optimization (PPO) 算法理解：从策略梯度开始</a></p>
<p>如果LaTeX挂了：</p>
<div class="pdf-container">
  <iframe src="/pdfjs/web/viewer.html?file=/assets/policy-based-reinforcement-learning/policy-based-reinforcement-learning.pdf" width="100%" height="800px"></iframe>
</div>

<hr>
<h1 id="传统策略梯度算法"><a href="#传统策略梯度算法" class="headerlink" title="传统策略梯度算法"></a>传统策略梯度算法</h1><h2 id="策略近似"><a href="#策略近似" class="headerlink" title="策略近似"></a>策略近似</h2><p>设$\theta$为神经网络参数，基于策略的强化学习用参数化概率分布$\pi_{\theta}(a | s) &#x3D; P(a | s; \theta)$确定策略，在返回的动作概率列表中对不同的动作进行抽样选择。</p>
<h2 id="定义目标函数"><a href="#定义目标函数" class="headerlink" title="定义目标函数"></a>定义目标函数</h2><p>目标就是找到那些可能获得更多奖励期望值的动作，使它们对应的概率更大，从而策略就更有可能选择这些动作。</p>
<p>定义的最大化目标函数：</p>
<p>$$<br>\max_{\theta} J(\theta) &#x3D; \max_{\theta} E_{\tau \sim \pi_{\theta} } (R(\tau)) &#x3D; \max_{\theta} \sum_{\tau} P(\tau; \theta) R(\tau)<br>$$</p>
<p>其中$\tau$是agent与环境交互产生的状态-动作轨迹$\tau &#x3D; (s_1, a_1, \dots, s_T, a_T)$。我们的目标是通过调整$\theta$，使得获得更大奖励期望的轨迹出现的概率更高。</p>
<p>其中，轨迹$\tau$在策略$\pi_{\theta}(a | s)$下发生的概率为：</p>
<p>$$<br>P(\tau; \theta) &#x3D; \left[ \prod_{t &#x3D; 0}^T P(s_{t + 1} | s_t, a_t) \cdot \pi_{\theta} (a_t | s_t) \right]<br>$$</p>
<p>实际枚举所有可能的轨迹是很困难的，基本都需要通过大量采样得到样本求期望值近似。</p>
<h2 id="策略梯度"><a href="#策略梯度" class="headerlink" title="策略梯度"></a>策略梯度</h2><p>$$<br>\begin{aligned}<br>\nabla_{\theta} J(\theta) &amp;&#x3D; \sum_{\tau} \nabla_{\theta} P(\tau; \theta) \cdot R(\tau) \\<br>&amp;&#x3D; \sum_{\tau} P(\tau; \theta) \frac{\nabla_{\theta} P(\tau; \theta)}{P(\tau; \theta)} R(\tau) \\<br>&amp;&#x3D; \sum_{\tau} P(\tau; \theta) \cdot \nabla_{\theta} \log P(\tau; \theta) \cdot R(\tau)<br>\end{aligned}<br>$$</p>
<p>根据$P(\tau; \theta)$可得：</p>
<p>$$<br>\begin{aligned}<br>\nabla_{\theta} \log P(\tau; \theta) &amp;&#x3D; \nabla_{\theta} \left[ \sum_{t &#x3D; 0}^T \log P(s_{t + 1} | s_t, a_t) + \sum_{t &#x3D; 0}^T \log \pi_{\theta} (a_t | s_t) \right] \\<br>&amp;&#x3D; \sum_{t &#x3D; 0}^T \nabla_{\theta} \log \pi_{\theta} (a_t | s_t)<br>\end{aligned}<br>$$</p>
<p>假设当前有$m$条轨迹的样本：</p>
<p>$$<br>\begin{aligned}<br>\nabla_{\theta} J(\theta) &amp;\approx \frac{1}{m} \sum_{i &#x3D; 1}^{m} \nabla_{\theta} \log P(\tau^{(i)}; \theta) \cdot R(\tau^{(i)}) \\<br>&amp;&#x3D; \frac{1}{m} \sum_{i &#x3D; 1}^{m} \left[ \sum_{t^{(i)} &#x3D; 0}^{T^{(i)}} \nabla_{\theta} \log \pi_{\theta} (a_{t^{(i)}} | s_{t^{(i)}}) \right] \cdot R(\tau^{(i)}) \\<br>&amp;&#x3D; \frac{1}{n} \sum_{i &#x3D; 1}^{n} \nabla_{\theta} \log \pi_{\theta} (a_i | s_i) \cdot R(\tau_i) \quad \left( n &#x3D; \sum_{i &#x3D; 1}^{m} (T^{(i)} + 1) \right)<br>\end{aligned}<br>$$</p>
<p>策略梯度的更新规则：</p>
<p>$$<br>\theta \leftarrow \theta + \alpha \cdot \nabla_{\theta} J(\theta)<br>$$</p>
<h3 id="Softmax策略"><a href="#Softmax策略" class="headerlink" title="Softmax策略"></a>Softmax策略</h3><p>对于离散动作空间：</p>
<p>$$<br>\pi_{\theta}(a | s) &#x3D; \frac{e^{\phi(s, a)^T \theta}}{\sum_{a’ \in A} e^{\phi(s, a’)^T \theta}}<br>$$</p>
<p>对应的策略梯度：</p>
<p>$$<br>\begin{aligned}<br>&amp;\quad \nabla_{\theta} \log \pi_{\theta}(a | s) \\<br>&amp;&#x3D; \nabla_{\theta} \left(\phi(s, a)^T \theta -  \log \sum_{a’ \in A} e^{\phi(s, a’)^T \theta} \right) \\<br>&amp;&#x3D; \phi(s, a) - \frac{\sum_{a’ \in A} \phi(s, a’) \cdot e^{\phi(s, a’)^T \theta}}{\sum_{a’ \in A} e^{\phi(s, a’)^T \theta}} \\<br>&amp;&#x3D; \phi(s, a) - \sum_{a’ \in A} \phi(s, a’) \cdot \pi_{\theta}(a’ | s)<br>\end{aligned}<br>$$</p>
<p>如果奖励信号很高并且观察到的向量与平均向量相差很大，就会有增加该动作概率的强烈趋势。</p>
<h3 id="高斯策略"><a href="#高斯策略" class="headerlink" title="高斯策略"></a>高斯策略</h3><p>对于连续动作空间：</p>
<p>$$<br>\pi_{\theta}(a | s) &#x3D; \frac{1}{\sqrt{2 \pi} \sigma_{\theta}} e^{- \frac{(a - \mu_{\theta})^2}{2 \sigma_{\theta}^2}}<br>$$</p>
<p>其中正态分布的均值$\mu_{\theta} &#x3D; \phi(s, a)^T \theta$。</p>
<p>对应的策略梯度：</p>
<p>$$<br>\begin{aligned}<br>&amp;\quad \nabla_{\theta} \log \pi_{\theta}(a | s) \\<br>&amp;&#x3D; \nabla_{\theta} \left(-\frac{1}{2} \cdot \log (2 \pi \sigma_{\theta}^2) - \frac{(a -\mu_{\theta})^2}{2 \sigma_{\theta}^2} \right) \\<br>&amp;&#x3D; \frac{(a - \mu_{\theta})\phi(s, a)}{\sigma_{\theta}^2}<br>\end{aligned}<br>$$</p>
<p>在高回报的情况下，远离均值的动作会触发强烈的更新信号。</p>
<p>在实际任务中，我们没有必要手动计算偏导数，使用深度学习框架的自动求导。定义损失函数：</p>
<p>$$<br>\mathcal{L}(a, s, r) &#x3D; -\log(\pi_\theta(a | s)) r<br>$$</p>
<p>即可让计算机自动求导。</p>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Network: theta := R^(|theta|)</span><br><span class="line">for n = 1 to N:</span><br><span class="line">    tau &lt;- pi(theta)</span><br><span class="line">    for t = 1 to T:</span><br><span class="line">        R(tau | t) = R[t] + R[t + 1] + ... + R[T]</span><br><span class="line">        theta &lt;- theta - alpha * R(tau | t) * grad(theta, pi(theta, a | s))</span><br></pre></td></tr></table></figure>

<p>这里对于一条路径，将路径上每一个状态都进行了计算，对信息的利用最大化。</p>
<h1 id="自然策略梯度算法"><a href="#自然策略梯度算法" class="headerlink" title="自然策略梯度算法"></a>自然策略梯度算法</h1><h2 id="传统策略梯度算法的缺陷"><a href="#传统策略梯度算法的缺陷" class="headerlink" title="传统策略梯度算法的缺陷"></a>传统策略梯度算法的缺陷</h2><p>在传统的策略梯度算法中，权重更新会遇到两个问题：</p>
<ul>
<li>过冲（Overshooting）: 更新错过了奖励峰值并落入了次优策略区域</li>
<li>下冲（Undershooting）: 在梯度方向上采取过小的更新步长会导致收敛缓慢</li>
</ul>
<p>在监督学习问题中，overshooting不是什么问题，因为数据是固定的，我们可以在下一个epoch中重新纠正；但在强化学习问题中，如果因为overshooting陷入了一个较差的策略区域，则未来的样本批次可能不会提供太多有意义的信息，用较差的数据样本再去更新策略，从而陷入了糟糕的正反馈中无法恢复。较小的学习率可能会解决这个问题，但会导致收敛速度变慢的undershooting问题。</p>
<h2 id="限制策略更新的差异"><a href="#限制策略更新的差异" class="headerlink" title="限制策略更新的差异"></a>限制策略更新的差异</h2><p>我们需要表示策略（分布）之间的差异，而不是参数本身的差异。计算两个概率分布之间的差异，最常见的是KL散度，也称为相对熵，描述了两个概率分布之间的距离：</p>
<p>$$<br>\mathcal{D}<em>{KL}(\pi</em>{\theta} || \pi_{\theta + \Delta \theta}) &#x3D; \sum_{x \in \Chi} \pi_{\theta}(x) \log \left( \frac{\pi_{\theta}(x)}{\pi_{\theta + \Delta \theta}(x)} \right)<br>$$</p>
<p>调整后的策略更新限制为：</p>
<p>$$<br>\Delta \theta^{*} &#x3D; \argmax_{\Delta \theta, \mathcal{D}<em>{KL}(\pi</em>{\theta} || \pi_{\theta + \Delta \theta}) \le \epsilon} J(\theta + \Delta \theta)<br>$$</p>
<p>然而，计算KL散度需要遍历所有的状态-动作对，因此我们需要一些化简来处理现实的RL问题。</p>
<p>首先，我们使用拉格朗日松弛将原表达式的发散约束转化为惩罚项，得到一个更容易求解的表达式：</p>
<p>$$<br>\Delta \theta^{*} &#x3D; \argmax_{\Delta \theta} J(\theta + \Delta \theta) - \lambda(\mathcal{D}<em>{KL}(\pi</em>{\theta} || \pi_{\theta + \Delta \theta}) - \epsilon)<br>$$</p>
<p>用近似方法来化简。通过泰勒展开：</p>
<p>$$<br>\begin{aligned}<br>\Delta \theta^{*} &amp;\approx \argmax_{\Delta \theta} J(\theta) + \nabla_{\theta} J(\theta) \cdot \Delta \theta - \frac{1}{2} \lambda (\Delta \theta^{T} F(\theta) \Delta \theta) + \lambda \epsilon \\<br>&amp;\approx \argmax_{\Delta \theta} \nabla_{\theta} J(\theta) \cdot \Delta \theta - \frac{1}{2} \lambda (\Delta \theta^{T} F(\theta) \Delta \theta) \\<br>F(\theta) &amp;&#x3D; \mathbb{E}<em>{\theta} [ \nabla</em>{\theta} \log \pi_{\theta}(x) \nabla_{\theta} \log \pi_{\theta}(x)^{T} ]<br>\end{aligned}<br>$$</p>
<p>KL散度近似于二阶泰勒展开。用Fisher信息矩阵代替二阶导数，除了符号紧凑性外，还可以大大减少计算开销。</p>
<h2 id="解决KL约束问题"><a href="#解决KL约束问题" class="headerlink" title="解决KL约束问题"></a>解决KL约束问题</h2><p>对于近似简化后的表达式，可以通过将关于$\Delta \theta$的梯度设置为0，来找到最优的权重更新$\Delta \theta$：</p>
<p>$$<br>\begin{aligned}<br>0 &amp;&#x3D; \frac{\partial}{\partial \Delta \theta} \left( \nabla_{\theta} J(\theta) \Delta \theta - \frac{1}{2} \lambda \Delta \theta^{T} F(\theta) \Delta \theta \right) \\<br>&amp;&#x3D; \nabla_{\theta} J(\theta) - \frac{1}{2} \lambda F(\theta) \Delta \theta \\<br>\Delta \theta &amp;&#x3D; - \frac{2}{\lambda} F(\theta)^{-1} \nabla_{\theta} J(\theta)<br>\end{aligned}<br>$$</p>
<p>其中，$\lambda$是一个常数，可以吸收到学习率$\alpha$中。根据$\mathcal{D}<em>{KL}(\pi</em>{\theta} || \pi_{\theta + \Delta \theta}) \le \epsilon$，我们可以推出动态学习率：</p>
<p>$$<br>\alpha &#x3D; \sqrt{\frac{2 \epsilon}{\nabla J(\theta)^T} F(\theta)^{-1} \nabla J(\theta)}<br>$$</p>
<p>可以确保每次更新的KL散度（近似）等于$\epsilon$。</p>
<p>自然策略梯度：</p>
<p>$$<br>\tilde{\nabla} J(\theta) &#x3D; F(\theta)^{-1} \nabla J(\theta)<br>$$</p>
<p>最终的权重更新方案为：</p>
<p>$$<br>\Delta \theta &#x3D; \sqrt{\frac{2 \epsilon }{\nabla J(\theta)^T F(\theta)^{-1} \nabla J(\theta)}} \tilde{\nabla} J(\theta)<br>$$</p>
<p>该方案的强大之处在于，无论分布的表示如何，它总是以相同的幅度改变策略。</p>
<h1 id="信赖域策略优化算法（TRPO）"><a href="#信赖域策略优化算法（TRPO）" class="headerlink" title="信赖域策略优化算法（TRPO）"></a>信赖域策略优化算法（TRPO）</h1><h2 id="自然策略梯度算法的缺陷"><a href="#自然策略梯度算法的缺陷" class="headerlink" title="自然策略梯度算法的缺陷"></a>自然策略梯度算法的缺陷</h2><ul>
<li>近似值可能会违反KL约束，从而导致分析得出的步长过大，超出限制要求</li>
<li>矩阵$F$的计算时间太长，是$O(N^3)$复杂度的运算</li>
<li>我们没有检查更新是否真的改进了策略。由于存在大量的近似过程，策略可能并没有优化</li>
</ul>
<h2 id="算法理论"><a href="#算法理论" class="headerlink" title="算法理论"></a>算法理论</h2><p>针对自然策略梯度算法的问题，我们希望可以对策略的优化进行量化，从而保证每次的更新一定是优化作用的。为此，我们需要计算两种策略之间预期回报的差异。这里采用的是原策略预期回报添加新策略预期优势的方式。该表达式在原策略下计算优势函数，无需重新采样：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) &#x3D; J(\pi_{\theta}) + \mathbb{E}<em>{\tau \sim \pi</em>{\theta + \Delta \theta}} \sum_{t &#x3D; 0}^{\infin} \gamma^{t} A^{\pi_{\theta}}(s_t, a_t)<br>$$</p>
<p>其中优势函数的定义为：</p>
<p>$$<br>A^{\pi_{\theta}}(s, a) &#x3D; \mathbb{E}(Q^{\pi_{\theta}}(s, a) - V^{\pi_{\theta}}(s))<br>$$</p>
<p>由于时间范围是无限的，引入状态的折扣分布：</p>
<p>$$<br>\rho_{\pi}(s) &#x3D; \sum_{k &#x3D; 0}^{\infin} \gamma^{k} P(s_k &#x3D; s)<br>$$</p>
<p>原差异表达式可重新表示为：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) &#x3D; J(\pi_{\theta}) + \sum_{s \in \mathcal{S}} \rho_{\pi_{\theta + \Delta \theta}}(s) \sum_{a \in \mathcal{A}} \pi_{\theta + \Delta \theta}(a | s) A^{\pi_{\theta}}(s, a)<br>$$</p>
<p>引入近似误差，使用当前策略近似：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) \approx J(\pi_{\theta}) + \sum_{s \in \mathcal{S}} \rho_{\pi_{\theta}}(s) \sum_{a \in \mathcal{A}} \pi_{\theta + \Delta \theta}(a | s) A^{\pi_{\theta}}(s, a)<br>$$</p>
<p>将状态分布求和替换为期望，方便实际计算时使用蒙特卡洛模拟进行采样，同时将动作求和替换为<a href="https://zhuanlan.zhihu.com/p/41217212">重要性采样</a>。通过重要性采样，可以有效利用当前策略的行动期望，并针对新策略下的概率进行了修正：</p>
<p>$$<br>\begin{aligned}<br>J(\pi_{\theta + \Delta \theta}) &amp;&#x3D; J(\pi_{\theta}) + \sum_{s \in \mathcal{S}} \rho_{\pi_{\theta + \Delta \theta}}(s) \sum_{a \in \mathcal{A}} \pi_{\theta + \Delta \theta}(a | s) A^{\pi_{\theta}}(s, a) \\<br>&amp;&#x3D; J(\pi_{\theta}) + \mathbb{E}<em>{s \sim \rho</em>{\pi_{\theta + \Delta \theta}}} \pi_{\theta + \Delta \theta}(a | s) A^{\pi_{\theta}}(s, a) \\<br>&amp;\approx J(\pi_{\theta}) + \mathbb{E}<em>{s \sim \rho</em>{\pi_{\theta}}} \frac{\pi_{\theta + \Delta \theta}(a | s)}{\pi_{\theta}(a | s)} A^{\pi_{\theta}}(s, a)<br>\end{aligned}<br>$$</p>
<p>描述更新策略相对于原策略的预期优势称为替代优势：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) - J(\pi_{\theta}) \approx \mathbb{E}<em>{s \sim \rho</em>{\pi_{\theta}}} \frac{\pi_{\theta + \Delta \theta}(a | s)}{\pi_{\theta}(a | s)} A^{\pi_{\theta}}(s, a) &#x3D; \mathcal{L}<em>{\pi</em>{\theta}}(\pi_{\theta + \Delta \theta})<br>$$</p>
<p>之前产生的近似误差可以用两种策略之间最坏情况的KL散度表示：</p>
<p>$$<br>J(\pi_{\theta + \Delta \theta}) - J(\pi_{\theta}) \ge \mathcal{L}<em>{\pi</em>{\theta}}(\pi_{\theta + \Delta \theta}) - C \mathcal{D}<em>{KL}^{\max} (\pi</em>{\theta} || \pi_{\theta + \Delta \theta})<br>$$</p>
<p>论文中推导出$C$的值以及目标函数改进的下限。如果我们改进右侧，可以保证左侧也得到改进。本质上，如果替代优势$\mathcal{L}<em>{\pi</em>{\theta}}(\pi_{\theta + \Delta \theta})$超过最坏情况下的近似误差$C \mathcal{D}<em>{KL}^{\max} (\pi</em>{\theta} || \pi_{\theta + \Delta \theta})$，我们一定会改进目标。</p>
<p>这就是<strong>单调改进定理</strong>。相应的过程是<strong>最小化最大化算法（MM）</strong>。即如果我们改进下限，我们也会将目标改进至少相同的量。</p>
<h2 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h2><p>在实际的算法实现方面，TRPO和自然策略梯度算法没有太大的区别。TRPO的核心是利用单调改进定理，验证更新是否真正改进了我们的策略。</p>
<p>咕咕咕</p>
<!-- ### **共轭梯度法（conjugate gradient method）**

在自然策略梯度算法中，计算逆Fisher矩阵是一个耗时且数值不稳定的过程，特别是对于神经网络，参数矩阵可以变得非常大，$O(\theta^3)$的时间复杂度将无法计算。

好消息是，我们对逆矩阵本身并不感兴趣。观察自然策略梯度的方程式，如果我们可以直接得到乘积$F^{-1}\nabla \log \pi_{\theta}(x)$，就不再需要逆。

引入共轭梯度法，这是一个近似上式乘积的数值过程，这样我们就可以避免计算逆矩阵。共轭梯度通常在$|\theta|$步内收敛，从而可以处理大矩阵。

### 线搜索（line search）

虽然自然梯度策略中提供了给定KL散度约束的最佳步长，但由于存在较多的近似值，实际上可能不满足该约束。

TRPO 通过执行线搜索来解决此问题，通过不断地迭代减小更新的大小，直到第一个不违反约束的更新。这个过程可以看作是不断缩小信任区域，即我们相信更新可以实际改进目标的区域。 -->

<h1 id="近端策略优化算法（PPO）"><a href="#近端策略优化算法（PPO）" class="headerlink" title="近端策略优化算法（PPO）"></a>近端策略优化算法（PPO）</h1><h2 id="TRPO算法的缺陷"><a href="#TRPO算法的缺陷" class="headerlink" title="TRPO算法的缺陷"></a>TRPO算法的缺陷</h2><ul>
<li>无法处理大参数矩阵</li>
<li>二阶优化很慢</li>
<li>TRPO 很复杂</li>
</ul>
<h2 id="PPO-Penalty"><a href="#PPO-Penalty" class="headerlink" title="PPO Penalty"></a>PPO Penalty</h2><p>TRPO在理论分析上推导出与KL散度相乘的惩罚项，但在实践中，这种惩罚往往过于严格，只产生非常小的更新。因此，问题是如何可靠地确定缩放参数$\beta$，同时避免overshooting：</p>
<p>$$<br>\Delta \theta^* &#x3D; \argmax_{\Delta \theta} \mathcal{L}<em>{\theta + \Delta \theta}(\theta + \Delta \theta) - \beta \mathcal{D}</em>{KL}(\pi_{\theta} || \pi_{\theta + \Delta \theta})<br>$$</p>
<p>PPO通过设置目标散度$\delta$的方式解决了这个问题，希望我们的每次更新都位于目标散度附近的某个地方。目标散度应该大到足以显著改变策略，但又应该小到足以使更新稳定。</p>
<p>每次更新后，PPO都会检查更新的大小。如果最终更新的散度超过目标散度的1.5倍，则下一次迭代我们将加倍$\beta$来更加重惩罚。相反，如果更新太小，我们将$\beta$减半，从而有效地扩大信任区域。迭代更新的思路与TRPO线搜索有一些相似之处，但PPO搜索是在两个方向上都有效的，而TRPO是单向减小的。</p>
<p>只是基于启发式确定的。根据经验，PPO对数值设置是非常不敏感的。总之，我们牺牲了一些数学上的严谨性来使实际的效果更好。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: initial policy parameters theta_0, initial KL penalty beta_0, target KL-divergence delta</span><br><span class="line">for k = 0, 1, 2, ... do</span><br><span class="line">    Collect set of partial trajectories D_k on policy pi_k = pi_&#123;theta_k&#125;</span><br><span class="line">    Estimate advantages A_t^&#123;pi_k&#125; using any advantage estimation algorithm</span><br><span class="line">    Compute policy update:</span><br><span class="line">        theta_&#123;k + 1&#125; = argmax(theta, L_&#123;theta_k&#125;(theta) - beta_k * D_&#123;KL&#125;(theta || theta_k))</span><br><span class="line">    by taking K steps of minibatch SGD (via Adam)</span><br><span class="line">    if D_&#123;KL&#125;(theta_&#123;k + 1&#125; || theta_k) &gt;= 1.5 delta then</span><br><span class="line">        beta_&#123;k + 1&#125; = beta_&#123;k&#125; * 2</span><br><span class="line">    else if D_&#123;KL&#125;(theta_&#123;k + 1&#125; || theta_k) &lt;= delta / 1.5 then</span><br><span class="line">        beta_&#123;k + 1&#125; = beta_&#123;k&#125; / 2</span><br><span class="line">    else</span><br><span class="line">        beta_&#123;k + 1&#125; = beta_k</span><br></pre></td></tr></table></figure>

<h2 id="PPO-Clip"><a href="#PPO-Clip" class="headerlink" title="PPO Clip"></a>PPO Clip</h2><p>与其费心随着时间的推移改变惩罚，PPO Clip直接限制策略可以改变的范围。我们重新定义了替代优势：</p>
<p>$$<br>\mathcal{L}<em>{\pi</em>{\theta}}^{CLIP}(\pi_{\theta_k}) \\<br>&#x3D; \mathbb{E}<em>{\tau \sim \pi</em>{\theta}} \left[ \sum_{t&#x3D;0}^T [\min \left( \rho_t(\pi_{\theta}, \pi_{\theta_k})A_{t}^{\pi_{\theta_k}}, clip(\rho_t(\pi_{\theta}, \pi_{\theta_k}), 1 - \epsilon, 1 + \epsilon)A_{t}^{\pi_{\theta_k}} \right)] \right]<br>$$</p>
<p>$\rho_t$ 为重要性采样：</p>
<p>$$<br>\rho_t(\theta) &#x3D; \frac{\pi_{\theta}(a_t | s_t)}{\pi_{\theta_k}(a_t | s_t)}<br>$$</p>
<p>为了实现想要达到的效果，我们应该调整$\epsilon$，作为对KL散度的隐式限制。根据经验，$\epsilon&#x3D;0.1 or 0.2$是实际效果较好的值。</p>
<h2 id="PPO2"><a href="#PPO2" class="headerlink" title="PPO2"></a>PPO2</h2><p>PPO2是Open AI发布的算法更新版本，是矢量化环境的PPO算法实现，针对 GPU 进行了优化，更好地支持并行训练。它与PPO也有许多实际实现的差异，例如优势被自动归一化、价值函数被裁剪等，但与本文概述的PPO具有相同的数学基础。如果需要直接使用OpenAI实现的PPO算法，则应该使用PPO2。</p>
]]></content>
      <tags>
        <tag>reinforcement learning</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch-checkpoints相关</title>
    <url>/2025/07/27/pytorch-checkpoints/</url>
    <content><![CDATA[<span id="more"></span>

<p>[TOC]</p>
<h2 id="checkpoints-导出"><a href="#checkpoints-导出" class="headerlink" title="checkpoints 导出"></a>checkpoints 导出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.save(&#123;<span class="string">&#x27;model_state_dict&#x27;</span>: model.state_dict()&#125;, <span class="string">&#x27;/path/to/checkpoints&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="checkpoints-导入"><a href="#checkpoints-导入" class="headerlink" title="checkpoints 导入"></a>checkpoints 导入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">state = torch.load(<span class="string">&#x27;/path/to/checkpoints&#x27;</span>)</span><br><span class="line">model.load_state_dict(state[<span class="string">&#x27;model_state_dict&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h2 id="model-state-dict-描述"><a href="#model-state-dict-描述" class="headerlink" title="model.state_dict() 描述"></a>model.state_dict() 描述</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(method) <span class="keyword">def</span> <span class="title function_">state_dict</span>(<span class="params"></span></span><br><span class="line"><span class="params">    *,</span></span><br><span class="line"><span class="params">    prefix: <span class="built_in">str</span> = ...,</span></span><br><span class="line"><span class="params">    keep_vars: <span class="built_in">bool</span> = ...</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span><br></pre></td></tr></table></figure>

<h2 id="model-state-dict-keys"><a href="#model-state-dict-keys" class="headerlink" title="model.state_dict().keys()"></a>model.state_dict().keys()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sequential(</span><br><span class="line">  (0): Conv2d(3, 16, kernel_size=(11, 11), stride=(3, 3))</span><br><span class="line">  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span><br><span class="line">  (2): ReLU(inplace=True)</span><br><span class="line">  (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="line">  (4): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1))</span><br><span class="line">  (5): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span><br><span class="line">  (6): ReLU(inplace=True)</span><br><span class="line">  (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="line">  (8): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="line">  (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span><br><span class="line">  (10): ReLU(inplace=True)</span><br><span class="line">  (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))</span><br><span class="line">  (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span><br><span class="line">  (13): ReLU(inplace=True)</span><br><span class="line">  (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="line">  (15): Flatten(start_dim=1, end_dim=-1)</span><br><span class="line">  (16): Linear(in_features=3136, out_features=2048, bias=True)</span><br><span class="line">  (17): ReLU(inplace=True)</span><br><span class="line">  (18): Linear(in_features=2048, out_features=1, bias=True)</span><br><span class="line">  (19): Sigmoid()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(model.state_dict().keys())</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">odict_keys([&#x27;0.weight&#x27;, &#x27;0.bias&#x27;, &#x27;1.weight&#x27;, &#x27;1.bias&#x27;, &#x27;1.running_mean&#x27;, &#x27;1.running_var&#x27;, &#x27;1.num_batches_tracked&#x27;, &#x27;4.weight&#x27;, &#x27;4.bias&#x27;, &#x27;5.weight&#x27;, &#x27;5.bias&#x27;, &#x27;5.running_mean&#x27;, &#x27;5.running_var&#x27;, &#x27;5.num_batches_tracked&#x27;, &#x27;8.weight&#x27;, &#x27;8.bias&#x27;, &#x27;9.weight&#x27;, &#x27;9.bias&#x27;, &#x27;9.running_mean&#x27;, &#x27;9.running_var&#x27;, &#x27;9.num_batches_tracked&#x27;, &#x27;11.weight&#x27;, &#x27;11.bias&#x27;, &#x27;12.weight&#x27;, &#x27;12.bias&#x27;, &#x27;12.running_mean&#x27;, &#x27;12.running_var&#x27;, &#x27;12.num_batches_tracked&#x27;, &#x27;16.weight&#x27;, &#x27;16.bias&#x27;, &#x27;18.weight&#x27;, &#x27;18.bias&#x27;])</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>三（四）元环计数</title>
    <url>/2025/07/27/san-si-yuan-huan-ji-shu/</url>
    <content><![CDATA[<span id="more"></span>  

<h3 id="无向图三元环计数"><a href="#无向图三元环计数" class="headerlink" title="无向图三元环计数"></a>无向图三元环计数</h3><p>将边定向，度数少的点连向度数多的点，度数相同时编号小的连向编号大的。这样保证一个点它的出度不会超过 $ O(\sqrt{m}) $ （因为原本度数大于 $ \sqrt{m} $ 的点不会超过 $ \sqrt{m} $ 个）。<br>然后暴力。对于每个$u$，找$ v \in e[u] $, $ w \in e[v] $ ,若 $ w \in e[u] $ 那么找到三元环。一个个数就行。  </p>
<h3 id="无向图四元环计数"><a href="#无向图四元环计数" class="headerlink" title="无向图四元环计数"></a>无向图四元环计数</h3><p>和无向图三元环计数一样将边定向，不同的是计数方式会麻烦一点。<br>定向后四元环会出现两种情况：<br>$$<br>1 \rightarrow 2, 2 \rightarrow 3, 3 \rightarrow 4, 1 \rightarrow 4\<br>1 \rightarrow 2, 2 \rightarrow 3, 1 \rightarrow 4, 4 \rightarrow 3<br>$$<br>考虑通过对角$2, 4$ 计数。先将点按照定向后的图拓扑排序。先对于每一个$2$，找$ 1 \in ee[2] $, $ 3 \in ee[2] $, $ 4 \in e[1] $, $ 4 \in e[1] $, $ 4 $的拓扑序在$2$后，其中ee代表的是原图的边，e代表的是定向后的边。开个数组统计。  </p>
<p>时间复杂度都是 $ O(m \sqrt{m}) $ 。  </p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, M = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m, d[N], id[N], rnk[N];</span><br><span class="line"><span class="type">int</span> ex[M], ey[M];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], ee[N];</span><br><span class="line"><span class="type">int</span> cnt3 = <span class="number">0</span>, cnt4 = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> vis[N]; <span class="type">int</span> num[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		e[i].<span class="built_in">clear</span>(), ee[i].<span class="built_in">clear</span>();</span><br><span class="line">		vis[i] = <span class="number">0</span>, num[i] = <span class="number">0</span>;</span><br><span class="line">		cnt3 = cnt4 = <span class="number">0</span>;</span><br><span class="line">		d[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;ex[i], &amp;ey[i]);</span><br><span class="line">		++d[ex[i]], ++d[ey[i]];</span><br><span class="line">		ee[ex[i]].<span class="built_in">pb</span>(ey[i]), ee[ey[i]].<span class="built_in">pb</span>(ex[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x = ex[i], y = ey[i];</span><br><span class="line">		<span class="keyword">if</span>(d[x] &gt; d[y] || (d[x] == d[y] &amp;&amp; x &gt; y)) <span class="built_in">swap</span>(x, y);</span><br><span class="line">		e[x].<span class="built_in">pb</span>(y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[i]) vis[v] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> u : e[i]) <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(vis[v]) ++cnt3;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[i]) vis[v] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) id[i] = i;</span><br><span class="line">	<span class="built_in">sort</span>(id + <span class="number">1</span>, id + n + <span class="number">1</span>, [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123; <span class="keyword">return</span> d[x] != d[y] ? d[x] &lt; d[y] : x &lt; y; &#125;);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rnk[id[i]] = i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> u : ee[i]) <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(rnk[v] &gt; rnk[i])</span><br><span class="line">			cnt4 = (cnt4 + num[v]) % mod, num[v]++;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> u : ee[i]) <span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(rnk[v] &gt; rnk[i]) num[v] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, cnt3, cnt4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> T; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">	<span class="keyword">for</span>(; T; --T) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="有向图三（四）元环计数"><a href="#有向图三（四）元环计数" class="headerlink" title="有向图三（四）元环计数"></a>有向图三（四）元环计数</h3><p>先将边看作无向边，枚举（统计）环的时候再判断方向即可。  </p>
<h3 id="竞赛图找三元环"><a href="#竞赛图找三元环" class="headerlink" title="竞赛图找三元环"></a>竞赛图找三元环</h3><p>只要不是拓扑图就有三元环。  </p>
<h3 id="竞赛图三元环计数"><a href="#竞赛图三元环计数" class="headerlink" title="竞赛图三元环计数"></a>竞赛图三元环计数</h3><p>容斥。<br>$$<br>Ans &#x3D; C(n, 3) - \sum_{i&#x3D;1}^{n}C(d_i, 2) \space d_i表示i点的出度<br>$$</p>
]]></content>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>Video Depth Anything</title>
    <url>/2025/07/27/video-depth-anything/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>Depth Anything 的问题：处理视频时遭受时间不一致性（temporal inconsistency）。  </p>
<p>作者提出了Video Depth Anything，能够对长视频高效地生成高质量持续的深度估计。  </p>
<p>Video Depth Anything 基于 Depth Anything v2 ，将它的 head 替换为高效的 spatial-temporal<br>head。  </p>
<p>作者设计了直接且高效的时间一致性损失函数，通过约束时间深度梯度，消除了额外的几何先验的需求。  </p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>特别地，作者先设计了轻量的 spatial-temporal head (STH) 去替换 DPT head ，然后使得时间信息能够交流。STH包含四个时间注意力层 (temporal attention layers) , 应用在每个空间位置的时间维度。只在 head 引入 时间注意力防止了已经学习过的表示（representation）被有限的视频数据破坏。  </p>
<p>接着，作者提出了时间梯度匹配损失函数，去约束沿着时间维度的深度估计梯度，匹配从ground truth 计算得到的值。这个损失函数同时用尺度平移不变损失和空间梯度匹配损失优化了。  </p>
<p>为了能够做长视频的推断，作者开发了新的分段处理策略（segment-wise processing strategy）。每一个新的段都用 8 个重叠的帧和之前视频片段的两个关键帧连接，共形成 32 帧。然后，为了保证平滑性，重叠的帧将逐步在两个连续的窗口插值。  </p>
<h1 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h1><p>略  </p>
<h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><p><img src="/2025/07/27/video-depth-anything/video_depth_anything_pipeline.jpg">  </p>
<h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p>由于缺少足够的视频资源，作者从预训练的 Depth Anything v2 开始，采用共同训练策略，同时用图像和视频数据。  </p>
<h3 id="Depth-Anything-Encoder"><a href="#Depth-Anything-Encoder" class="headerlink" title="Depth Anything Encoder"></a>Depth Anything Encoder</h3><p>用了 Depth Anything Encoder 作为模型的 encoder。为了减少训练损耗和保护训练好的特征，这个encoder要冻结参数。  </p>
<p>为了用image encoder提取视频帧里的特征，作者将视频片段中的时间维度折叠到批次（batch）维度中。  </p>
<p>输入：$ {X} \in \mathbb{R}^{(B \times N) \times C \times H \times W} $ ，B为batch大小，N为视频片段帧数，C为通道数。  </p>
<p>通过encoder后得到中间特征图 $ {F_{i}} \in \mathbb{R}^{(B \times N) \times (\frac{H}{p} \times \frac{W}{p}) \times C_i} $ ，p为encoder的patch大小。  </p>
<p>image encoder忽略了两帧之间时间信息，需要spatiotemporal head。  </p>
<h3 id="Spatiotemporal-Head-STH"><a href="#Spatiotemporal-Head-STH" class="headerlink" title="Spatiotemporal Head(STH)"></a>Spatiotemporal Head(STH)</h3><p>STH在DPT（Vision transformers for dense prediction） head的基础上多插入了一个时间层来捕获时间信息。一个时间层包含多头自注意力模型和前馈网络（feed-forward network）。当时间层输入一个特征 $ {F_{i}} $ ，时间维度N孤立，自注意力只在时间维度进行，以促进时间特征的交互。为了捕捉不同帧之间的时序位置关系，我们利用绝对位置嵌入来编码视频序列中的时序位置信息。  </p>
<p>STH在 $ {F_i} $ 均匀采样了4个特征图（包含最终特征，记为 $ {F_4} $）作为输入，预测深度图 $ {D} \in \mathbb{R}^{H \times W} $ 。选中的 $ {F_i} $ 输入reassemble layer生成特征金字塔。然后，特征从低分辨率到高分辨率通过fusion layer进行融合。reassemble layer和fusion layer由DPT提出。最终融合得到的高分辨率特征图通过输出层生成深度图 $ {D} $ 。为了减少计算量，作者在一些特征分辨率低的地方插入了temporal layer。  </p>
<h2 id="Temporal-Gradient-Matching-Loss"><a href="#Temporal-Gradient-Matching-Loss" class="headerlink" title="Temporal Gradient Matching Loss"></a>Temporal Gradient Matching Loss</h2><h3 id="OPW-Optical-Flow-Based-Warping-loss"><a href="#OPW-Optical-Flow-Based-Warping-loss" class="headerlink" title="OPW(Optical Flow Based Warping) loss"></a>OPW(Optical Flow Based Warping) loss</h3><p>为了约束时间一致性，之前的视频模型假定相邻帧对应位置的深度一致，通过光流检验。  </p>
<p>对于两个深度预测结果， $ p_{i}, p_{i + 1} $ ，根据从光流推出的扭曲关系， $ p_{i + 1} $ 被扭曲成 $ \hat{p}_{i} $ ，则损失函数为  </p>
<p>$$<br>\mathcal{L}<em>{OPW}&#x3D;\frac{1}{N - 1}\sum</em>{i &#x3D; 2}^{N} || p_{i} - \hat{p}_{i} ||<br>$$</p>
<p>N为视频窗口长度， $ ||\cdot || $ 为 $ l1 $ 距离。  </p>
<p>OPW的严重问题：相邻帧对应点的深度不是不变的。  </p>
<p>作者提出新的方式。  </p>
<h3 id="Temporal-gradient-matching-loss-TGM"><a href="#Temporal-gradient-matching-loss-TGM" class="headerlink" title="Temporal gradient matching loss(TGM)"></a>Temporal gradient matching loss(TGM)</h3><p>我们假设相邻预测帧中对应点的深度变化应与在ground truth中观察到的变化保持一致。  </p>
<p>$$<br>\mathcal{L}<em>{SE} &#x3D; \frac{1}{N - 1} \sum</em>{i &#x3D; 2}^{N}|| \  |\hat{d}_i - d_i| - |\hat{g}_i - g_i| \  ||<br>$$</p>
<p>这里d, g都是预测值和ground truth缩放和平移后的版本。  </p>
<p>然而，生成光流会带来额外的开销。  </p>
<p>事实上，不需要用光流得到对应点来使用，可以直接用相邻帧同一坐标系的深度计算损失。假设是相邻帧同一个 图像位置 的深度应当与ground truth一致。这个过程和在时间维度计算梯度一致。  </p>
<p>$$<br>\mathcal{L}<em>{TGM} &#x3D; \frac{1}{N - 1} \sum</em>{i &#x3D; 1}^{N - 1}|| \  |d_{i + 1} - d_i| - |g_{i + 1} - g_{i}| \  ||<br>$$</p>
<p>实践中，参考的点在ground truth里在相邻帧深度变化较小，$ |g_{i + 1} - g_i| &lt; 0.05 $ ，避免边缘、动态物体等因素对深度图产生突然变化使得训练不稳定。  </p>
<h3 id="总损失"><a href="#总损失" class="headerlink" title="总损失"></a>总损失</h3><p>$$<br>\mathcal{L}<em>{all}&#x3D;\alpha\mathcal{L}</em>{TGM}+\beta\mathcal{L}_{ssi}<br>$$</p>
<p>$ \mathcal{L}_{ssi} $ 是尺度和平移不变损失函数（见MiDaS）。$ \alpha, \beta $ 用于平衡时空一致性和单帧的空间结构。  </p>
<h2 id="Inference-strategy-for-super-long-sequence"><a href="#Inference-strategy-for-super-long-sequence" class="headerlink" title="Inference strategy for super-long sequence"></a>Inference strategy for super-long sequence</h2><p>提出了关键帧参考（key-frame referencing），继承之前预测的尺度和平移信息，将插值重叠保证平滑变化。  </p>
<h3 id="key-frame-referencing"><a href="#key-frame-referencing" class="headerlink" title="key-frame referencing"></a>key-frame referencing</h3><p><img src="/2025/07/27/video-depth-anything/inference_strategy_for_long_videos.jpg"></p>
<p>将一段视频分成三段：$ N - T_o - T_k $ 张未来的帧，$ T_o $ 张重叠的帧（之前的帧），$ T_k $ 张关键帧（之前的帧）。关键帧从之前的帧里子采样，间隔大小为 $ \Delta k $ 。这种方法将早期窗口的内容最小化计算量，融入当前窗口。根据实验结果，这种简单的策略可以显著减少累积的尺度漂移，特别是对于长视频。  </p>
<h3 id="Depth-clip-stitching"><a href="#Depth-clip-stitching" class="headerlink" title="Depth clip stitching"></a>Depth clip stitching</h3><p>相邻窗口的 $ T_o $ 张重叠的帧对避免深度图像闪烁很重要。  </p>
<ol>
<li><p>通过共享部分帧特征，连续窗口间的尺度和平移将更加相似。  </p>
</li>
<li><p>重叠帧的深度预测是通过在两个片段之间进行插值来更新的。</p>
</li>
</ol>
<p>假设之前的段第 $ o_i $ 张重叠帧的深度为 $ {D}<em>{o_i} ^{pre} $ ，当前的段深度为 $ {D}</em>{o_i}^{cur} $ ，则最终深度为 $ {D}<em>{o_i} &#x3D; {D}</em>{o_i}^{pre} \cdot w_i + {D}_{o_i}^{cur} \cdot (1 - w_i) $ ， $ w_i $ 大小从1到0、长度为 $ T_o $ 的线性衰减函数。  </p>
<h1 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h1><p>略  </p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>略  </p>
]]></content>
      <tags>
        <tag>Monocular Depth Estimation</tag>
      </tags>
  </entry>
  <entry>
    <title>退役后的日子</title>
    <url>/2025/07/27/tui-yi-hou-de-ri-zi/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="2022-9-24"><a href="#2022-9-24" class="headerlink" title="2022.9.24"></a>2022.9.24</h3><p><a href="https://codeforces.com/contest/1479/problem/D">CF1479D Odd Mineral Resource</a><br>假如不需要知道路径上哪些数只出现奇数次，那么这道题及类似于<a href="https://uoj.ac/problem/207">共价大爷游长沙</a>。<br>现在考虑如何找出路径上出现奇数次，范围在 $ [l, r] $ 之间的任意数。考虑用欧拉序的方式来维护路径，具体用主席树维护某一个值的出现次数。<br><a href="https://codeforces.com/contest/1479/submission/172846022">My Submission</a>  </p>
<p><a href="https://codeforces.com/contest/1515/problem/I">CF1515I Phoenix and Diamonds</a><br>读错题意若干次QAQ<br>如果用线段树暴力维护，每次选择连续一段尽可能取走，很容易被卡复杂度，实测Time Limit Exceeded on Test 71。<br>由于 $ c $ 一开始非常大，$ w_i $ 则较小，前面可以尽可能取，直到剩下的 $ c $ 小于 $ 10^5 $ 。<br>考虑对于每个 $ c $ ，大于 $ \lfloor c \rfloor $ 最多取一次，剩下的要在小于 $ \lfloor c \rfloor $ 中取。由于取的顺序是一定的，所以可以通过线段树维护能取到 $ \lfloor c \rfloor $ 的哪一个钻石，对于小于 $ \lfloor c \rfloor $ 的可以用另一个线段树维护。<br>考虑对于不同的 $ c $，$ \lfloor c \rfloor $ 会不同，难以预处理。直接按二进制按位预处理即可。<br><a href="https://codeforces.com/contest/1515/problem/I">My Submission</a>  </p>
<p>昨天CF有点摆。。。周末还有icpc网络赛。。。<br>晚上打了把ABC，状态极度不佳，明天靠队友。。。  </p>
<h3 id="2022-9-25"><a href="#2022-9-25" class="headerlink" title="2022.9.25"></a>2022.9.25</h3><p>dbq QAQ，我是罚时机器。。。<br>今天状态很不对，很多莫名其妙的错误同一天犯（数组开小、忘记取min，题意看错），好在队友发挥了作用，最后八题垫底（我的锅）（但我还是写了七道）  </p>
<h3 id="2022-9-28"><a href="#2022-9-28" class="headerlink" title="2022.9.28"></a>2022.9.28</h3><p>技能CD了一下，稍微暖一下手感~<br><a href="https://www.luogu.com.cn/problem/P5115">Check,Check,Check one two!</a><br>用后缀自动机维护parent树，任意两个endpos的lca的len是它们的最长公共前缀。<br>对于点对 $ (i, j) $ ， $ s[i - a + 1, i + b - 1] &#x3D; s[j - a + 1, j + b - 1] $ ，则贡献为 $ a \times b $ 。我们现在很容易地维护了前缀，考虑后缀如何处理。由于每个点对 $ (i, j) $ ，它们会在 $ (i + 1, j + 1) $ 至 $ (i + b - 1, j + b - 1) $ 都计算一边，故每次加上贡献 $ a $ 即可。<br>考虑 $ k1, k2 $ 的限制。对 $ (i, j) $ 已知的前缀进行约束，即直接统计点对在该前缀子串上都合法的情况。此外，对于 $ s[m, m + k1] $ （举个栗子），之前在 $ m $ 处的贡献应减去，且减去后不会对此再有影响。<br><a href="https://www.luogu.com.cn/record/87858659">My Submission</a><br>PS: LJ不在QQ群里供题了啊QAQ，日常口胡断粮了<br>最近要期中考，考虑先放一放ACM，先苟住学分绩。。。  </p>
<h3 id="2022-10-3"><a href="#2022-10-3" class="headerlink" title="2022.10.3"></a>2022.10.3</h3><p><a href="https://www.cnblogs.com/daniel14311531/p/16751516.html">&gt; Here &lt;</a>  </p>
<h3 id="2022-10-4"><a href="#2022-10-4" class="headerlink" title="2022.10.4"></a>2022.10.4</h3><p><a href="https://codeforces.com/problemset/problem/1734/F">CF1734F Zeros and Ones</a><br>为什么我想不到QAQ<br><a href="https://zhuanlan.zhihu.com/p/567630176">Solution from Zhihu</a>  </p>
<h3 id="2022-10-5"><a href="#2022-10-5" class="headerlink" title="2022.10.5"></a>2022.10.5</h3><p><a href="https://codeforces.com/contest/1712/problem/F">CF1712F Triameter</a><br><a href="https://codeforces.com/contest/1712/submission/174760486">My Submission</a>  </p>
<h3 id="2022-10-8"><a href="#2022-10-8" class="headerlink" title="2022.10.8"></a>2022.10.8</h3><p><a href="https://atcoder.jp/contests/agc009/tasks/agc009_d">AGC009D Uninity</a><br>题意实际上是求最大深度最小的点分树的深度。<br>考虑正常点分治下层数已经是 $ \mathcal{O}(\log n) $ 的，那么最优状态下一定小于正常点分治的深度，即深度状态可以状态压缩。<br>将节点按 $ 0, 1, 2, \dots, k $ 编号表示节点的Uninity值，其中叶子节点编号为 $ 0 $ 。<br>根据点分树的性质，任意两个编号相同的节点路径上一定存在编号比它们大的节点。<br>每个节点存状态数组 $ ned[u] $ ，表示 $ u $ 节点的子树内未完成成对匹配的编号，按位存储。对于 $ u $ ，假设有两个不同的子节点 $ v, w $ ，若 $ \exist x, 2^{x} \in ned[v] \and ned[w] $ ，则 $ u $ 节点编号要大于 $ x $ ，否则 $ u $ 子树下编号为 $ x $ 将无法完成匹配。同时，若 $ \exist x, 2^{x} \in ned[v] $ ，则 $ u $ 也不能选 $ x $ ，否则 $ u $ 会与 $ v $ 子树内的同编号点无法匹配。<br>$ u $ 的编号从小到大贪心取即可。通过位运算骚操作可以让复杂度变为 $ \mathcal{O}(n) $ 。<br>[My Submission])(<a href="https://atcoder.jp/contests/agc009/submissions/35453858">https://atcoder.jp/contests/agc009/submissions/35453858</a>)  </p>
<h3 id="2022-10-9"><a href="#2022-10-9" class="headerlink" title="2022.10.9"></a>2022.10.9</h3><p>突然发现自己构造能力很差，再不补就是弱鸡水平了。<br>今天看到一个构造，要求构造一个 不存在长度大于等于3的等差子序列 的排列。方法大概是先将奇偶分开，奇数在前，偶数在后，这样不存在既有奇数又有偶数的等差子序列。再将奇数列和偶数列递归构造。这种方法同样适用于构造已知元素的数列，使它等差子序列个数尽可能少。<br>补了一下ICPC2022网络赛第一场的K题（可以在pintia上看）。可以发现最多不能击败 $ 2 \sqrt{\max{x_i}} $ ，因为可以先花 $ \sqrt{max{x_i}} $ 的时间叠buff，再花同样的时间将buff叠战力，然后无敌。同样，buff最多叠 $ \sqrt{max{x_i}} $ 层，因为多叠的一层的时间将它用来叠战力，到无敌时始终更优。然后dp，$ f[i][j][k] $ 表示干了第i个，没干掉j个，buff层数为k的最大战力。<br>这周戒题，准备期中考。  </p>
<h3 id="2022-10-18"><a href="#2022-10-18" class="headerlink" title="2022.10.18"></a>2022.10.18</h3><p><a href="https://atcoder.jp/contests/agc023/tasks/agc023_f">AGC023F 01 on Tree</a><br>观察不难发现，父亲节点一定先于儿子节点取，对于每个儿子向父亲合并时，最优策略一定是儿子的序列进行归并（每个儿子的子序列保持不变）。这有了递归的基础。<br>此外，我们还可以发现，假如当前有0，则能取尽取；如果有1，则取尽可能少的1去获得足量的0。考虑对于一个01序列，假如取了前面的一串1，则后面紧跟着的一串0都要跟着取，也就是类似11…100…0这样的取法是绑定的，不会在归并时改变。考虑取法的优先级。设这样的序列$a, b$ ，其中 $a_0, a_1, b_0, b_1$ 分别表示各自0、1的个数，比较相对位置，若$ a_1 \times b_0 &lt; b_1 \times a_0 $ ，则 $ a $ 在前更优。<br>此时已经可以直接dfs并用set维护11…100…0序列并暴力启发式合并了，不过这代码难度。。。<br>与其直接dfs，不如考虑一个序列如何直接接上父亲。如果这个序列是整棵树上最优的，那他可以直接接在父亲所在的序列后，然后合并成新的序列，虽然不满足11…100…0的形式，但是合并的贡献计算方式一致。用并查集和优先队列维护即可。<br><a href="https://atcoder.jp/contests/agc023/submissions/35758187">My Submission</a><br>（啊，这是凌晨写的）<br><a href="https://www.luogu.com.cn/blog/luotianze/solution-p5496#">PAM（回文自动机）</a>  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2100010</span>;</span><br><span class="line"><span class="type">int</span> n, id[N];</span><br><span class="line"><span class="type">char</span> s[N]; <span class="type">int</span> len[N], fail[N], tot, sz[N], ch[N][<span class="number">26</span>], cur;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	len[<span class="number">0</span>] = <span class="number">0</span>, len[<span class="number">1</span>] = <span class="number">-1</span>, fail[<span class="number">0</span>] = <span class="number">1</span>, fail[<span class="number">1</span>] = <span class="number">0</span>, tot = <span class="number">1</span>, cur = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gfail</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(; now - len[x] - <span class="number">1</span> &lt; <span class="number">1</span> || s[now - len[x] - <span class="number">1</span>] != s[now]; x = fail[x]);</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> pos = <span class="built_in">gfail</span>(cur, now);</span><br><span class="line">	<span class="keyword">if</span>(!ch[pos][c]) &#123;</span><br><span class="line">		++tot;</span><br><span class="line">		fail[tot] = ch[<span class="built_in">gfail</span>(fail[pos], now)][c];</span><br><span class="line">		ch[pos][c] = tot, len[tot] = len[pos] + <span class="number">2</span>, sz[tot] = sz[fail[tot]] + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cur = ch[pos][c];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>), n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">rep</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">		s[i] = (s[i] - <span class="number">97</span> + ans) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">		<span class="built_in">insert</span>(i, s[i] - <span class="number">97</span>), ans = sz[cur];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2022-10-26"><a href="#2022-10-26" class="headerlink" title="2022.10.26"></a>2022.10.26</h3><p>少年不知mt19937 rnd(time(0))贵，错把srand(time(0)) 当宝贝。  </p>
<h3 id="2022-11-6"><a href="#2022-11-6" class="headerlink" title="2022.11.6"></a>2022.11.6</h3><p>被各种事情搞得焦头烂额，又要大一年度项目又要思政实践项目又要考试又要竞赛，感觉再搞下去离大学ICPC&#x2F;CCPC退役都不远了。<br>今天下午是我的第一场ICPC，不奢求有多好的成绩吧，只希望能够尽可能好地发挥吧，最近状态极度不稳，水平在幼儿园和红名之间剧烈波动，构造题、思维题依旧是我的弱项。<br>铁了  </p>
<h3 id="2022-11-9"><a href="#2022-11-9" class="headerlink" title="2022.11.9"></a>2022.11.9</h3><p><a href="https://codeforces.com/gym/103428/problem/G">G. Shinyruo and KFC</a> 值域根号分治<br><a href="https://codeforces.com/gym/103428/problem/M">M. 810975</a> 隔板法  </p>
<h3 id="2022-11-12"><a href="#2022-11-12" class="headerlink" title="2022.11.12"></a>2022.11.12</h3><p>关于某个质数的剩余系的题原根是真的好用。原根可以把数的乘法变成原根上指数的加法，这样也可以快速计算二次剩余。对于每个质数都有原根。<br><a href="https://codeforces.com/gym/103428/problem/C">C. Assign or Multiply</a>利用原根把乘法变加法，用数组标记某个数是否出现过，每加入一个数，进行循环移位，找到循环移位后值不同的位置并修改，这个操作总共是不超过n次的，利用二分和树状数组维护的哈希来找到这些位置并修改。  </p>
<h3 id="2022-11-13"><a href="#2022-11-13" class="headerlink" title="2022.11.13"></a>2022.11.13</h3><p>假如不能比较两个数的两两关系（拓扑图而非竞赛图）的话还是不要用sort了吧。。。<br><a href="https://atcoder.jp/contests/abc277/tasks/abc277_h">Ex - Constrained Sums</a><br>约束 $ L \leq a + b, a \in [0, M], b \in [0, M] $ 等价于 $ \forall x \in [0, M], x \leq a \or L - x + 1 \leq b $ 成立，证明显然。如果是 $ a + b \leq R $ 的用互补律即可 $ (a \or b &#x3D; \overline{\overline{a} \and \overline{b}}) $ 。<br>然后2-sat，按照关系连边，详见代码<a href="https://atcoder.jp/contests/abc277/submissions/36472137">My Submission</a>  </p>
]]></content>
      <tags>
        <tag>口胡</tag>
      </tags>
  </entry>
  <entry>
    <title>「雅礼集训 2017 Day11」PATH</title>
    <url>/2025/07/27/ya-li-ji-xun-2017-day11-path/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/6051">「雅礼集训 2017 Day11」PATH</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>$$<br>概率 &#x3D; \frac{合法方案数}{总方案数}\\<br>m &#x3D; \sum_{i &#x3D; 1}^{n} a_i\\<br>总方案数 &#x3D; \frac{m!}{\prod a_i!}\\<br>合法方案数 &#x3D; \frac{m!}{\prod hook(i, j)} &#x3D; \prod_{1 \leq k \leq i \leq n} \prod_{a_{i + 1} &lt; j \leq a_i} (a_k - k + i - j + 1)\\<br>&#x3D; \prod_{1 \leq j \leq i \leq n} \frac{(a_j - a_{i + 1} + i - j)!}{(a_j - a_i + i - j)!}\\<br>&#x3D; \frac{\prod_{i &#x3D; 1}^{n}(n - i + a_i)}{\prod_{1 \leq i &lt; j \leq n}((a_i - i) - (a_j - j))}<br>$$</p>
<p>$$<br>概率 &#x3D; (\prod_{i &#x3D; 1}^n \frac{a_i!}{(n + a_i - i)!})(\prod_{1 \leq i &lt; j \leq n} ((a_i - i) - (a_j - j)))<br>$$<br>我们可以快速处理左边的式子，对于右边的式子，令 $ b_i &#x3D; a_i - i $ 。  </p>
<p>$$<br>\prod_{1 \leq i \leq j \leq n} ((a_i - i) - (a_j - j)) &#x3D; \prod_{1 \leq i &lt; j \leq n} (b_i - b_j)<br>$$</p>
<p>将括号展开发现 $ b_i - b_j &gt; 0 (i &lt; j) $  ，所以当 $ i \geq j $ 时贡献记为负数，可以忽略。  </p>
<p>令 $ \prod_{1 \leq i &lt; j \leq n} (b_i - b_j) &#x3D; \sum x^{f(x)} $ ，显然可以通过卷积求出 $ \sum  x^{f(x)} $ 。  </p>
<p>注意根据费马小定理 $ f(x) $ 应由 $ mod - 1 $ 取模，所以不能写 $ ntt $ ，由于答案不会爆 $ long~long $ ，所以可以写 $ fft $ 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">double</span> ld;</span><br><span class="line"><span class="type">const</span> ld pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1004535809</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], b[N], ans = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> fac[N], ifac[N];</span><br><span class="line">vector&lt;ll&gt; f, g;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x, ll y = mod - <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; y; y /= <span class="number">2</span>, x = <span class="built_in">mul</span>(x, x)) <span class="keyword">if</span>(y % <span class="number">2</span>) ss = <span class="built_in">mul</span>(ss, x);</span><br><span class="line">	<span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &lt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">mul</span>(fac[x], <span class="built_in">mul</span>(ifac[y], ifac[x - y]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> M = <span class="number">32768</span>;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="type">int</span> ss = <span class="number">1</span>; <span class="keyword">for</span>(; ss &lt;= x; ss &lt;&lt;= <span class="number">1</span>); <span class="keyword">return</span> ss; &#125;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">cp</span> &#123; ld x, y; <span class="built_in">cp</span>(ld X = <span class="number">0</span>, ld Y = <span class="number">0</span>) : <span class="built_in">x</span>(X), <span class="built_in">y</span>(Y) &#123;&#125; &#125;;</span><br><span class="line">	<span class="keyword">inline</span> cp <span class="keyword">operator</span>+(cp a, cp b) &#123; <span class="keyword">return</span> <span class="built_in">cp</span>(a.x + b.x, a.y + b.y); &#125;</span><br><span class="line">	<span class="keyword">inline</span> cp <span class="keyword">operator</span>-(cp a, cp b) &#123; <span class="keyword">return</span> <span class="built_in">cp</span>(a.x - b.x, a.y - b.y); &#125;</span><br><span class="line">	<span class="keyword">inline</span> cp <span class="keyword">operator</span>*(cp a, cp b) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">cp</span>(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dft</span><span class="params">(vector&lt;cp&gt; &amp;A, <span class="type">int</span> lmt, <span class="type">int</span> opt)</span> </span>&#123;</span><br><span class="line">		A.<span class="built_in">resize</span>(lmt);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; lmt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; j) <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = lmt &gt;&gt; <span class="number">1</span>; (j ^= k) &lt; k; k &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function">vector&lt;cp&gt; <span class="title">w</span><span class="params">(lmt &gt;&gt; <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> mid = <span class="number">1</span>; mid &lt; lmt; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">			w[<span class="number">0</span>] = <span class="built_in">cp</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">			cp wn = <span class="built_in">cp</span>(<span class="built_in">cos</span>(opt * pi / mid), <span class="built_in">sin</span>(opt * pi / mid));</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; mid; j++) w[j] = w[j - <span class="number">1</span>] * wn;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lmt; j += R)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">					cp x = A[j + k], y = A[j + mid + k] * w[k];</span><br><span class="line">					A[j + k] = x + y, A[j + mid + k] = x - y;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">-1</span>) <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) A[i].x /= lmt, A[i].x += <span class="number">0.5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;ll&gt; <span class="title">Mul</span><span class="params">(<span class="type">const</span> vector&lt;ll&gt; &amp;A, <span class="type">const</span> vector&lt;ll&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> lmt = <span class="built_in">Get</span>(A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">		vector&lt;cp&gt; a, b; vector&lt;ll&gt; res;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) a.<span class="built_in">pb</span>(<span class="built_in">cp</span>(A[i], <span class="number">0</span>));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; B.<span class="built_in">size</span>(); i++) b.<span class="built_in">pb</span>(<span class="built_in">cp</span>(B[i], <span class="number">0</span>));</span><br><span class="line">		<span class="built_in">dft</span>(a, lmt, <span class="number">1</span>), <span class="built_in">dft</span>(b, lmt, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lmt; i++) a[i] = a[i] * b[i];</span><br><span class="line">		<span class="built_in">dft</span>(a, lmt, <span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() + B.<span class="built_in">size</span>(); i++) res.<span class="built_in">pb</span>((ll)a[i].x);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), b[i] = a[i] + n - i;</span><br><span class="line">	fac[<span class="number">1</span>] = fac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = ifac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; i++) fac[i] = <span class="built_in">mul</span>(fac[i - <span class="number">1</span>], i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; i++) ifac[i] = <span class="built_in">mul</span>(mod - mod / i, ifac[mod % i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; i++) ifac[i] = <span class="built_in">mul</span>(ifac[i - <span class="number">1</span>], ifac[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = <span class="built_in">mul</span>(ans, <span class="built_in">mul</span>(fac[a[i]], ifac[b[i]]));</span><br><span class="line">	<span class="keyword">if</span>(n &lt;= <span class="number">3000</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">				ans = <span class="built_in">mul</span>(ans, a[i] - a[j] + j - i);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	f.<span class="built_in">resize</span>(N), g.<span class="built_in">resize</span>(N);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ++f[a[i] - i + n], ++g[i - a[i] + a[<span class="number">1</span>]];</span><br><span class="line">	<span class="keyword">for</span>(; !f.<span class="built_in">back</span>(); f.<span class="built_in">pop_back</span>()); <span class="keyword">for</span>(; !g.<span class="built_in">back</span>(); g.<span class="built_in">pop_back</span>());</span><br><span class="line">	f = Poly::<span class="built_in">Mul</span>(f, g), f.<span class="built_in">resize</span>(N);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = a[<span class="number">1</span>] + n + <span class="number">1</span>; i &lt;= (a[<span class="number">1</span>] + n) * <span class="number">2</span>; i++)</span><br><span class="line">		ans = <span class="built_in">mul</span>(ans, <span class="built_in">ksm</span>(i - a[<span class="number">1</span>] - n, f[i]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFT</tag>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title>【libreoj573】单枪匹马</title>
    <url>/2025/07/27/%E3%80%90libreoj573%E3%80%91dan-qiang-pi-ma/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="https://loj.ac/problem/573">【libreoj573】单枪匹马</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>可以证明直接计算不需要约分，可以直接取模。<br>证明：若 $ \frac{x}{y} $ 中 $ x, y $ 互质，则 $ a + \frac{x}{y} &#x3D; \frac{ay + x}{y} $ 中 $ ay + x, y $ 互质（考虑辗转相除法中 <code>gcd(X, Y) = gcd(Y, X % Y) (Y = y, X = ax + y)</code> ）。<br>这样可以得到 $ 35 pts $ 。<br>设 $ f[a_0 \dots a_n] &#x3D; \frac{x[a_0 \dots a_n]}{y[a_0 \dots a_n]} $ ，则：<br>$$<br>\frac{x[a_0 \dots a_n]}{y[a_0 \dots a_n]} &#x3D; a_0 + \frac{y[a_1 \dots a_n]}{x[a_1 \dots a_n]} &#x3D; \frac{y[a_1 \dots a_n] + a_0 x[a_1 \dots a_n]}{x[a_1 \dots a_n]}<br>$$<br>由于这些都是最简分数，所以：<br>$$<br>x[a_0 \dots a_n] &#x3D; y[a_1 \dots a_n] + a_0x[a_1 \dots a_n]\\<br>y[a_0 \dots a_n] &#x3D; x[a_1 \dots a_n]<br>$$<br>可以得到：<br>$$<br>x[a_0 \dots a_n] &#x3D; x[a_2 \dots a_n] + a_0x[a_1 \dots a_n]\\<br>y[a_0 \dots a_n] &#x3D; y[a_2 \dots a_n] + a_0y[a_1 \dots a_n]<br>$$<br>考虑在图上的意义。在一个由 $ n $ 个节点的有向图，$ i $ 向 $ i + 1 $ 连边权为 $ a_i $ 的边，向 $ i + 2 $ 连边权为 $ 1 $ 的边。最后的值为 $ 1 $ 到 $ n $ 的路径边权乘积之和。显然这些边可以反向。可以得到：<br>$$<br>x[a_0 \dots a_n] &#x3D; a_nx[a_0 \dots a_{n-1}] + x[a_0 \dots a_{n - 2}]\\<br>y[a_0 \dots a_n] &#x3D; a_ny[a_0 \dots a_{n-1}] + y[a_0 \dots a_{n - 2}]<br>$$<br>然后这个东西可以矩阵转移。<br>$$<br>A_i &#x3D; \left[<br>\begin{matrix}<br>a_i&amp;1\\<br>1&amp;0<br>\end{matrix}<br>\right],<br>inv_i &#x3D; \left[<br>\begin{matrix}<br>0&amp;1\\<br>1&amp;mod - a_i<br>\end{matrix}<br>\right]\\<br>\left[<br>\begin{matrix}<br>ansx\\<br>ansy<br>\end{matrix}<br>\right] &#x3D; \prod_{i &#x3D; l}^{r} A_i &#x3D; (\prod_{i &#x3D; 1}^{r}A_i) \times (\prod_{i &#x3D; 1}^{l - 1}inv_i)<br>$$<br>维护前缀积即可。<br>时间复杂度 $ O(n + m) $ （矩阵乘法常数堪比一个 $ \log $ ） 。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, m, type, ansx, ansy;</span><br><span class="line"><span class="type">int</span> a[N], len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y &lt; mod ? x + y : x + y - mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y &lt; <span class="number">0</span> ? x - y + mod : x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)((ll)x * y % mod); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mtrx</span> &#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">2</span>][<span class="number">2</span>]; <span class="built_in">mtrx</span>() &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)); &#125;</span><br><span class="line">	<span class="keyword">inline</span> mtrx <span class="keyword">operator</span>*(<span class="type">const</span> mtrx &amp;yy)<span class="type">const</span> &#123;</span><br><span class="line">		mtrx res = <span class="built_in">mtrx</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">				res.a[i][j] = <span class="built_in">add</span>(res.a[i][j], <span class="built_in">mul</span>(a[i][k], yy.a[k][j]));</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; mtrx sum[N], inv[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	++len; mtrx mu; mu.a[<span class="number">1</span>][<span class="number">0</span>] = mu.a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	mu.a[<span class="number">0</span>][<span class="number">0</span>] = x, sum[len] = sum[len - <span class="number">1</span>] * mu;</span><br><span class="line">	mu.a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>, mu.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">sub</span>(<span class="number">0</span>, x), inv[len] = mu * inv[len - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;type);</span><br><span class="line">	sum[<span class="number">0</span>].a[<span class="number">0</span>][<span class="number">0</span>] = sum[<span class="number">0</span>].a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	inv[<span class="number">0</span>].a[<span class="number">0</span>][<span class="number">0</span>] = inv[<span class="number">0</span>].a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), <span class="built_in">insert</span>(x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> opt, x, y; m; --m) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line">		<span class="keyword">if</span>(opt == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); <span class="keyword">if</span>(type) x = x ^ ansx ^ ansy;</span><br><span class="line">			<span class="built_in">insert</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">			<span class="keyword">if</span>(type) x = x ^ ansx ^ ansy, y = y ^ ansx ^ ansy;</span><br><span class="line">			ans = inv[x - <span class="number">1</span>] * sum[y];</span><br><span class="line">			ansx = ans.a[<span class="number">0</span>][<span class="number">0</span>], ansy = ans.a[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ansx, ansy);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>【Codeforces 533A】Berland Miners</title>
    <url>/2025/07/27/%E3%80%90Codeforces%20533A%E3%80%91Berland%20Miners/</url>
    <content><![CDATA[<span id="more"></span>  

<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><p><a href="http://codeforces.com/problemset/problem/533/A">【Codeforces 533A】Berland Miners</a>  </p>
<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>先判定不修改是否合法。对于一个点 $ i $ ，它的价值为它到根节点 $ 1 $ 的路径上的最小值 $ mn[i] $（存在修改可能为次小值 $ nxt[i] $ ），将所有人的高度和 $ mn[i] $ 排序，山洞权值为 $ 1 $ ，人的权值为 $ -1 $ ，若任意前缀和都不小于 $ 0 $ ，则无需修改。<br>如果存在修改，那么一定要使得最后一个前缀和小于 $ 0 $ 的位置不小于 $ 0 $ ，这样处理就不需要二分了。<br>记录有多少个节点是取了 $ i $ 节点的 $ h_i $ ， $ i $ 节点的修改会影响到这些节点的值。用线段树维护前缀和（需要实现离散化权值）即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> snd second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> multiset&lt;pii&gt;::iterator IT;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, h[N], m, a[N], lb[N], ans = INF, pos;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], chs[N];</span><br><span class="line"><span class="type">int</span> mn[N], nxt[N];</span><br><span class="line">multiset&lt;pii&gt; st;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123; <span class="type">int</span> mn, lz; &#125;; P tr[N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x, <span class="type">const</span> <span class="type">int</span> &amp;y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> pii &amp;x, <span class="type">const</span> pii &amp;y)</span> </span>&#123; <span class="keyword">return</span> x.fst &gt; y.fst; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ff)</span> </span>&#123;</span><br><span class="line">	st.<span class="built_in">insert</span>(<span class="built_in">mp</span>(h[u], u)); IT it = st.<span class="built_in">begin</span>();</span><br><span class="line">	mn[u] = it-&gt;fst, chs[it-&gt;snd].<span class="built_in">pb</span>(u);</span><br><span class="line">	++it;</span><br><span class="line">	<span class="keyword">if</span>(it != st.<span class="built_in">end</span>()) nxt[u] = it-&gt;fst; <span class="keyword">else</span> nxt[u] = INF;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span>(v != ff) <span class="built_in">dfs</span>(v, u);</span><br><span class="line">	st.<span class="built_in">erase</span>(st.<span class="built_in">find</span>(<span class="built_in">mp</span>(h[u], u)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; tr[u].mn = <span class="built_in">Min</span>(tr[u * <span class="number">2</span>].mn, tr[u * <span class="number">2</span> + <span class="number">1</span>].mn); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) &#123; tr[u].mn = -(m - l + <span class="number">1</span>); <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(u * <span class="number">2</span>, l, mid), <span class="built_in">build</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> w)</span> </span>&#123; tr[u].mn += w, tr[u].lz += w; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u].lz) &#123;</span><br><span class="line">		<span class="built_in">pushtag</span>(u * <span class="number">2</span>, tr[u].lz), <span class="built_in">pushtag</span>(u * <span class="number">2</span> + <span class="number">1</span>, tr[u].lz);</span><br><span class="line">		tr[u].lz = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdy</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &gt; R) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(l == L &amp;&amp; r == R) &#123; <span class="built_in">pushtag</span>(u, w); <span class="keyword">return</span> ; &#125;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(R &lt;= mid) <span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, L, R, w);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(L &gt; mid) <span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, w);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">mdy</span>(u * <span class="number">2</span>, l, mid, L, mid, w);</span><br><span class="line">		<span class="built_in">mdy</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, R, w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qry</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> tr[u].mn;</span><br><span class="line">	<span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="built_in">pushdown</span>(u);</span><br><span class="line">	<span class="keyword">return</span> x &lt;= mid ? <span class="built_in">qry</span>(u * <span class="number">2</span>, l, mid, x) : <span class="built_in">qry</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y), e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>), <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		lb[i] = <span class="built_in">upper_bound</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>, mn[i]) - a - <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, m, <span class="number">1</span>, lb[i], <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tr[<span class="number">1</span>].mn &gt;= <span class="number">0</span>) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="keyword">for</span>(pos = m; pos &gt;= <span class="number">1</span>; pos--) <span class="keyword">if</span>(<span class="built_in">qry</span>(<span class="number">1</span>, <span class="number">1</span>, m, pos) &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(lb[i] &gt;= pos || nxt[i] &lt; a[pos] || chs[i].<span class="built_in">size</span>() &lt; -tr[<span class="number">1</span>].mn)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : chs[i]) &#123;</span><br><span class="line">			<span class="type">int</span> x = <span class="built_in">Min</span>(a[pos], nxt[v]);</span><br><span class="line">			x = <span class="built_in">upper_bound</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>, x) - a - <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, m, lb[v] + <span class="number">1</span>, x, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tr[<span class="number">1</span>].mn &gt;= <span class="number">0</span>) ans = <span class="built_in">Min</span>(ans, a[pos] - h[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v : chs[i]) &#123;</span><br><span class="line">			<span class="type">int</span> x = <span class="built_in">Min</span>(a[pos], nxt[v]);</span><br><span class="line">			x = <span class="built_in">upper_bound</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>, x) - a - <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">mdy</span>(<span class="number">1</span>, <span class="number">1</span>, m, lb[v] + <span class="number">1</span>, x, <span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(ans == INF) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Intel GPU 上开始使用pytorch-xpu(WSL2)</title>
    <url>/2025/08/11/pytorch-xpu/</url>
    <content><![CDATA[<p>参考链接：</p>
<p><a href="https://docs.pytorch.org/docs/2.8/notes/get_start_xpu.html">Getting Started on Intel GPU PyTorch 2.8 documentation</a></p>
<p><a href="https://www.intel.com/content/www/us/en/developer/articles/tool/pytorch-prerequisites-for-intel-gpu/2-8.html">PyTorch Prerequisites for Intel® GPUs</a></p>
<p><a href="https://dgpu-docs.intel.com/driver/client/overview.html#ubuntu-latest">Installing Client GPUs Intel® software for general purpose GPU capabilities documentation</a></p>
<h1 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h1><img title="" src="/2025/08/11/pytorch-xpu/ubuntu2404.png" alt="loading-ag-177" data-align="inline">

<h1 id="Intel-GPUs-Driver-Installation"><a href="#Intel-GPUs-Driver-Installation" class="headerlink" title="Intel GPUs Driver Installation"></a>Intel GPUs Driver Installation</h1><h2 id="Installing-Data-Center-GPU"><a href="#Installing-Data-Center-GPU" class="headerlink" title="Installing Data Center GPU"></a>Installing Data Center GPU</h2><p><a href="https://dgpu-docs.intel.com/driver/installation-rolling.html#ubuntu">Installing Data Center GPU: Rolling Releases —— Intel® software for general purpose GPU capabilities documentation</a></p>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y \</span><br><span class="line">    linux-headers-$(<span class="built_in">uname</span> -r) \</span><br><span class="line">    linux-modules-extra-$(<span class="built_in">uname</span> -r) \</span><br><span class="line">    flex bison \</span><br><span class="line">    intel-fw-gpu intel-i915-dkms xpu-smi</span><br><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>

<p>可能遇到的问题：</p>
<ol>
<li>wsl: Failed to translate ‘C:\Windows\system32’<br>wsl: Failed to translate ‘C:\Windows’<br>wsl: Failed to translate ‘C:\Windows\System32\Wbem’<br>wsl: Failed to translate ‘C:\Windows\System32\WindowsPowerShell\v1.0&#39;<br>wsl: Failed to translate ‘C:\Windows\System32\OpenSSH&#39;<br>wsl: Failed to translate ‘C:\Program Files\dotnet&#39;<br>wsl: Failed to translate ‘D:\Program Files\Git\cmd’<br>wsl: Failed to translate ‘D:\Program Files\Git\bin’<br>wsl: Failed to translate ‘D:\Program Files\nodejs&#39;<br>wsl: Failed to translate ‘C:\Users\29655\AppData\Local\Microsoft\WindowsApps’<br>wsl: Failed to translate ‘D:\Program Files\Microsoft VS Code\bin’<br>wsl: Failed to translate ‘C:\Users\29655\AppData\Roaming\npm’</li>
</ol>
<ul>
<li>解决方案：禁止wsl2访问windows的环境变量。</li>
</ul>
<ol start="2">
<li>E: Unable to locate package linux-headers-6.6.87.2-microsoft-standard-WSL2<br>E: Couldn’t find any package by glob ‘linux-headers-6.6.87.2-microsoft-standard-WSL2’<br>E: Unable to locate package linux-modules-extra-6.6.87.2-microsoft-standard-WSL2<br>E: Couldn’t find any package by glob ‘linux-modules-extra-6.6.87.2-microsoft-standard-WSL2’</li>
</ol>
<ul>
<li><p>解决方案：<del>问Kimi</del></p>
</li>
<li><ol>
<li><p>在 WSL2 Ubuntu 中运行：<code>uname -r</code>，输出例如<code>6.6.87.2-microsoft-standard-WSL2</code>。</p>
</li>
<li><p>安装依赖</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install build-essential bc flex bison libssl-dev libelf-dev</span><br></pre></td></tr></table></figure>
</li>
<li><ol start="3">
<li>下载并解压 WSL2 内核源码（含头文件）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src</span><br><span class="line"><span class="built_in">sudo</span> git <span class="built_in">clone</span> --depth 1 --branch linux-msft-wsl-6.6.87.2 \</span><br><span class="line">  https://github.com/microsoft/WSL2-Linux-Kernel.git</span><br></pre></td></tr></table></figure>
</li>
<li><ol start="4">
<li>创建头文件链接（供编译模块使用）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/src/WSL2-Linux-Kernel /lib/modules/$(<span class="built_in">uname</span> -r)/build</span><br></pre></td></tr></table></figure>
</li>
<li><ol start="5">
<li>验证是否成功</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /lib/modules/$(<span class="built_in">uname</span> -r)/build</span><br></pre></td></tr></table></figure>

<p>如果输出的是源码目录的链接，说明已配置好。</p>
</li>
</ul>
<p>执行<code>xpu-smi</code>时可能遇到的问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xpu-smi: /home/daniel/miniconda3/envs/learning/lib/libstdc++.so.6: version `GLIBCXX_3.4.32&#x27; not found (required by xpu-smi)</span><br><span class="line">xpu-smi: /home/daniel/miniconda3/envs/learning/lib/libstdc++.so.6: version `GLIBCXX_3.4.32&#x27; not found (required by /lib/x86_64-linux-gnu/libxpum.so.1)</span><br><span class="line">xpu-smi: /home/daniel/miniconda3/envs/learning/lib/libstdc++.so.6: version `GLIBCXX_3.4.30&#x27; not found (required by /lib/x86_64-linux-gnu/libxpum.so.1)</span><br><span class="line">xpu-smi: /home/daniel/miniconda3/envs/learning/lib/libstdc++.so.6: version `GLIBCXX_3.4.32&#x27; not found (required by /lib/x86_64-linux-gnu/libze_loader.so.1)</span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<p>升级 Conda 环境中的  libstdc++ 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge libstdcxx-ng=13</span><br></pre></td></tr></table></figure>

<h2 id="Driver-Installation-for-Client-GPUs-from-Intel"><a href="#Driver-Installation-for-Client-GPUs-from-Intel" class="headerlink" title="Driver Installation for Client GPUs from Intel"></a>Driver Installation for Client GPUs from Intel</h2><p><a href="https://dgpu-docs.intel.com/driver/client/overview.html#ubuntu-latest">Installing Client GPUs ——Intel® software for general purpose GPU capabilities documentation</a></p>
<h1 id="Install-pytorch-xpu-binaries"><a href="#Install-pytorch-xpu-binaries" class="headerlink" title="Install pytorch-xpu binaries"></a>Install pytorch-xpu binaries</h1><p><a href="https://docs.pytorch.org/docs/2.8/notes/get_start_xpu.html">Getting Started on Intel GPU PyTorch 2.8 documentation</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/xpu)</span><br></pre></td></tr></table></figure>

<p><img src="file:///E:/machine%20learning/pytorch-xpu/pytorch-xpu/result.png"></p>
]]></content>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
</search>
